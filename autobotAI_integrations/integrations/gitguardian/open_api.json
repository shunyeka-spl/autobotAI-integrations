{
    "openapi": "3.0.3",
    "info": {
        "title": "GitGuardian API",
        "version": "1.1.0",
        "termsOfService": "https://www.gitguardian.com/legal-terms",
        "license": {
            "name": "GitGuardian",
            "url": "https://www.gitguardian.com/legal-terms"
        },
        "x-logo": {
            "url": "https://static.gitguardian.com/gitguardian-logotype-vertical-white-background.png",
            "altText": "GitGuardian"
        },
        "contact": {
            "name": "GitGuardian",
            "email": "support@gitguardian.com",
            "url": "https://www.gitguardian.com"
        },
        "description": "# Introduction\n\nWhether you want to build a complete integration with your software development\nworkflow or simply want to test GitGuardian's policy break detection on any text content,\nyou can use our API.\n\n- The base url for the latest version is `https://api.gitguardian.com/v1` or `https://api.eu1.gitguardian.com/v1` depending on your location.\n- All data is sent and received as JSON by default.\n- All timestamps returned are ISO-8601 compliant, example:\n```python\n2020-03-16T04:46:00+00:00 # for date-time\n```\n\nGitGuardian supported wrappers:\n- Python: [**py-gitguardian**](https://github.com/GitGuardian/py-gitguardian)\n\nGitGuardian provides you with [**GitGuardian Shield**](https://github.com/GitGuardian/gg-shield),\na CLI application that uses the GitGuardian API through py-gitguardian\nto scan your files and detect potential secrets or issues in your code.\n\nThis CLI application can be used in many CIs (such as GitHub Actions, GitLab Pipelines, CircleCI,...)\nor as a pre-commit or pre-receive hook.\n\n# Authentication\n\nThe GitGuardian API uses API keys to authenticate requests.\nFor a detailed explanation, please refer to our dedicated [documentation](https://docs.gitguardian.com/api-docs/authentication).\n\nUse [/v1/health](#operation/health_check) to check the validity of your token if needed.\n\n# Pagination\n\nThe GitGuardian API employs cursor-based pagination.\nFor a detailed explanation, please refer to our dedicated [documentation](https://docs.gitguardian.com/api-docs/pagination).\n"
    },
    "paths": {
        "/v1/api_tokens/self": {
            "get": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "self-retrieve-api-token",
                "summary": "Retrieve details of the current API token.",
                "responses": {
                    "200": {
                        "description": "Current token details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/apiTokenDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "self-delete-api-token",
                "summary": "Revoke the current API token.",
                "responses": {
                    "204": {
                        "description": "Token revocation confirmation"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/v1/api_tokens": {
            "get": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "list-api-tokens",
                "summary": "List API tokens.",
                "description": "List all the tokens in the workspace, some filters are available and described\nbelow.\n",
                "security": [
                    {
                        "api-key": [
                            "api_tokens:read"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/APITokenStatusEnum"
                                }
                            ],
                            "description": "Status of the token."
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "description": "Filter by member id.",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "creator_id",
                        "in": "query",
                        "description": "Filter by creator id.",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "scopes",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Tokens with one of the following scopes.",
                            "example": "incidents:read,api_tokens:read",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/APITokenScopeEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search tokens based on their name."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "last_used_at",
                                "-last_used_at",
                                "expire_at",
                                "-expire_at",
                                "revoked_at",
                                "-revoked_at"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API tokens list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist"
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/apiTokenDetails"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/v1/api_tokens/{token_id}": {
            "get": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "retrieve-api-token",
                "summary": "Retrieve details of an API token.",
                "security": [
                    {
                        "api-key": [
                            "api_tokens:read"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "token_id",
                        "in": "path",
                        "required": true,
                        "description": "Id of the token.",
                        "schema": {
                            "type": "string",
                            "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current token details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/apiTokenDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "API token not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "delete-api-token",
                "summary": "Revoke an an API token.",
                "security": [
                    {
                        "api-key": [
                            "api_tokens:write"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "token_id",
                        "in": "path",
                        "required": true,
                        "description": "Id of the token.",
                        "schema": {
                            "type": "string",
                            "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Token revocation confirmation"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "API token not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/auth/jwt": {
            "post": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "public-jwt-create",
                "summary": "Create a JSON Web Token.",
                "description": "Create a short lived JWT for authentication to specific GitGuardian services,\nincluding HasMySecretLeaked.\n",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "audience"
                                ],
                                "properties": {
                                    "audience": {
                                        "type": "string",
                                        "description": "Audience of the JWT.",
                                        "example": "https://api.hasmysecretleaked.com"
                                    },
                                    "audience_type": {
                                        "type": "string",
                                        "description": "Type of audience.",
                                        "example": "hmsl"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created JWT",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "description": "JWT",
                                            "example": "eyJhbGciOiJS[...]"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/v1/incidents/secrets": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-incidents",
                "summary": "List secret incidents",
                "description": "List secret incidents detected by the GitGuardian dashboard.\nOccurrences are not returned in this route.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "assignee_email",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents assigned to this email.",
                            "example": "eric@gitguardian.com"
                        }
                    },
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents assigned to this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/StatusEnum"
                                }
                            ],
                            "description": "Incidents with the following status."
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SeverityEnum"
                                }
                            ],
                            "description": "Filter incidents by severity."
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ValidityEnum"
                                }
                            ],
                            "description": "Secrets with the following validity."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents with one of the following tags. Use `NONE` if you want to filter incidents with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "custom_tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents with one of the following custom tag ids.\nTo retrieve incidents containing several custom tags at once, this query parameter should be used several times to intersect the results.\n",
                            "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b,55b349d7-8c3a-40c9-957c-e58f5c3a7391"
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date",
                                "resolved_at",
                                "-resolved_at",
                                "ignored_at",
                                "-ignored_at"
                            ]
                        }
                    },
                    {
                        "name": "detector_group_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents belonging to the specified detector group.",
                            "example": "slackbot_token"
                        }
                    },
                    {
                        "name": "ignorer_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents ignored by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "ignorer_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents ignored by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "resolver_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents resolved by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "resolver_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents resolved by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "feedback",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Incidents with or without feedback."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "retrieve-incidents",
                "summary": "Retrieve a secret incident",
                "description": "Retrieve secret incident detected by the GitGuardian dashboard with\nits occurrences.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "name": "with_occurrences",
                        "in": "query",
                        "description": "Retrieve a number of occurrences of this incident.",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 0,
                            "maximum": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident Details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incident"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "update-secret-incident",
                "summary": "Update a secret incident",
                "description": "Update a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/incidentWithoutOccurrences"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/leaks": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "retrieve-incidents-leaks",
                "summary": "Retrieve where a secret has been publicly leaked",
                "description": "Retrieve where a secret has been publicly leaked.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of the leaks of the incident",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "source": {
                                                "type": "string",
                                                "allOf": [
                                                    {
                                                        "$ref": "#/components/schemas/HMSLSourceTypeEnum"
                                                    }
                                                ],
                                                "example": "github"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "GitGuardian / ggshield"
                                            },
                                            "url": {
                                                "type": "string",
                                                "example": "https://github.com/GitGuardian/ggshield/blob/1f8cd3497aa9acabaafb1851039be2c63448c2f9/README.md?plain=1#L5"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/assign": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "assign-incident",
                "summary": "Assign a secret incident",
                "description": "Assign secret incident detected by the GitGuardian dashboard to a workspace member\nby email.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the assignee."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Assignee Request",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "eric@gitguardian.com",
                                        "description": "email of the member to assign. This parameter is mutually exclusive with `member_id`.\n"
                                    },
                                    "member_id": {
                                        "type": "number",
                                        "example": 4295,
                                        "description": "id of the member to assign. This parameter is mutually exclusive with `email`.\n"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/unassign": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "unassign-incident",
                "summary": "Unassign a secret incident",
                "description": "Unassign secret incident from a workspace member by email.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/resolve": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "resolve-incident",
                "summary": "Resolve a secret incident",
                "description": "Resolve a secret incident detected by the GitGuardian dashboard.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Resolve Request",
                                "required": [
                                    "secret_revoked"
                                ],
                                "properties": {
                                    "secret_revoked": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/ignore": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "ignore-incident",
                "summary": "Ignore a secret incident",
                "description": "Ignore a secret incident detected by the GitGuardian dashboard.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Ignore Request",
                                "required": [
                                    "ignore_reason"
                                ],
                                "properties": {
                                    "ignore_reason": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/SecretStatusEnum"
                                            }
                                        ],
                                        "example": "low_risk"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/reopen": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "reopen-incident",
                "summary": "Reopen a secret incident",
                "description": "Unresolve or unignore a secret incident detected by the GitGuardian dashboard.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/share": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "share-incident",
                "summary": "Share a secret incident",
                "description": "Share a secret incident by creating a public link.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Incident Share Request",
                                "properties": {
                                    "auto_healing": {
                                        "type": "boolean",
                                        "example": true,
                                        "default": false,
                                        "description": "Allow the developer to resolve or ignore through the share link"
                                    },
                                    "feedback_collection": {
                                        "type": "boolean",
                                        "example": true,
                                        "default": true,
                                        "description": "Allow the developer to submit their feedback through the share link"
                                    },
                                    "lifespan": {
                                        "type": "integer",
                                        "example": 720,
                                        "default": 0,
                                        "minimum": 0,
                                        "description": "Lifespan, in hours, of the share link. If 0 or unset, a default value will be applied based on the workspace settings."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Incident Sharing Details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentToken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/unshare": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "unshare-incident",
                "summary": "Unshare a secret incident",
                "description": "Unshare a secret incident by revoking its public link.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The public link was revoked successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/grant_access": {
            "post": {
                "deprecated": true,
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "grant-access-incident",
                "summary": "Grant access to a secret incident",
                "description": "Grant a user, an existing invitee or a team access to a secret incident.\n\nDEPRECATED: This endpoint has been replaced by [this one](#tag/Members/operation/set-member-resource-access) for members, [this one](#tag/Teams/operation/set-team-resource-access) for teams, and [this one](#tag/Invitations/operation/set-invitation-resource-access) for invitations.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Grant Access Request",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "Email address of a user or invitee. This parameter is mutually exclusive\nwith `member_id`, `invitation_id` and `team_id`.\n"
                                    },
                                    "member_id": {
                                        "type": "number",
                                        "description": "Id of a member. This parameter is mutually exclusive with `email`,\n`invitation_id` and `team_id`.\n"
                                    },
                                    "invitation_id": {
                                        "type": "number",
                                        "description": "Id of an invitation. This parameter is mutually exclusive with `email`,\n`member_id` and `team_id`.\n"
                                    },
                                    "team_id": {
                                        "type": "number",
                                        "description": "Id of a team, except for the global team. This parameter is mutually\nexclusive with `email`, `member_id` and `invitation_id`.\n"
                                    },
                                    "incident_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                                            }
                                        ]
                                    }
                                },
                                "example": {
                                    "member_id": 1492,
                                    "incident_permission": "can_edit"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The access was granted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/revoke_access": {
            "post": {
                "deprecated": true,
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "revoke-access-incident",
                "summary": "Revoke access to a secret incident",
                "description": "Revoke access of a user, an existing invitee or a team to a secret incident.\n\nDEPRECATED: This endpoint has been replaced by [this one](#tag/Members/operation/revoke-member-resource-access) for members, [this one](#tag/Teams/operation/revoke-team-resource-access) for teams, and [this one](#tag/Invitations/operation/revoke-invitation-resource-access) for invitations.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Grant Access Request",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "Email address of a user or invitee. This parameter is mutually exclusive\nwith `member_id`, `invitation_id` and `team_id`.\n"
                                    },
                                    "member_id": {
                                        "type": "number",
                                        "description": "Id of a member. This parameter is mutually exclusive with `email`,\n`invitation_id` and `team_id`.\n"
                                    },
                                    "invitation_id": {
                                        "type": "number",
                                        "description": "Id of an invitation. This parameter is mutually exclusive with `email`,\n`member_id` and `team_id`.\n"
                                    },
                                    "team_id": {
                                        "type": "number",
                                        "description": "Id of a team, except for the global team. This parameter is mutually\nexclusive with `email`, `member_id` and `invitation_id`.\n"
                                    }
                                },
                                "example": {
                                    "member_id": 1492
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The access was revoked successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/notes": {
            "get": {
                "tags": [
                    "Secret Incident Notes"
                ],
                "operationId": "list-incident-notes",
                "summary": "List notes on a secret incident",
                "description": "List notes left on a secret incident in chronological order.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "updated_at",
                                "-updated_at"
                            ]
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "description": "Filter by member id.",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search notes based on the comment field content.",
                            "example": "I revoked this"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Incident Note List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets/1/notes?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets/1/notes?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentNote"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Secret Incident Notes"
                ],
                "operationId": "create-incident-note",
                "summary": "Create a secret incident note",
                "description": "Add a note on a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Incident Note Request",
                                "required": [
                                    "comment"
                                ],
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "maxLength": 10000,
                                        "example": "I revoked this secret",
                                        "description": "Content of the incident note"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The note was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Secret Incident not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/notes/{note_id}": {
            "patch": {
                "tags": [
                    "Secret Incident Notes"
                ],
                "operationId": "update-incident-note",
                "summary": "Update a secret incident note",
                "description": "Update an existing comment on a secret incident. Only incident notes\ncreated by the current API key can be updated.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "name": "note_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the incident note to update",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Incident Note Request",
                                "required": [
                                    "comment"
                                ],
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "maxLength": 10000,
                                        "example": "I revoked this secret",
                                        "description": "Content of the incident note"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The note was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "You cannot update an Incident Note you that was not created by\nthe current API key.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Secret Incident or Incident Note not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Secret Incident Notes"
                ],
                "operationId": "delete-incident-note",
                "summary": "Delete a secret incident note",
                "description": "Delete an existing comment on a secret incident. Only incident notes\ncreated by the current API key can be deleted.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "name": "note_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the incident note to delete",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The note was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "You cannot delete an Incident Note you that was not created by\nthe current API key.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Secret Incident or Incident Note not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/members": {
            "get": {
                "deprecated": true,
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-incident-members",
                "summary": "List members having access to a secret incident",
                "description": "List all the members having access to a secret incident.\n\nDEPRECATED: This endpoint has been replaced by [/v1/secret-incidents/{incident_id}/members](#tag/Secret-Incidents/operation/list-secret-incident-member-access)\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "filter on a specific member id.",
                            "example": 1234
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "example": "can_view"
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/MemberAccessLevelEnum"
                                }
                            ],
                            "description": "Filter members based on their access level.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search members based on their name or email.",
                            "deprecated": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of members",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets/1/members?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets/1/members?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentMember"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/teams": {
            "get": {
                "deprecated": true,
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-incident-teams",
                "summary": "List teams having access to a secret incident",
                "description": "List all the teams having access to a secret incident.\n\nDEPRECATED: This endpoint has been replaced by [/v1/secret-incidents/{incident_id}/teams](#tag/Secret-Incidents/operation/list-secret-incident-team-access)\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "name": "team_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "filter on a specific team id.",
                            "example": 1234
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "example": "can_view"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of team accesses",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets/1/teams?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets/1/teams?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentTeam"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/invitations": {
            "get": {
                "deprecated": true,
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-incident-invitations",
                "summary": "List invitations having access to a Secret Incident",
                "description": "List all the invitations having access to a Secret Incident.\n\nDEPRECATED: This endpoint has been replaced by [/v1/secret-incidents/{incident_id}/invitations](#tag/Secret-Incidents/operation/list-secret-incident-invitation-access)\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "name": "invitation_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "filter on a specific invitation id.",
                            "example": 1234
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "description": "filter accesses with a specific permission.",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "example": "can_view"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invitation accesses",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets/1/invitations?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets/1/invitations?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentInvitation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/impacted_perimeter": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "retrieve-incident-impacted-perimeter",
                "summary": "Retrieve the impacted perimeter of a secret incident",
                "description": "Retrieve metrics about the impacted perimeter of a secret incident detected by the GitGuardian dashboard.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident Impacted Perimeter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/impactedPerimeter"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/secret-incidents/{incident_id}/members": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-secret-incident-member-access",
                "summary": "List members with access to a secret incident",
                "description": "List members that have access to a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/MemberAccessLevelEnum"
                                }
                            ],
                            "description": "Filter members based on their access level. Use `access_level` instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "access_level",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/MemberAccessLevelEnum"
                                }
                            ],
                            "description": "Filter members based on their access level."
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search members based on their name or email."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "last_login",
                                "-last_login"
                            ]
                        }
                    },
                    {
                        "name": "direct_access",
                        "in": "query",
                        "description": "Filter on direct or indirect accesses.\n",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List members",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/secret-incidents/4234/members?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/secret-incidents/4234/members?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/member"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/secret-incidents/{incident_id}/teams": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-secret-incident-team-access",
                "summary": "List teams with access to a secret incident",
                "description": "List teams that have access to a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search teams based on their name and/or description."
                        }
                    },
                    {
                        "name": "direct_access",
                        "in": "query",
                        "description": "Filter on direct or indirect accesses.\n",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List teams",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/secret-incidents/4234/teams?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/secret-incidents/4234/teams?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/team"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/secret-incidents/{incident_id}/invitations": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-secret-incident-invitation-access",
                "summary": "List invitations with access to a secret incident",
                "description": "List invitations that have access to a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search invitations based on the email field."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date"
                            ]
                        }
                    },
                    {
                        "name": "direct_access",
                        "in": "query",
                        "description": "Filter on direct or indirect accesses.\n",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List invitations",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/secret-incidents/4234/invitations?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/secret-incidents/4234/invitations?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/invitation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/occurrences/secrets": {
            "get": {
                "tags": [
                    "Secret Occurrences"
                ],
                "operationId": "list-occs",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "source_id",
                        "in": "query",
                        "description": "Filter on the source ID.",
                        "schema": {
                            "type": "integer",
                            "example": 5523
                        }
                    },
                    {
                        "name": "source_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries matching this source name search.",
                            "example": "gitguardian/test-repository"
                        }
                    },
                    {
                        "name": "source_type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by integration type.",
                            "example": "github",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SourceTypeQueryParamsEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "incident_id",
                        "in": "query",
                        "description": "Filter by incident ID.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "presence",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/PresenceEnum"
                                }
                            ],
                            "description": "Entries that have the following presence status."
                        }
                    },
                    {
                        "name": "author_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries matching this author name search.",
                            "minLength": 3,
                            "example": "John Doe"
                        }
                    },
                    {
                        "name": "author_info",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries matching this author email search.",
                            "minLength": 3,
                            "example": "john.doe@gitguardian.com"
                        }
                    },
                    {
                        "name": "sha",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries starting with the commit sha search string.",
                            "minLength": 3,
                            "example": "fccebf0562698ab99dc10dcb2e864fc563b25ac4"
                        }
                    },
                    {
                        "name": "filepath",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries matching this filepath search.",
                            "minLength": 3,
                            "example": "myfile.txt"
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Occurrences with one of the following tags. Use `NONE` if you want to filter occurrences with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date"
                            ]
                        }
                    }
                ],
                "summary": "List secret occurrences",
                "description": "List occurrences of secrets in the monitored perimeter.\n",
                "responses": {
                    "200": {
                        "description": "List occurrences",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/occurrences/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/occurrences/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/vcsOccurrence"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/invitations": {
            "get": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "list-invitations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search invitations based on the email field."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date"
                            ]
                        }
                    }
                ],
                "summary": "List invitations",
                "description": "This endpoint allows you to list all pending invitations.\n\nThe response contains the list of invitations and a pagination cursor to retrieve the next page.\n\nThe invitations are sorted by id.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `member`.\n",
                "responses": {
                    "200": {
                        "description": "List invitations",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/invitation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "create-invitations",
                "summary": "Create an invitation",
                "description": "This endpoint allows you to send an invitation to a user.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `member`.\n",
                "parameters": [
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Whether to send an email to the invitee with a link to accept the invitation."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Invitation Request",
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "eric@gitguardian.com",
                                        "description": "email of the user to invite.\n"
                                    },
                                    "role": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/NonOwnerMemberAccessLevelEnum"
                                            }
                                        ],
                                        "example": "manager",
                                        "default": "member",
                                        "description": "Use `access_level` instead.\n",
                                        "deprecated": true
                                    },
                                    "access_level": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/NonOwnerMemberAccessLevelEnum"
                                            }
                                        ],
                                        "example": "manager",
                                        "default": "member"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Invitation sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:write"
                        ]
                    }
                ]
            }
        },
        "/v1/invitations/{invitation_id}": {
            "delete": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "delete-invitation",
                "summary": "Delete an invitation",
                "description": "Delete an existing invitation.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/invitation_id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The invitation was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:write"
                        ]
                    }
                ]
            }
        },
        "/v1/invitations/{invitation_id}/resend": {
            "post": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "resend-invitation",
                "summary": "Resend an invitation",
                "description": "Resend an existing invitation.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/invitation_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invitation sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "detail": {
                                            "type": "string",
                                            "description": "Details on response.",
                                            "example": "Email sent"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:write"
                        ]
                    }
                ]
            }
        },
        "/v1/invitations/{invitation_id}/{resource_type}/{resource_id}": {
            "get": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "get-invitation-resource-access",
                "summary": "Check invitation permission for a resource",
                "description": "Return the permission an invitation has on a resource.\n\nIf the invitation has an admin access level, it will be the highest possible value.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/invitation_id"
                    },
                    {
                        "$ref": "#/components/parameters/resource_type"
                    },
                    {
                        "$ref": "#/components/parameters/resource_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invitation Resource access details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resource_invitation_access"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Resource or Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "set-invitation-resource-access",
                "summary": "Give an invitation access to a resource",
                "description": "This will create or update a direct access for the invitation on the resource.\n\nIf the invitation has an administrator access level, it will take precedence over the\npermission you have given.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/invitation_id"
                    },
                    {
                        "$ref": "#/components/parameters/resource_type"
                    },
                    {
                        "$ref": "#/components/parameters/resource_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/resource_invitation_access"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The access was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resource_invitation_access"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "The access was granted successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resource_invitation_access"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Resource or Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share",
                            "members:read"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "revoke-invitation-resource-access",
                "summary": "Revoke an invitation's access to a resource",
                "description": "Revoke an invitation access to a resource.\n\nThis only works for direct accesses. If the access is from the administrator access level of\nthe invitation, a 404 is returned.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/invitation_id"
                    },
                    {
                        "$ref": "#/components/parameters/resource_type"
                    },
                    {
                        "$ref": "#/components/parameters/resource_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/resource_invitation_access"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The access was revoked successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Resource or Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/invitations/{invitation_id}/secret-incidents": {
            "get": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "list-invitation-secret-incident-access",
                "summary": "List secret incidents an invitation has access to",
                "description": "List secret incidents that an invitation has access to.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/invitation_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "assignee_email",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents assigned to this email.",
                            "example": "eric@gitguardian.com"
                        }
                    },
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents assigned to this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/StatusEnum"
                                }
                            ],
                            "description": "Incidents with the following status."
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SeverityEnum"
                                }
                            ],
                            "description": "Filter incidents by severity."
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ValidityEnum"
                                }
                            ],
                            "description": "Secrets with the following validity."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents with one of the following tags. Use `NONE` if you want to filter incidents with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date",
                                "resolved_at",
                                "-resolved_at",
                                "ignored_at",
                                "-ignored_at"
                            ]
                        }
                    },
                    {
                        "name": "detector_group_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents belonging to the specified detector group.",
                            "example": "slackbot_token"
                        }
                    },
                    {
                        "name": "ignorer_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents ignored by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "ignorer_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents ignored by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "resolver_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents resolved by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "resolver_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents resolved by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "feedback",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Incidents with or without feedback."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/members": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "list-members",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "deprecated": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/MemberAccessLevelEnum"
                                }
                            ],
                            "description": "Filter members based on their access level. Use `access_level` instead."
                        }
                    },
                    {
                        "name": "access_level",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/MemberAccessLevelEnum"
                                }
                            ],
                            "description": "Filter members based on their access level."
                        }
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter members based on their active status."
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search members based on their name or email."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "last_login",
                                "-last_login"
                            ]
                        }
                    }
                ],
                "summary": "List members",
                "description": "List members of the workspace.\n",
                "responses": {
                    "200": {
                        "description": "List members",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/member"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "retrieve-member",
                "summary": "Retrieve a member",
                "description": "Retrieve an existing workspace member.\n\nIf you are using a personal access token, you need to have an access level greater or equal to `member`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workspace member details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/member"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:read"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Members"
                ],
                "operationId": "delete-member",
                "summary": "Delete a member",
                "description": "Delete an existing workspace member.\n\nIf you are using a personal access token, you need to have an access level greater or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the member about the removal."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The member was deleted successfully"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:write"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Members"
                ],
                "operationId": "update-member",
                "summary": "Update a member",
                "description": "Update an existing workspace member.\n\nIf you are using a personal access token, you need to have an access level greater or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the member about the update."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/member"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Workspace member details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/member"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:write"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}/teams": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "list-member-teams",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search teams based on their name and/or description."
                        }
                    },
                    {
                        "name": "is_global",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter on/exclude the \"All-incidents\" team."
                        }
                    },
                    {
                        "$ref": "#/components/parameters/member_id"
                    }
                ],
                "summary": "List teams of a member",
                "description": "List teams of a workspace member.\nThe response contains the list of teams and a pagination cursor to retrieve the next page.\n\nThe teams are sorted by id.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `manager` except if the requested member is yourself.\n",
                "responses": {
                    "200": {
                        "description": "List teams",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members/123/teams?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members/123/teams?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/team"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}/{resource_type}/{resource_id}": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "get-member-resource-access",
                "summary": "Check member permission for a resource",
                "description": "Return the permission a member has on a resource.\n\nThe permission is the higher value between the different accesses the member can\nhave (direct access, member's teams accesses, and administrator access).\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "$ref": "#/components/parameters/resource_type"
                    },
                    {
                        "$ref": "#/components/parameters/resource_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member resource access details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resource_member_access"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Resource or Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "Members"
                ],
                "operationId": "set-member-resource-access",
                "summary": "Give a member access to a resource",
                "description": "This will create or update a direct access for the member on the resource.\n\nIf the member has higher permission from another source, they will take precedence\nover those you have given.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "$ref": "#/components/parameters/resource_type"
                    },
                    {
                        "$ref": "#/components/parameters/resource_id"
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the member about the access."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/resource_member_access"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The access was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resource_member_access"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "The access was granted successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resource_member_access"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Resource or Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share",
                            "members:read"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Members"
                ],
                "operationId": "revoke-member-resource-access",
                "summary": "Revoke a member's access to a resource",
                "description": "Revoke a member access to a resource.\n\nThis only works for direct accesses. If the member has only indirect access, a 404\nis returned.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "$ref": "#/components/parameters/resource_type"
                    },
                    {
                        "$ref": "#/components/parameters/resource_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/resource_member_access"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The access was revoked successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Resource or Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}/secret-incidents": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "list-member-secret-incident-access",
                "summary": "List secret incidents a member has access to",
                "description": "List secret incidents that a member has access to.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "assignee_email",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents assigned to this email.",
                            "example": "eric@gitguardian.com"
                        }
                    },
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents assigned to this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/StatusEnum"
                                }
                            ],
                            "description": "Incidents with the following status."
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SeverityEnum"
                                }
                            ],
                            "description": "Filter incidents by severity."
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ValidityEnum"
                                }
                            ],
                            "description": "Secrets with the following validity."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents with one of the following tags. Use `NONE` if you want to filter incidents with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date",
                                "resolved_at",
                                "-resolved_at",
                                "ignored_at",
                                "-ignored_at"
                            ]
                        }
                    },
                    {
                        "name": "detector_group_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents belonging to the specified detector group.",
                            "example": "slackbot_token"
                        }
                    },
                    {
                        "name": "ignorer_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents ignored by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "ignorer_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents ignored by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "resolver_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents resolved by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "resolver_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents resolved by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "feedback",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Incidents with or without feedback."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}/email_notifications": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "retrieve-member-email-settings",
                "summary": "Retrieve a member's email settings",
                "description": "Retrieve a member's email settings\n\nIf you are using a personal access token, you need to have access level greater than `member` to view other member's settings\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member notification settings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/emailSettings"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:read"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Members"
                ],
                "operationId": "update-member-email-settings",
                "summary": "Update a member's email settings",
                "description": "Update a member's email settings\n\nIf you are using a personal access token, you need to have access level greater than `member` to edit other member's settings\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the member about the update."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/emailSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Member notification settings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/emailSettings"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:write"
                        ]
                    }
                ]
            }
        },
        "/v1/scan": {
            "post": {
                "tags": [
                    "Scan Methods"
                ],
                "operationId": "content_scan",
                "summary": "Content scan",
                "description": "Scan provided document content for policy breaks.\n\nRequest body shouldn't exceed 1MB.\n\nThis endpoint is stateless and as such will not store in our servers neither the documents nor the secrets found.\n",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/document"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Scan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/scanResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/OverQuotaError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell",
                        "label": "cURL",
                        "source": "curl --request POST \\\n  --url https://api.gitguardian.com/v1/scan \\\n  --header 'authorization: Token <Insert API Key>' \\\n  --header 'content-type: application/json' \\\n  --data '{\n\"document\": \"import urllib.request\\nurl = '\\''http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\\''\\nresponse = urllib.request.urlopen(url)\\nconsume(response.read())\",\n\"filename\": \".env\"\n} '\n"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nfrom pygitguardian import GGClient\ndoc_content = \"import urllib.request\\n\nurl = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\\n\nresponse = urllib.request.urlopen(url)\\n\nconsume(response.read())\"\nclient = GGClient(api_key=API_KEY)\nscan_result = client.content_scan(filename=\".env\", document=doc_content)\nprint(\"Scan results:\", scan_result.has_secrets, \":\", scan_result.policy_break_count)\n"
                    }
                ],
                "security": [
                    {
                        "api-key": [
                            "scan"
                        ]
                    }
                ]
            }
        },
        "/v1/multiscan": {
            "post": {
                "tags": [
                    "Scan Methods"
                ],
                "operationId": "multiple_scan",
                "summary": "Multiple content scan",
                "description": "Scan provided document contents for policy breaks.\nMultiple documents are returned by the same index order.\n\nThere should not be more than 20 documents in the payload. Individual documents should not exceed 1MB.\n\nQuota usage is based on requests and not on the content size. One request to this endpoint will consume 1 API call.\nAlso note that the quota is set on a rolling month and not on a calendar month.\nSee [this documentation](https://docs.gitguardian.com/api-docs/usage-and-quotas) for more details.\n\nThis endpoint is stateless and as such will not store in our servers neither the documents nor the secrets found.\n",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "List of documents to scan.",
                                "minItems": 1,
                                "items": {
                                    "$ref": "#/components/schemas/document"
                                },
                                "example": [
                                    {
                                        "filename": ".env",
                                        "document": "import urllib.request\nurl = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\nresponse = urllib.request.urlopen(url)\nconsume(response.read())\n"
                                    },
                                    {
                                        "filename": "tasks.py",
                                        "document": "__version__=\"1.0.0\""
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Scan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "List of scan results. Corresponding index to document array.",
                                    "minItems": 1,
                                    "items": {
                                        "$ref": "#/components/schemas/scanResult"
                                    },
                                    "example": [
                                        {
                                            "policy_break_count": 2,
                                            "policies": [
                                                "Filename",
                                                "File extensions",
                                                "Secrets detection"
                                            ],
                                            "policy_breaks": [
                                                {
                                                    "type": ".env",
                                                    "policy": "Filenames",
                                                    "matches": [
                                                        {
                                                            "type": "filename",
                                                            "match": ".env"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "Basic Auth String",
                                                    "policy": "Secrets detection",
                                                    "validity": "cannot_check",
                                                    "matches": [
                                                        {
                                                            "type": "username",
                                                            "match": "jen_barber",
                                                            "index_start": 52,
                                                            "index_end": 61,
                                                            "line_start": 2,
                                                            "line_end": 2
                                                        },
                                                        {
                                                            "type": "password",
                                                            "match": "correcthorsebatterystaple",
                                                            "index_start": 63,
                                                            "index_end": 87,
                                                            "line_start": 2,
                                                            "line_end": 2
                                                        },
                                                        {
                                                            "type": "host",
                                                            "match": "cake.gitguardian.com",
                                                            "index_start": 89,
                                                            "index_end": 108,
                                                            "line_start": 2,
                                                            "line_end": 2
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "policy_break_count": 0,
                                            "policies": [
                                                "Filename",
                                                "File extensions",
                                                "Secrets detection"
                                            ],
                                            "policy_breaks": []
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/OverQuotaError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell",
                        "label": "cURL",
                        "source": "curl --request POST \\\n  --url https://api.gitguardian.com/v1/multiscan \\\n  --header 'authorization: Token <Insert API Key>' \\\n  --header 'content-type: application/json' \\\n  --data '[\n{\n\"document\":  \"import urllib.request\\nurl = '\\''http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\\''\\nresponse = urllib.request.urlopen(url)\\nconsume(response.read())\",\n\"filename\": \".env\"\n},\n{\n  \"document\":  \"__version__=\\\"1.0.0\\\"\",\n  \"filename\": \"__init__.py\"\n}\n]'\n"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nfrom pygitguardian import GGClient\ndoc_content = \"import urllib.request\\n\nurl = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\\n\nresponse = urllib.request.urlopen(url)\\n\nconsume(response.read())\"\nclient = GGClient(api_key=API_KEY)\nto_scan = [{\"filename\": \".env\", \"document\": doc_content},\n  {\"filename\": \"__init__.py\", \"document\": \"__version__=\"1.0.0\"}]\nscan_results = client.multi_content_scan(to_scan)\nprint(scan_results)\n"
                    }
                ],
                "security": [
                    {
                        "api-key": [
                            "scan"
                        ]
                    }
                ]
            }
        },
        "/v1/secret_detectors": {
            "get": {
                "tags": [
                    "Secret Detectors"
                ],
                "operationId": "list-secret-detectors",
                "summary": "List secret detectors",
                "description": "List secret detectors.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "is_active",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter only active or inactive detectors.",
                            "example": true
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/DetectorGroupTypeEnum"
                                }
                            ],
                            "description": "Filter detectors on their type.",
                            "example": "generic"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "example": "aws"
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "name",
                                "-name"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Secret Detectors",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist"
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/detectorGroup"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/secret_detectors/{detector_name}": {
            "get": {
                "tags": [
                    "Secret Detectors"
                ],
                "operationId": "get-secret-detector",
                "summary": "Get a secret detector",
                "description": "Get a secret detector.",
                "parameters": [
                    {
                        "name": "detector_name",
                        "in": "path",
                        "required": true,
                        "description": "Name of the detector to retrieve",
                        "schema": {
                            "type": "string",
                            "example": "aws_iam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Detector",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/detectorGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Secret Detector not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/quotas": {
            "get": {
                "tags": [
                    "Quota"
                ],
                "operationId": "quotas",
                "summary": "Quota overview",
                "description": "Check available scanning calls for this token. Quota is shared between all tokens of a workspace\n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Quota Overview",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/quota"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                }
            }
        },
        "/v1/sources": {
            "get": {
                "tags": [
                    "Sources"
                ],
                "operationId": "list-sources",
                "summary": "List sources",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Sources matching this search.",
                            "example": "test-repository"
                        }
                    },
                    {
                        "name": "last_scan_status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ScanStatusEnum"
                                }
                            ],
                            "description": "Filter sources based on the status of their latest historical scan."
                        }
                    },
                    {
                        "name": "health",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SourceHealthEnum"
                                }
                            ],
                            "description": "Filter sources based on their health status."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by integration type.",
                            "example": "github",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SourceTypeQueryParamsEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last_scan_date",
                                "-last_scan_date"
                            ]
                        }
                    },
                    {
                        "name": "visibility",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by visibility status.",
                            "example": "public",
                            "enum": [
                                "public",
                                "private",
                                "internal"
                            ]
                        }
                    },
                    {
                        "name": "external_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by specific external id.",
                            "example": "1"
                        }
                    },
                    {
                        "name": "source_criticality",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "critical",
                                "high",
                                "medium",
                                "low",
                                "unknown"
                            ],
                            "description": "Filter by source criticality.",
                            "example": "critical"
                        }
                    },
                    {
                        "name": "monitored",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter by monitored value.",
                            "example": "true"
                        }
                    }
                ],
                "description": "List sources known by GitGuardian.\n",
                "responses": {
                    "200": {
                        "description": "Source List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/sources?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/sources?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/source"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "sources:read"
                        ]
                    }
                ]
            }
        },
        "/v1/sources/{source_id}": {
            "get": {
                "tags": [
                    "Sources"
                ],
                "operationId": "retrieve-source",
                "summary": "Retrieve a source",
                "description": "Retrieve a source known by GitGuardian.\n",
                "parameters": [
                    {
                        "name": "source_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the source to retrieve.",
                        "schema": {
                            "type": "integer",
                            "example": 5523
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Source detail",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/source"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "sources:read"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Sources"
                ],
                "operationId": "update-source",
                "summary": "Update a source",
                "description": "Update some source attributes such as monitored status and source criticality.\n\nOnly VCS sources can update the monitored status.\n\nBusiness sources can't be updated if your account doesn't have access to them.\n",
                "parameters": [
                    {
                        "name": "source_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the source to retrieve.",
                        "schema": {
                            "type": "integer",
                            "example": 5523
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/source"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The source was updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/source"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "sources:write"
                        ]
                    }
                ]
            }
        },
        "/v1/sources/{source_id}/incidents/secrets": {
            "get": {
                "tags": [
                    "Secret Incidents",
                    "Sources"
                ],
                "operationId": "list-sources-incidents",
                "summary": "List secret incidents of a source",
                "description": "List secret incidents linked to a source.\nOccurrences are not returned in this route.\n",
                "parameters": [
                    {
                        "name": "source_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the source to filter on.",
                        "schema": {
                            "type": "integer",
                            "example": 5523
                        }
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "assignee_email",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents assigned to this email.",
                            "example": "eric@gitguardian.com"
                        }
                    },
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents assigned to this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/StatusEnum"
                                }
                            ],
                            "description": "Incidents with the following status."
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SeverityEnum"
                                }
                            ],
                            "description": "Filter incidents by severity."
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ValidityEnum"
                                }
                            ],
                            "description": "Secrets with the following validity."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents with one of the following tags. Use `NONE` if you want to filter incidents with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date",
                                "resolved_at",
                                "-resolved_at",
                                "ignored_at",
                                "-ignored_at"
                            ]
                        }
                    },
                    {
                        "name": "detector_group_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents belonging to the specified detector group.",
                            "example": "slackbot_token"
                        }
                    },
                    {
                        "name": "ignorer_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents ignored by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "ignorer_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents ignored by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "resolver_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents resolved by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "resolver_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents resolved by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "feedback",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Incidents with or without feedback."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/sources/123/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/sources/123/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "sources:read"
                        ]
                    }
                ]
            }
        },
        "/v1/audit_logs": {
            "get": {
                "tags": [
                    "Audit Logs"
                ],
                "operationId": "list-audit-logs",
                "summary": "List audit Logs",
                "description": "List audit logs.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "event_name",
                        "in": "query",
                        "description": "Entries matching this event name.",
                        "schema": {
                            "type": "string",
                            "example": "user.logged_in"
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "description": "The id of the member to retrieve.",
                        "schema": {
                            "type": "integer",
                            "example": 3252
                        }
                    },
                    {
                        "name": "member_name",
                        "in": "query",
                        "description": "Entries matching this member name.",
                        "schema": {
                            "type": "string",
                            "example": "John Smith"
                        }
                    },
                    {
                        "name": "member_email",
                        "in": "query",
                        "description": "Entries matching this member email.",
                        "schema": {
                            "type": "string",
                            "example": "john.smith@example.org"
                        }
                    },
                    {
                        "name": "api_token_id",
                        "in": "query",
                        "description": "Entries matching this API token id.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "ip_address",
                        "in": "query",
                        "description": "Entries matching this IP address.",
                        "schema": {
                            "type": "string",
                            "example": "8.8.8.8"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit logs List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist"
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/auditLog"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "audit_logs:read"
                        ]
                    }
                ]
            }
        },
        "/v1/health": {
            "get": {
                "tags": [
                    "Status"
                ],
                "operationId": "health_check",
                "summary": "Health check",
                "description": "Check the status of the API and your token without spending your quota.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "API on and key valid response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Health Status",
                                    "description": "Health check response.",
                                    "required": [
                                        "detail"
                                    ],
                                    "properties": {
                                        "detail": {
                                            "type": "string",
                                            "description": "API key status."
                                        }
                                    }
                                },
                                "examples": {
                                    "healthy": {
                                        "summary": "Valid API Key.",
                                        "value": {
                                            "detail": "Valid API key."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell",
                        "label": "cURL",
                        "source": "curl --request GET \\\n    --url https://api.gitguardian.com/v1/health \\\n    --header 'authorization: Token <Insert API Key>'\n"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nfrom pygitguardian import GGClient\n# store your API key in an environment variable\nclient = GGClient(api_key=os.getenv(\"GG_API_KEY\"))\nhealth_obj = client.health_check()\nif bool(health_obj):\n    print(\"Healthy API server\")\n"
                    }
                ]
            }
        },
        "/v1/teams": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "operationId": "list-teams",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "is_global",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter on/exclude the \"All-incidents\" team."
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search teams based on their name and/or description."
                        }
                    }
                ],
                "summary": "List teams",
                "description": "This endpoint allows you to list all the teams of your workspace.\n\nThe response contains the list of teams and a pagination cursor to retrieve the next page.\n\nThe teams are sorted by id.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `member`.\n",
                "responses": {
                    "200": {
                        "description": "List teams",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/team"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Teams"
                ],
                "operationId": "create-teams",
                "summary": "Create a team",
                "description": "This endpoint allows you to create a team.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `manager`.\n\nIf a personal access token is being used, the member is automatically added to the created team with permissions `can_manage` and `full_access`\n",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/team"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "name"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Team created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/team"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "operationId": "retrieve-team",
                "summary": "Retrieve a team",
                "description": "Retrieve an existing team.\n\nIf you are using a personal access token, you need to have an access level greater or equal to `member`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/team"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "operationId": "delete-team",
                "summary": "Delete a team",
                "description": "Delete an existing team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n\nThe \"All-incidents\" team (is_global=true) cannot be deleted.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The team was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Teams"
                ],
                "operationId": "update-team",
                "summary": "Update a team",
                "description": "Update a team's name and/or its description.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n\nThe \"All-incidents\" team (is_global=true) cannot be updated.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/team"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The team was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/team"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/incidents/secrets": {
            "get": {
                "deprecated": true,
                "tags": [
                    "Secret Incidents",
                    "Teams"
                ],
                "operationId": "list-team-incidents",
                "summary": "List secret incidents of a team",
                "description": "List secret incidents of a particular team.\nOccurrences are not returned in this route.\n\nDEPRECATED: THis endpoint has been replaced by [/v1/teams/{team_id}/secret-incidents](#tag/Teams/operation/list-team-secret-incident-access)\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "assignee_email",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents assigned to this email.",
                            "example": "eric@gitguardian.com"
                        }
                    },
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents assigned to this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/StatusEnum"
                                }
                            ],
                            "description": "Incidents with the following status."
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SeverityEnum"
                                }
                            ],
                            "description": "Filter incidents by severity."
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ValidityEnum"
                                }
                            ],
                            "description": "Secrets with the following validity."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents with one of the following tags. Use `NONE` if you want to filter incidents with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date",
                                "resolved_at",
                                "-resolved_at",
                                "ignored_at",
                                "-ignored_at"
                            ]
                        }
                    },
                    {
                        "name": "detector_group_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents belonging to the specified detector group.",
                            "example": "slackbot_token"
                        }
                    },
                    {
                        "name": "ignorer_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents ignored by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "ignorer_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents ignored by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "resolver_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents resolved by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "resolver_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents resolved by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/123/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/123/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/{resource_type}/{resource_id}": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "operationId": "get-team-resource-access",
                "summary": "Check team permission for a resource",
                "description": "Return the permission a team has on a resource.\n\nFor the global team, it will always be the highest possible permission.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "$ref": "#/components/parameters/resource_type"
                    },
                    {
                        "$ref": "#/components/parameters/resource_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team Secret resource access details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resource_team_access"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Resource or Team not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "teams:read"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "Teams"
                ],
                "operationId": "set-team-resource-access",
                "summary": "Give a team access to a resource",
                "description": "This will create or update a direct access for the team on the resource. If the\naccess to the resource is already given by the team's perimeter, an error is raised.\n\nThis endpoint is not allowed for the global team.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "$ref": "#/components/parameters/resource_type"
                    },
                    {
                        "$ref": "#/components/parameters/resource_id"
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the team members about the access."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/resource_team_access"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The access was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resource_team_access"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "The access was granted successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resource_team_access"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Resource or Team not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share",
                            "teams:read"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "operationId": "revoke-team-resource-access",
                "summary": "Revoke a team's access to a resource",
                "description": "Revoke the access a team has to a resource.\n\nThis only works for direct accesses. If the access to the resource is given by the\nteam's perimeter, an error is raised.\n\nThis endpoint is not allowed for the global team.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "$ref": "#/components/parameters/resource_type"
                    },
                    {
                        "$ref": "#/components/parameters/resource_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/resource_team_access"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The access was revoked successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Resource or Team not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:share",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/secret-incidents": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "operationId": "list-team-secret-incident-access",
                "summary": "List secret incidents a team has access to",
                "description": "List secret incidents that a team has access to.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "assignee_email",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents assigned to this email.",
                            "example": "eric@gitguardian.com"
                        }
                    },
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents assigned to this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/StatusEnum"
                                }
                            ],
                            "description": "Incidents with the following status."
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SeverityEnum"
                                }
                            ],
                            "description": "Filter incidents by severity."
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ValidityEnum"
                                }
                            ],
                            "description": "Secrets with the following validity."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents with one of the following tags. Use `NONE` if you want to filter incidents with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date",
                                "resolved_at",
                                "-resolved_at",
                                "ignored_at",
                                "-ignored_at"
                            ]
                        }
                    },
                    {
                        "name": "detector_group_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents belonging to the specified detector group.",
                            "example": "slackbot_token"
                        }
                    },
                    {
                        "name": "ignorer_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents ignored by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "ignorer_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents ignored by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "resolver_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents resolved by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "resolver_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents resolved by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "feedback",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Incidents with or without feedback."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Team not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "incidents:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_invitations": {
            "get": {
                "tags": [
                    "Team Invitations"
                ],
                "operationId": "list-team-invitation",
                "summary": "List team invitations",
                "description": "List all existing team invitations.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "invitation_id",
                        "in": "query",
                        "description": "The id of an invitation to filter on",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is_team_leader",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter team invitations that will become team leaders",
                            "example": true
                        }
                    },
                    {
                        "name": "team_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "deprecated": true,
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TeamPermissionEnum"
                                }
                            ],
                            "description": "Filter team invitations with a specific team permission\n\nteam_permission is replaced by is_team_leader\n",
                            "example": "can_manage"
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "description": "Filter team invitations with a specific incident permission",
                            "example": "can_edit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team invitation list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/124/team_invitations?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/124/team_invitations?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamInvitation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Team Invitations"
                ],
                "operationId": "create-team-invitations",
                "summary": "Create a team invitation",
                "description": "This endpoint allows you to create a team invitation from an existing team and invitation.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/teamInvitation"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "invitation_id"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Team invitation created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamInvitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_invitations/{team_invitation_id}": {
            "patch": {
                "tags": [
                    "Team Invitations"
                ],
                "operationId": "update-team-invitation",
                "summary": "Update a team invitation",
                "description": "Update permissions of a team invitation.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_invitation_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team invitation",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "TeamInvitation",
                                "properties": {
                                    "is_team_leader": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "team_permission": {
                                        "type": "string",
                                        "deprecated": true,
                                        "description": "team_permission is replaced by is_team_leader",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/TeamPermissionEnum"
                                            }
                                        ],
                                        "example": "cannot_manage"
                                    },
                                    "incident_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                                            }
                                        ],
                                        "example": "can_view"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Team invitation was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamInvitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Team Invitations"
                ],
                "operationId": "delete-team-invitation",
                "summary": "Delete a team invitation",
                "description": "Delete an existing team invitation.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_invitation_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team invitation",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Team invitation was deleted successfully."
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_memberships": {
            "get": {
                "tags": [
                    "Team Memberships"
                ],
                "operationId": "list-team-memberships",
                "summary": "List team memberships",
                "description": "List all the memberships of a team.\n\nIf you are using a personal access token, you need to be a workspace manager or be part of the team.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "is_team_leader",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter team memberships that are team leaders",
                            "example": true
                        }
                    },
                    {
                        "name": "team_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "deprecated": true,
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TeamPermissionEnum"
                                }
                            ],
                            "description": "Filter team memberships with a specific team permission\n\nteam_permission is replaced by is_team_leader\n",
                            "example": "can_manage"
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "description": "Filter team memberships with a specific incident permission",
                            "example": "can_edit"
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Filter team memberships on a specific member",
                            "example": 1234
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team membership list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/124/team_memberships?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/124/team_memberships?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamMembership"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Team Memberships"
                ],
                "operationId": "create-team-membership",
                "summary": "Add a member to a team",
                "description": "Add a member to a team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the member about the team membership."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/teamMembership"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Team membership created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamMembership"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_memberships/{team_membership_id}": {
            "patch": {
                "tags": [
                    "Team Memberships"
                ],
                "operationId": "update-team-membership",
                "summary": "Update a team membership",
                "description": "Update permissions of a team membership.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_membership_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team membership",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "TeamMembership",
                                "properties": {
                                    "is_team_leader": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "team_permission": {
                                        "type": "string",
                                        "deprecated": true,
                                        "description": "team_permission is replaced by is_team_leader",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/TeamPermissionEnum"
                                            }
                                        ],
                                        "example": "cannot_manage"
                                    },
                                    "incident_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                                            }
                                        ],
                                        "example": "can_view"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Team membership was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamMembership"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Team Memberships"
                ],
                "operationId": "delete-team-membership",
                "summary": "Remove a member from a team",
                "description": "Remove a member from a team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager,\nor be the member being removed.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_membership_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team membership",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the member about the removal from the team."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Team membership was deleted successfully."
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}/team_memberships": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "list-member-team-memberships",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "name": "team_id",
                        "in": "query",
                        "description": "The id of a team to filter on",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "List team memberships of a member",
                "description": "List team memberships of a workspace member.\nThe response contains the list of team memberships and a pagination cursor to retrieve the next page.\n\nThe team memberships are sorted by id.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `manager` except if the requested member is yourself.\n",
                "responses": {
                    "200": {
                        "description": "Team membership list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members/124/team_memberships?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members/124/team_memberships?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamMembership"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_requests": {
            "get": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "list-team-requests",
                "summary": "List team requests of a team",
                "description": "List pending requests of a team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Filter requests coming from a specific member",
                            "example": 1234
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team request list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/124/team_requests?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/124/team_requests?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamRequest"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "create-team-request",
                "summary": "Request access to a team",
                "description": "Create an access request to a team.\n\nYou must be authenticated via a Personal Access Token. You must not already have a pending\nrequest on the team, be a member of the team, be a workspace manager or have the\nrestricted access level.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Team request created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamRequest"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_requests/{team_request_id}": {
            "delete": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "delete-team-request",
                "summary": "Cancel or decline a team request",
                "description": "Cancel or decline a team request.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager, or\nbe the member who created the request being cancelled.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_request_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team request",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the member about the request having been denied."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Team request deleted"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_requests/{team_request_id}/accept": {
            "post": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "accept-team-request",
                "summary": "Accept a team request",
                "description": "Accept a team request by adding the member to the team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_request_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team request",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "send_email",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to notify the member about the request having been accepted."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "TeamMembership",
                                "properties": {
                                    "is_team_leader": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "team_permission": {
                                        "type": "string",
                                        "deprecated": true,
                                        "description": "team_permission is replaced by is_team_leader",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/TeamPermissionEnum"
                                            }
                                        ],
                                        "example": "cannot_manage"
                                    },
                                    "incident_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                                            }
                                        ],
                                        "example": "can_view"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Team request accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamMembership"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}/team_requests": {
            "get": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "list-member-team-requests",
                "summary": "List team requests of a member",
                "description": "List pending team requests of a member.\n\nIf you are using a personal access token, you need to be either a workspace manager or the member being queried.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "name": "team_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Filter requests to a specific team",
                            "example": 1234
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team request list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members/124/team_requests?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members/124/team_requests?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamRequest"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "members:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/sources": {
            "get": {
                "tags": [
                    "Team Sources"
                ],
                "operationId": "list-team-sources",
                "summary": "List team sources",
                "description": "List sources belonging to a team's perimeter.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Sources matching this search.",
                            "example": "test-repository"
                        }
                    },
                    {
                        "name": "last_scan_status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ScanStatusEnum"
                                }
                            ],
                            "description": "Filter sources based on the status of their latest historical scan."
                        }
                    },
                    {
                        "name": "health",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SourceHealthEnum"
                                }
                            ],
                            "description": "Filter sources based on their health status."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "description": "Filter by integration type.",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/VCSSourceTypeEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last_scan_date",
                                "-last_scan_date"
                            ]
                        }
                    },
                    {
                        "name": "visibility",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by visibility status.",
                            "example": "public",
                            "enum": [
                                "public",
                                "private",
                                "internal"
                            ]
                        }
                    },
                    {
                        "name": "external_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by specific external id.",
                            "example": "1"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Source list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/124/sources?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/124/sources?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/source"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:read",
                            "sources:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Team Sources"
                ],
                "operationId": "update-team-sources",
                "summary": "Update a team perimeter",
                "description": "This endpoint allows you to add and remove sources from the perimeter of a team.\n\nIf you are using a personal access token, you need to be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sources_to_add": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "description": "Ids of sources to add to the perimeter."
                                    },
                                    "sources_to_remove": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "description": "Ids of sources to remove from the perimeter."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Team perimeter updated"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "teams:write",
                            "sources:read"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens": {
            "get": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "list-honeytoken",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Status of a honeytoken.",
                            "enum": [
                                "triggered",
                                "active",
                                "revoked"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Type of a honeytoken.",
                            "enum": [
                                "AWS"
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search honeytokens based on their name and/or description."
                        }
                    },
                    {
                        "name": "creator_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Member id of the honeytoken creator."
                        }
                    },
                    {
                        "name": "revoker_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Member id of the honeytoken revoker."
                        }
                    },
                    {
                        "name": "creator_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Token id of the honeytoken creator."
                        }
                    },
                    {
                        "name": "revoker_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Token id of the honeytoken creator."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Comma-separated list of tags to filter on."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "triggered_at",
                                "-triggered_at",
                                "revoked_at",
                                "-revoked_at",
                                "name",
                                "-name"
                            ]
                        }
                    },
                    {
                        "name": "show_token",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Show token details (`access_token_id` and `secret_key`)."
                        }
                    }
                ],
                "summary": "List honeytokens",
                "description": "This endpoint allows you to list all the honeytokens of your workspace.\n\nThe response contains the list of honeytokens and a pagination cursor to retrieve the next page.\n\nThe honeytokens are sorted by id.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `manager`.\n",
                "responses": {
                    "200": {
                        "description": "List honeytokens",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeytoken"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "create-honeytoken",
                "summary": "Create a honeytoken",
                "description": "This endpoint allows you to create a honeytoken of a type.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `manager`.\n",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken",
                                "required": [
                                    "name",
                                    "type"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "honeytoken name",
                                        "description": "honeytoken name.\n"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This honeytoken was placed in the repository test",
                                        "description": "honeytoken description.\n"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "AWS",
                                        "enum": [
                                            "AWS"
                                        ],
                                        "description": "honeytoken type\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "Custom tags to set on the honeytoken. If the custom tag doesn't exist, it will be created. This field is deprecated; use the `custom_tags` field instead.",
                                        "items": {
                                            "$ref": "#/components/schemas/honeyTokenLabel"
                                        },
                                        "deprecated": true
                                    },
                                    "custom_tags": {
                                        "type": "array",
                                        "description": "Custom tags to set on the honeytoken. If the custom tag doesn't exist, it will be created.",
                                        "items": {
                                            "$ref": "#/components/schemas/customTag"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Honeytoken created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/with-context": {
            "post": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "create-honeytoken-with-context",
                "summary": "Create a honeytoken within a context",
                "description": "This endpoint allows you to create a honeytoken of a given type within\na context. The context is a realistic file in which your honeytoken is inserted.\n\nIf `language`, `project_extensions` and `filename` are not provided, a random context will be generated.\n",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken",
                                "required": [
                                    "name",
                                    "type"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "honeytoken name",
                                        "description": "Honeytoken name.\n"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This honeytoken was placed in the repository test",
                                        "description": "Honeytoken description.\n"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "AWS",
                                        "enum": [
                                            "AWS"
                                        ],
                                        "description": "Honeytoken type.\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "Labels to set on the honeytoken. If the label doesn't exist, it will be created.",
                                        "items": {
                                            "$ref": "#/components/schemas/honeyTokenLabel"
                                        }
                                    },
                                    "language": {
                                        "type": "string",
                                        "description": "Language to use for the context. If not set but `project_extensions` is set, the languages will be inferred from the extensions.",
                                        "example": "python"
                                    },
                                    "filename": {
                                        "type": "string",
                                        "description": "Filename to use for the context.",
                                        "example": "test_config.py"
                                    },
                                    "project_extensions": {
                                        "type": "array",
                                        "description": "An array of file extensions that can be used for the context.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            ".c",
                                            ".h"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Honeytoken within a context created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeyTokenWithContext"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}": {
            "get": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "retrieve-honeytoken",
                "summary": "Retrieve a honeytoken",
                "description": "Retrieve an existing honeytoken.\n\nIf you are using a personal access token, you need to have an access level greater or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "name": "show_token",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Show token details (`access_token_id` and `secret_key`)."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Honeytoken not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:read"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "update-honeytoken",
                "summary": "Update a honeytoken",
                "description": "Update a name or descriptions of an existing honeytoken.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "name and description",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "test-honeytoken",
                                        "description": "A new honeytoken name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "honeytoken in repository test",
                                        "description": "A new honeytoken description"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "A new set of custom tags for the honeytoken. Will completely override the former custom tags. This field is deprecated; use the `custom_tags` field instead.",
                                        "items": {
                                            "$ref": "#/components/schemas/honeyTokenLabel"
                                        },
                                        "deprecated": true
                                    },
                                    "custom_tags": {
                                        "type": "array",
                                        "description": "A new set of custom tags for the honeytoken. Will completely override the former custom tags.",
                                        "items": {
                                            "$ref": "#/components/schemas/customTag"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The honeytoken was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/reset": {
            "post": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "reset-honeytoken",
                "summary": "Reset the honeytoken",
                "description": "Resets a triggered honeytoken. All the associated events will be closed.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken was successfully revoked.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/revoke": {
            "post": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "revoke-honeytoken",
                "summary": "Revoke the honeytoken",
                "description": "Revokes an active or triggered honeytoken. All the associated events will be closed.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken was successfully revoked.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/notes": {
            "get": {
                "tags": [
                    "Honeytoken Notes"
                ],
                "operationId": "list-honeytoken-notes",
                "summary": "List notes on an honeytoken",
                "description": "List notes left on a honeytoken in chronological order.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "updated_at",
                                "-updated_at"
                            ]
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "description": "Filter by member id.",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "api_token_id",
                        "in": "query",
                        "description": "Entries matching this API token id.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search notes based on the comment field content.",
                            "example": "I revoked this"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken Note List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens/1/notes?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens/1/notes?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeyTokenNote"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Honeytoken not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Honeytoken Notes"
                ],
                "operationId": "create-honeytoken-note",
                "summary": "Create an honeytoken note",
                "description": "Add a note on a honeytoken.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken Note Request",
                                "required": [
                                    "comment"
                                ],
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "maxLength": 10000,
                                        "example": "I revoked this honeytoken",
                                        "description": "Content of the honeytoken note"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The note was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeyTokenNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Honeytoken not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/notes/{note_id}": {
            "patch": {
                "tags": [
                    "Honeytoken Notes"
                ],
                "operationId": "update-honeytoken-note",
                "summary": "Update a honeytoken note",
                "description": "Update an existing comment on a honeytoken. Only honeytoken notes\ncreated by the current API key can be updated.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "name": "note_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the honeytoken note to update",
                        "schema": {
                            "type": "string",
                            "readOnly": true,
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken Note Request",
                                "required": [
                                    "comment"
                                ],
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "maxLength": 10000,
                                        "example": "I revoked this",
                                        "description": "Content of the honeytoken note"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The note was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeyTokenNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "You cannot update an Honeytoken Note you that was not created by\nthe current API key.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Honeytoken or Honeytoken Note not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Honeytoken Notes"
                ],
                "operationId": "delete-honeytoken-note",
                "summary": "Delete a honeytoken note",
                "description": "Delete an existing comment on a honeytoken. Only honeytoken notes\ncreated by the current API key can be deleted.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "name": "note_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the honeytoken note to update",
                        "schema": {
                            "type": "string",
                            "readOnly": true,
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The note was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "You cannot delete an Honeytoken Note you that was not created by\nthe current API key.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Honeytoken or Honeytoken Note not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/sources": {
            "get": {
                "tags": [
                    "Honeytoken Sources"
                ],
                "operationId": "list-honeytoken-sources",
                "summary": "List sources on an honeytoken",
                "description": "List sources where a honeytoken appears.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "source_id",
                                "-source_id"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken Sources List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens/1/sources?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens/1/sources?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeyTokenSource"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Honeytoken not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:read",
                            "sources:read"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens_events": {
            "get": {
                "tags": [
                    "Honeytokens Events"
                ],
                "operationId": "list-honeytokens-events",
                "summary": "List all honeytokens events",
                "description": "List events related to all honeytokens of the workspace.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "triggered_at",
                                "-triggered_at"
                            ]
                        }
                    },
                    {
                        "name": "honeytoken_id",
                        "in": "query",
                        "description": "Filter by honeytoken id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "archived",
                                "allowed"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "ip_address",
                        "in": "query",
                        "description": "Filter by ip address",
                        "schema": {
                            "type": "string",
                            "example": "8.8.8.8"
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Comma-separated list of tags to filter on"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search events based on the `data` field content",
                        "schema": {
                            "type": "string",
                            "example": "I revoked this"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytokens Events List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens_events?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens_events?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeyTokenEvent"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:read"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/labels": {
            "get": {
                "deprecated": true,
                "tags": [
                    "Labels"
                ],
                "operationId": "list-honeytoken-labels",
                "summary": "List labels",
                "description": "List labels created for honeytokens in chronological order.\n\nDEPRECATED: This endpoint has been replaced by [this one](#tag/Custom-Tags/operation/list-custom-tags) as per introduction of the custom tags feature.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search string to filter only labels which contains the search string in either its key or value. The search string can also be in the key:value format.",
                            "example": "env:production"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter only labels which have the given key.",
                            "example": "env"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken Labels List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens/1/notes?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens/1/notes?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeyTokenLabel"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:read"
                        ]
                    }
                ]
            },
            "post": {
                "deprecated": true,
                "tags": [
                    "Labels"
                ],
                "operationId": "create-honeytoken-label",
                "summary": "Create a label",
                "description": "Create a label for honeytokens.\n\nDEPRECATED: This endpoint has been replaced by [this one](#tag/Custom-Tags/operation/create-custom-tag) as per introduction of the custom tags feature.\n",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken Label Request",
                                "required": [
                                    "key",
                                    "value"
                                ],
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "example": "env",
                                        "description": "Label's key's content."
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "production",
                                        "description": "Label's value's content."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The label was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeyTokenLabel"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            },
            "patch": {
                "deprecated": true,
                "tags": [
                    "Labels"
                ],
                "operationId": "patch-honeytoken-label-key",
                "summary": "Update a key",
                "description": "Rename a label key. It will be renamed in all the labels using this key.\n\nDEPRECATED: This endpoint has been replaced by [this one](#tag/Custom-Tags/operation/update-custom-tags-key) as per introduction of the custom tags feature.\n",
                "parameters": [
                    {
                        "name": "old_key",
                        "in": "query",
                        "required": true,
                        "description": "an existing key that we want to rename",
                        "schema": {
                            "type": "string",
                            "example": "env"
                        }
                    },
                    {
                        "name": "new_key",
                        "in": "query",
                        "required": true,
                        "description": "a new name of the key",
                        "schema": {
                            "type": "string",
                            "example": "env prod"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The key was changed successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            },
            "delete": {
                "deprecated": true,
                "tags": [
                    "Labels"
                ],
                "operationId": "delete-honeytoken-label-key",
                "summary": "Delete a key",
                "description": "Delete a key. All the labels using this key will be deleted.\n\nDEPRECATED: This endpoint has been replaced by [this one](#tag/Custom-Tags/operation/delete-custom-tags-key) as per introduction of the custom tags feature.\n",
                "parameters": [
                    {
                        "name": "key",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "A specified key to use to delete all labels which have the key matched.",
                            "example": "env"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The key was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/labels/{label_id}": {
            "patch": {
                "deprecated": true,
                "tags": [
                    "Labels"
                ],
                "operationId": "patch-honeytoken-label",
                "summary": "Update a value",
                "description": "Rename the value of a label.\n\nDEPRECATED: This endpoint has been replaced by [this one](#tag/Custom-Tags/operation/partial-update-custom-tag) as per introduction of the custom tags feature.\n",
                "parameters": [
                    {
                        "name": "label_id",
                        "in": "path",
                        "required": true,
                        "description": "Id of the label.",
                        "schema": {
                            "type": "string",
                            "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken Label Request",
                                "required": [
                                    "value"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "string",
                                        "example": "production",
                                        "description": "New value for the label."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The value was changed successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            },
            "delete": {
                "deprecated": true,
                "tags": [
                    "Labels"
                ],
                "operationId": "delete-honeytoken-label",
                "summary": "Delete a label",
                "description": "Delete a label for honeytokens.\n\nDEPRECATED: This endpoint has been replaced by [this one](#tag/Custom-Tags/operation/delete-custom-tag) as per introduction of the custom tags feature.\n",
                "parameters": [
                    {
                        "name": "label_id",
                        "in": "path",
                        "required": true,
                        "description": "Id of the label.",
                        "schema": {
                            "type": "string",
                            "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The label was deleted successfully."
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Label not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/ip-allowlist": {
            "get": {
                "tags": [
                    "IP Allowlist"
                ],
                "operationId": "list-ip-allowlist",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search IP allowlist rules based on their tag and/or the IP ranges."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "tag",
                                "-tag"
                            ]
                        }
                    }
                ],
                "summary": "List IP allowlist rules",
                "description": "This endpoint allows you to list all the IP allowlist rules of your workspace.\n\nThe response contains the list of IP allowlist rules and a pagination cursor to retrieve the next page.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `manager`.\n",
                "responses": {
                    "200": {
                        "description": "List IP allowlist rules",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/ip-allowlist?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/ip-allowlist?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ip_allowlist_rule"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "ip_allowlist:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "IP Allowlist"
                ],
                "operationId": "create-ip-allowlist",
                "summary": "Create an IP allowlist rule",
                "description": "This endpoint allows you to create an IP allowlist rule.\n\nIf you are using a personal access token, you need to have an access level superior or equal to `manager`.\n",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "IP allowlist rule",
                                "required": [
                                    "tag",
                                    "ip_ranges"
                                ],
                                "properties": {
                                    "tag": {
                                        "type": "string",
                                        "example": "Main office",
                                        "description": "Tag for the IP allowlist rule",
                                        "maxLength": 48
                                    },
                                    "ip_ranges": {
                                        "type": "array",
                                        "description": "The IP addresses (individual IPs or CIDR notation) to include in the IP allowlist rule",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "35.153.173.97",
                                            "10.0.0.0/24"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "IP allowlist rule created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ip_allowlist_rule"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "ip_allowlist:write"
                        ]
                    }
                ]
            }
        },
        "/v1/ip-allowlist/{ip_allowlist_rule_id}": {
            "get": {
                "tags": [
                    "IP Allowlist"
                ],
                "operationId": "retrieve-ipallowlist",
                "summary": "Retrieve an IP allowlist rule",
                "description": "Retrieve an existing IP allowlist rule.\n\nIf you are using a personal access token, you need to have an access level greater or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ip_allowlist_rule_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IP allowlist rule details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ip_allowlist_rule"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "IP allowlist rule not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "ip_allowlist:read"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "IP Allowlist"
                ],
                "operationId": "update-ipallowlist",
                "summary": "Update an IP allowlist rule",
                "description": "Update the tag or the IP ranges of an existing IP allowlist rule.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ip_allowlist_rule_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "name and description",
                                "properties": {
                                    "tag": {
                                        "type": "string",
                                        "example": "Satellite office",
                                        "description": "A new tag",
                                        "maxLength": 48
                                    },
                                    "ip_ranges": {
                                        "type": "array",
                                        "description": "The IP addresses (individual IPs or CIDR notation) to include in the IP allowlist rule",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "35.45.64.56",
                                            "10.0.0.0/24"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The IP allowlist rule was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ip_allowlist_rule"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "ip_allowlist:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "IP Allowlist"
                ],
                "operationId": "delete-ipallowlist",
                "summary": "Delete an IP allowlist rule",
                "description": "Delete an existing IP allowlist rule.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ip_allowlist_rule_id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The IP allowlist rule was deleted successfully."
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Label not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "ip_allowlist:write"
                        ]
                    }
                ]
            }
        },
        "/v1/scim/v2/Users": {
            "get": {
                "tags": [
                    "SCIM Users"
                ],
                "operationId": "scim-user-list",
                "summary": "List members (SCIM)",
                "description": "List members of the workspace (using SCIM Protocol).\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:read"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter users using SCIM filtering DSL.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "username": {
                                "value": "userName eq \"jdoe\""
                            },
                            "givenname": {
                                "value": "name.givenName eq \"Jane\""
                            },
                            "familyName": {
                                "value": "name.familyName eq \"Doe\""
                            },
                            "active": {
                                "value": "active eq True"
                            },
                            "externalId": {
                                "value": "externalId eq \"jdoe@example.com\""
                            },
                            "id": {
                                "value": "id eq 1234"
                            }
                        }
                    },
                    {
                        "name": "startIndex",
                        "in": "query",
                        "description": "The 1-based index of the first result in the current set of list results.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "default": 1
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Specifies the desired maximum number of query results per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member List",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Resources": {
                                            "items": {
                                                "$ref": "#/components/schemas/ScimUserOutputSerializer"
                                            },
                                            "title": "Resources",
                                            "type": "array",
                                            "description": "The requested resources."
                                        },
                                        "itemsPerPage": {
                                            "minimum": 0,
                                            "type": "integer",
                                            "description": "The number of resources returned in a single page."
                                        },
                                        "schemas": {
                                            "items": {
                                                "enum": [
                                                    "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                                                ],
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "startIndex": {
                                            "minimum": 1,
                                            "type": "integer",
                                            "description": "The 1-based index of the first result in the current set of list results."
                                        },
                                        "totalResults": {
                                            "minimum": 0,
                                            "type": "integer",
                                            "description": "The total number of results."
                                        }
                                    },
                                    "required": [
                                        "totalResults",
                                        "Resources",
                                        "startIndex",
                                        "itemsPerPage"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError400"
                                },
                                "examples": {
                                    "invalidFilter": {
                                        "value": {
                                            "schemas": [
                                                "urn:ietf:params:scim:api:messages:2.0:Error"
                                            ],
                                            "scimType": "invalidFilter",
                                            "detail": "Only eq filter is supported",
                                            "status": "400"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/scim/v2/Users/{id}": {
            "get": {
                "tags": [
                    "SCIM Users"
                ],
                "operationId": "scim-user-detail",
                "summary": "Detail of a member (SCIM)",
                "description": "Detail of a workspace member (using SCIM Protocol).\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:read"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member Detail",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimUserOutputSerializer"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SCIM Users"
                ],
                "operationId": "scim-user-update",
                "summary": "Update of a member (SCIM)",
                "description": "Update of a workspace member (using SCIM Protocol).\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:write"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/scim+json": {
                            "schema": {
                                "properties": {
                                    "active": {
                                        "type": "boolean",
                                        "description": "Whether the User is activated on the application."
                                    },
                                    "schemas": {
                                        "items": {
                                            "enum": [
                                                "urn:ietf:params:scim:schemas:core:2.0:User"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "schemas",
                                    "active"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Member Detail",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimUserOutputSerializer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "SCIM Users"
                ],
                "operationId": "scim-user-partial-update",
                "summary": "Update (partial) of a member (SCIM)",
                "description": "Update of a workspace member (using SCIM Protocol).\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:write"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/scim+json": {
                            "schema": {
                                "properties": {
                                    "Operations": {
                                        "description": "See https://www.rfc-editor.org/rfc/rfc7644#section-3.5.2 for more details. Currently, only updating the active status is supported.",
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "op": {
                                                    "enum": [
                                                        "replace"
                                                    ],
                                                    "type": "string"
                                                },
                                                "path": {
                                                    "enum": [
                                                        "active"
                                                    ],
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "required": [
                                                "op",
                                                "path",
                                                "value"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "schemas": {
                                        "items": {
                                            "enum": [
                                                "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "Operations",
                                    "schemas"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Member Detail",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimUserOutputSerializer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "SCIM Users"
                ],
                "operationId": "scim-user-delete",
                "summary": "Delete a member (SCIM)",
                "description": "Delete a workspace member (using SCIM Protocol).\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:write"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/scim/v2/ServiceProviderConfig": {
            "get": {
                "tags": [
                    "SCIM Metadata"
                ],
                "operationId": "scim-service-provider-config",
                "summary": "Service Provider Configuration (SCIM)",
                "description": "List the SCIM specification features available on a service provider.\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:read"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service Provider Configuration (SCIM)",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "properties": {
                                        "bulk": {
                                            "description": "Bulk configuration options.",
                                            "properties": {
                                                "maxOperations": {
                                                    "minimum": 0,
                                                    "type": "integer",
                                                    "description": "The maximum number of operations."
                                                },
                                                "maxPayloadSize": {
                                                    "minimum": 0,
                                                    "type": "integer",
                                                    "description": "The maximum payload size in bytes."
                                                },
                                                "supported": {
                                                    "type": "boolean",
                                                    "description": "whether or not the operation is supported."
                                                }
                                            },
                                            "required": [
                                                "supported",
                                                "maxOperations",
                                                "maxPayloadSize"
                                            ],
                                            "type": "object"
                                        },
                                        "changePassword": {
                                            "description": "Configuration options related to changing a password.",
                                            "properties": {
                                                "supported": {
                                                    "type": "boolean",
                                                    "description": "whether or not the operation is supported."
                                                }
                                            },
                                            "required": [
                                                "supported"
                                            ],
                                            "type": "object"
                                        },
                                        "etag": {
                                            "description": "ETag configuration options.",
                                            "properties": {
                                                "supported": {
                                                    "type": "boolean",
                                                    "description": "whether or not the operation is supported."
                                                }
                                            },
                                            "required": [
                                                "supported"
                                            ],
                                            "type": "object"
                                        },
                                        "filter": {
                                            "description": "FILTER configuration options.",
                                            "properties": {
                                                "maxResults": {
                                                    "minimum": 0,
                                                    "type": "integer",
                                                    "description": "The maximum number of resources returned in a response."
                                                },
                                                "supported": {
                                                    "type": "boolean",
                                                    "description": "whether or not the operation is supported."
                                                }
                                            },
                                            "required": [
                                                "supported",
                                                "maxResults"
                                            ],
                                            "type": "object"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/ScimSimpleMeta"
                                        },
                                        "patch": {
                                            "description": "PATCH configuration options.",
                                            "properties": {
                                                "supported": {
                                                    "type": "boolean",
                                                    "description": "whether or not the operation is supported."
                                                }
                                            },
                                            "required": [
                                                "supported"
                                            ],
                                            "type": "object"
                                        },
                                        "schemas": {
                                            "description": "the namespaces of the SCIM schemas that define the attributes present in the current JSON structure.",
                                            "items": {
                                                "enum": [
                                                    "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"
                                                ],
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "sort": {
                                            "description": "Sort configuration options.",
                                            "properties": {
                                                "supported": {
                                                    "type": "boolean",
                                                    "description": "whether or not the operation is supported."
                                                }
                                            },
                                            "required": [
                                                "supported"
                                            ],
                                            "type": "object"
                                        },
                                        "authenticationSchemes": {
                                            "description": "List of supported authentication scheme properties.",
                                            "items": {
                                                "properties": {
                                                    "description": {
                                                        "type": "string",
                                                        "description": "The description of the authentication scheme."
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "description": "The common authentication scheme name."
                                                    },
                                                    "primary": {
                                                        "type": "boolean"
                                                    },
                                                    "type": {
                                                        "description": "The authentication scheme.",
                                                        "enum": [
                                                            "oauth",
                                                            "oauth2",
                                                            "oauthbearertoken",
                                                            "httpbasic",
                                                            "httpdigest"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "name",
                                                    "description",
                                                    "primary"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "meta",
                                        "patch",
                                        "bulk",
                                        "filter",
                                        "changePassword",
                                        "sort",
                                        "etag",
                                        "authenticationSchemes"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/scim/v2/ResourceTypes": {
            "get": {
                "tags": [
                    "SCIM Metadata"
                ],
                "operationId": "scim-resource-types-list",
                "summary": "List Resource Types (SCIM)",
                "description": "List of Resource Types\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:read"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Resource Types",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Resources": {
                                            "items": {
                                                "$ref": "#/components/schemas/ScimResouceTypeSerializer"
                                            },
                                            "title": "Resources",
                                            "type": "array",
                                            "description": "The requested resources."
                                        },
                                        "itemsPerPage": {
                                            "minimum": 0,
                                            "type": "integer",
                                            "description": "The number of resources returned in a single page."
                                        },
                                        "schemas": {
                                            "items": {
                                                "enum": [
                                                    "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                                                ],
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "totalResults",
                                        "Resources"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/scim/v2/ResourceTypes/{name}": {
            "get": {
                "tags": [
                    "SCIM Metadata"
                ],
                "operationId": "scim-resource-types-detail",
                "summary": "Resource Types (SCIM)",
                "description": "Detail of a Resource Types\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:read"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource Type (SCIM)",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimResouceTypeSerializer"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/scim/v2/Schemas": {
            "get": {
                "tags": [
                    "SCIM Metadata"
                ],
                "operationId": "scim-schema-list",
                "summary": "List Schemas (SCIM)",
                "description": "List of SCIM Schemas\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:read"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of SCIM Schemas",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Resources": {
                                            "items": {
                                                "$ref": "#/components/schemas/ScimSchemaSerializer"
                                            },
                                            "title": "Resources",
                                            "type": "array",
                                            "description": "The requested resources."
                                        },
                                        "itemsPerPage": {
                                            "minimum": 0,
                                            "type": "integer",
                                            "description": "The number of resources returned in a single page."
                                        },
                                        "schemas": {
                                            "items": {
                                                "enum": [
                                                    "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                                                ],
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "totalResults",
                                        "Resources"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/scim/v2/Schemas/{name}": {
            "get": {
                "tags": [
                    "SCIM Metadata"
                ],
                "operationId": "scim-schema-detail",
                "summary": "Schema (SCIM)",
                "description": "Detail of a Schema\n",
                "security": [
                    {
                        "api-key": [
                            "Service Account Token",
                            "member:read"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SCIM Schema",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimSchemaSerializer"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/custom_tags": {
            "get": {
                "tags": [
                    "Custom Tags"
                ],
                "operationId": "list-custom-tags",
                "summary": "List custom tags",
                "description": "List all existing custom tags.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter on the specified custom tag key",
                            "example": "env"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Custom tags list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/custom_tags?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/custom_tags?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/customTag"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "custom_tags:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Custom Tags"
                ],
                "operationId": "create-custom-tag",
                "summary": "Create a custom tag",
                "description": "This endpoint allows you to create a custom tag.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/customTag"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The custom tag was created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "custom_tags:write"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Custom Tags"
                ],
                "operationId": "update-custom-tags-key",
                "summary": "Update custom tags key",
                "description": "This endpoint allows you to update a key for all custom tags using it.",
                "parameters": [
                    {
                        "name": "old_key",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Existing key to be renamed",
                            "example": "env"
                        }
                    },
                    {
                        "name": "new_key",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "New name of the key",
                            "example": "environment"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Custom tags updated with the new key"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "custom_tags:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Custom Tags"
                ],
                "operationId": "delete-custom-tags-key",
                "summary": "Delete a custom tags key",
                "description": "This endpoint allows you to delete all custom tags using the given key.",
                "parameters": [
                    {
                        "name": "key",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Key to be deleted",
                            "example": "env"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Custom tags using the given key were successfully deleted"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "custom_tags:write"
                        ]
                    }
                ]
            }
        },
        "/v1/custom_tags/{custom_tag_id}": {
            "get": {
                "tags": [
                    "Custom Tags"
                ],
                "operationId": "get-custom-tag",
                "summary": "Retrieve a custom tag",
                "description": "This endpoint allows you to retrieve an existing custom tag.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/custom_tag_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Custom tag was found successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "custom_tags:read"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "Custom Tags"
                ],
                "operationId": "update-custom-tag",
                "summary": "Full Update of a Custom Tag",
                "description": "This endpoint allows you to update a specific custom tag.\nIt replaces the entire custom tag (key and value).\n\nThis does not impact other custom tags sharing the same key.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/custom_tag_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/customTag"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Custom tag was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "custom_tags:write"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Custom Tags"
                ],
                "operationId": "partial-update-custom-tag",
                "summary": "Partial update of a Custom Tag",
                "description": "This endpoint allows you to partially update a specific custom tag.\nIt updates only the specified fields (key or value), leaving the other fields unchanged.\n\nThis does not impact other custom tags sharing the same key.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/custom_tag_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/customTag"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Custom tag was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "custom_tags:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Custom Tags"
                ],
                "operationId": "delete-custom-tag",
                "summary": "Deletion of a custom tag",
                "description": "This endpoint allows you to delete a specific custom tag.\n\nThis does not impact other custom tags sharing the same key.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/custom_tag_id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Custom tag was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "api-key": [
                            "custom_tags:write"
                        ]
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "document": {
                "type": "object",
                "title": "Document",
                "required": [
                    "document"
                ],
                "properties": {
                    "filename": {
                        "type": "string",
                        "example": ".env",
                        "maxLength": 256
                    },
                    "document": {
                        "type": "string",
                        "example": "\nimport urllib.request\nurl = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\nresponse = urllib.request.urlopen(url)\nconsume(response.read())\n"
                    }
                }
            },
            "error": {
                "type": "object",
                "title": "Error",
                "description": "Error obtained in an API response",
                "required": [
                    "detail"
                ],
                "properties": {
                    "detail": {
                        "type": "string",
                        "description": "Details on response."
                    }
                }
            },
            "quota": {
                "type": "object",
                "title": "Quota Overview",
                "required": [
                    "content"
                ],
                "properties": {
                    "content": {
                        "type": "object",
                        "properties": {
                            "count": {
                                "type": "integer"
                            },
                            "limit": {
                                "type": "integer"
                            },
                            "remaining": {
                                "type": "integer"
                            },
                            "since": {
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                },
                "example": {
                    "content": {
                        "count": 2,
                        "limit": 5000,
                        "remaining": 4998,
                        "since": "2021-04-18"
                    }
                }
            },
            "apiTokenDetails": {
                "type": "object",
                "title": "API Token Details",
                "description": "Details of an API Token",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of API token",
                        "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of API token",
                        "example": "myTokenName"
                    },
                    "workspace_id": {
                        "type": "integer",
                        "description": "Workspace id",
                        "example": 42
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APITokenTypeEnum"
                            }
                        ],
                        "example": "personal_access_token"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APITokenStatusEnum"
                            }
                        ],
                        "example": "revoked"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date of the API token",
                        "example": "2023-05-20T12:40:55.662949Z"
                    },
                    "last_used_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Last usage of the API token",
                        "example": "2023-05-24T12:40:55.662949Z"
                    },
                    "expire_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Expiration date of the API token",
                        "example": null
                    },
                    "revoked_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Revocation date of the API token",
                        "example": "2023-05-27T12:40:55.662949Z"
                    },
                    "member_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Member id",
                        "example": 22015
                    },
                    "creator_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Creator id",
                        "example": 22015
                    },
                    "scopes": {
                        "type": "array",
                        "description": "List of scopes",
                        "minItems": 0,
                        "items": {
                            "$ref": "#/components/schemas/APITokenScopeEnum"
                        },
                        "example": [
                            "incidents:read",
                            "scan"
                        ]
                    }
                }
            },
            "scanResult": {
                "type": "object",
                "title": "Scan Result",
                "description": "Result of a content scan.",
                "required": [
                    "policy_break_count",
                    "policies",
                    "policy_breaks"
                ],
                "properties": {
                    "policy_break_count": {
                        "type": "integer",
                        "description": "Number of policy breaks on this document.",
                        "minimum": 0,
                        "example": 2
                    },
                    "policies": {
                        "type": "array",
                        "description": "Policies checked on this document.",
                        "minItems": 0,
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Filename",
                            "File extensions",
                            "Secrets detection"
                        ]
                    },
                    "policy_breaks": {
                        "type": "array",
                        "description": "List of policy breaks.",
                        "minItems": 0,
                        "items": {
                            "$ref": "#/components/schemas/policyBreak"
                        },
                        "example": [
                            {
                                "type": ".env",
                                "policy": "Filenames",
                                "matches": [
                                    {
                                        "type": "filename",
                                        "match": ".env"
                                    }
                                ]
                            },
                            {
                                "type": "Basic Auth String",
                                "policy": "Secrets detection",
                                "validity": "cannot_check",
                                "matches": [
                                    {
                                        "type": "username",
                                        "match": "jen_barber",
                                        "index_start": 52,
                                        "index_end": 61,
                                        "line_start": 2,
                                        "line_end": 2
                                    },
                                    {
                                        "type": "password",
                                        "match": "correcthorsebatterystaple",
                                        "index_start": 63,
                                        "index_end": 87,
                                        "line_start": 2,
                                        "line_end": 2
                                    },
                                    {
                                        "type": "host",
                                        "match": "cake.gitguardian.com",
                                        "index_start": 89,
                                        "index_end": 108,
                                        "line_start": 2,
                                        "line_end": 2
                                    }
                                ]
                            }
                        ]
                    }
                }
            },
            "policyBreak": {
                "type": "object",
                "title": "Policy Break",
                "description": "Issue found in your Document",
                "required": [
                    "type",
                    "policy",
                    "matches"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of detected policy."
                    },
                    "policy": {
                        "type": "string",
                        "description": "Name of failing policy."
                    },
                    "validity": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "no_checker",
                            "valid",
                            "invalid",
                            "failed_to_check",
                            "unknown"
                        ],
                        "description": "Validity of the found secret."
                    },
                    "matches": {
                        "type": "array",
                        "description": "List of secret matches.",
                        "minItems": 1,
                        "items": {
                            "type": "object",
                            "required": [
                                "type",
                                "match"
                            ],
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Type of match"
                                },
                                "match": {
                                    "type": "string",
                                    "description": "Matched string of failure"
                                },
                                "line_start": {
                                    "type": "integer",
                                    "description": "start line number of match (index origin = 1)"
                                },
                                "line_end": {
                                    "type": "integer",
                                    "description": "end line number of match (index origin = 1)"
                                },
                                "index_start": {
                                    "type": "integer",
                                    "description": "start index of match in file as an array (index origin = 0)"
                                },
                                "index_end": {
                                    "type": "integer",
                                    "description": "end index of match in file as an array (index origin = 0)"
                                }
                            }
                        }
                    },
                    "known_secret": {
                        "type": "boolean",
                        "description": "Indicates whether the secret is known by your GitGuardian dashboard.\n"
                    },
                    "incident_url": {
                        "type": "string",
                        "description": "The incident's URL on your GitGuardian dashboard, if it is a known secret, or\nan empty string otherwise.\n"
                    }
                }
            },
            "match": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "title": "Match name",
                        "example": "apikey"
                    },
                    "indice_start": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "Match start index",
                        "example": 32
                    },
                    "indice_end": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "Match end index",
                        "example": 79
                    },
                    "pre_line_start": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "title": "Match start line before Git patch",
                        "example": null
                    },
                    "pre_line_end": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "title": "Match end line before Git patch",
                        "example": null
                    },
                    "post_line_start": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "title": "Match start line after Git patch",
                        "example": 1
                    },
                    "post_line_end": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "title": "Match end line after Git patch",
                        "example": 1
                    }
                },
                "required": [
                    "indice_end",
                    "indice_start",
                    "name",
                    "post_line_end",
                    "post_line_start",
                    "pre_line_end",
                    "pre_line_start"
                ]
            },
            "scan": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of this historical scan",
                        "example": "2021-05-20T12:40:55.662949Z"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ScanStatusEnum"
                            }
                        ],
                        "example": "finished",
                        "readOnly": true
                    },
                    "failing_reason": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Failure reason of the historical scan, if status is failed",
                        "example": "DMCA takedown"
                    },
                    "commits_scanned": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of commits scanned",
                        "example": 123
                    },
                    "branches_scanned": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of branches scanned",
                        "example": 2
                    },
                    "duration": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Historical scan duration",
                        "example": "1:30.454444"
                    }
                }
            },
            "_base_incident": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3759
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Last trigger date",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "detector": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/detector"
                            }
                        ],
                        "readOnly": true
                    },
                    "secret_hash": {
                        "type": "string",
                        "readOnly": true,
                        "title": "Unique hash",
                        "example": "Ri9FjVgdOlPnBmujoxP4XPJcbe82BhJXB/SAngijw/juCISuOMgPzYhV28m6OG24"
                    },
                    "hmsl_hash": {
                        "type": "string",
                        "readOnly": true,
                        "title": "Unique HasMySecretLeaked hash",
                        "example": "05975add34ddc9a38a0fb57c7d3e676ffed57080516fc16bf8d8f14308fedb86"
                    },
                    "gitguardian_url": {
                        "type": "string",
                        "readOnly": true,
                        "title": "URL on the dashboard",
                        "example": "https://dashboard.gitguardian.com/workspace/1/incidents/3899"
                    },
                    "regression": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/StatusEnum"
                            }
                        ],
                        "readOnly": true
                    },
                    "assignee_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 309
                    },
                    "assignee_email": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true,
                        "example": "eric@gitguardian.com"
                    },
                    "occurrences_count": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 4
                    },
                    "secret_presence": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/secretPresence"
                            }
                        ],
                        "readOnly": true
                    },
                    "ignore_reason": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SecretStatusEnum"
                            }
                        ],
                        "nullable": true,
                        "readOnly": true,
                        "example": "test_credential"
                    },
                    "triggered_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2019-05-12T09:37:49Z"
                    },
                    "ignored_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": "2019-08-24T14:15:22Z"
                    },
                    "ignorer_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 309
                    },
                    "ignorer_api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                    },
                    "resolver_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 395
                    },
                    "resolver_api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                    },
                    "secret_revoked": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false
                    },
                    "severity": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SeverityEnum"
                            }
                        ],
                        "example": "high"
                    },
                    "validity": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ValidityEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "valid"
                    },
                    "resolved_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": null
                    },
                    "share_url": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true,
                        "example": "https://dashboard.gitguardian.com/share/incidents/11111111-1111-1111-1111-111111111111"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagEnum"
                        },
                        "readOnly": true,
                        "example": [
                            "FROM_HISTORICAL_SCAN",
                            "SENSITIVE_FILE"
                        ]
                    },
                    "custom_tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/customTag"
                        }
                    },
                    "feedback_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/feedback"
                        },
                        "readOnly": true
                    }
                }
            },
            "incident": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/_base_incident"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "occurrences": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/vcsOccurrence"
                                },
                                "readOnly": true
                            }
                        }
                    }
                ]
            },
            "incidentWithoutOccurrences": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/_base_incident"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "occurrences": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/vcsOccurrence"
                                },
                                "nullable": true,
                                "readOnly": true,
                                "example": null
                            },
                            "secret_presence": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/secretPresence"
                                    }
                                ],
                                "readOnly": true
                            }
                        }
                    }
                ]
            },
            "incidentNote": {
                "type": "object",
                "title": "Incident Note",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 17
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 42,
                        "description": "Id of the related Incident"
                    },
                    "member_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 38,
                        "description": "Id of the member who created this note. Can be null if the note was\nnot created by a member or if the member was deleted.\n"
                    },
                    "api_token": {
                        "type": "string",
                        "deprecated": true,
                        "nullable": true,
                        "readOnly": true,
                        "example": null,
                        "description": "Name of the API key which created this note. Can be null if the note\nwas not created via the API. Use `api_token_id` instead.\n"
                    },
                    "api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": "3220d951-00ce-446c-ac90-9822f0f9b71e",
                        "description": "ID of the API key which created this note. Can be null if the note\nwas not created via the API.\n"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of the note",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": null,
                        "description": "Last time the content of the note was updated. Null if the\ncomment was never modified.\n"
                    },
                    "comment": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 10000,
                        "example": "I revoked this secret"
                    },
                    "issue_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 42,
                        "description": "Id of the related Incident. Use `incident_id` instead.",
                        "deprecated": true
                    },
                    "user_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 38,
                        "description": "Id of the user who created this note. Can be null if the note was\nnot created by a user or if the user was deleted. Use `member_id` instead.\n",
                        "deprecated": true
                    }
                }
            },
            "incidentToken": {
                "type": "object",
                "title": "Incident Sharing Information",
                "properties": {
                    "share_url": {
                        "type": "string",
                        "readOnly": true,
                        "example": "https://dashboard.gitguardian.com/share/incidents/11111111-1111-1111-1111-111111111111"
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3759
                    },
                    "feedback_collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": true,
                        "description": "Allow the developer to submit their feedback through the share link"
                    },
                    "auto_healing": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false,
                        "description": "Allow the developer to resolve or ignore through the share link"
                    },
                    "token": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678-1234-1234-1234-123456789012"
                    },
                    "expire_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": "2019-08-24T14:15:22Z"
                    },
                    "revoked_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": null
                    }
                }
            },
            "occurrence": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 4421
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3759
                    },
                    "kind": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OccurrenceKindEnum"
                            }
                        ],
                        "readOnly": true,
                        "title": "Kind when created"
                    },
                    "source": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/source"
                            }
                        ],
                        "readOnly": true
                    },
                    "author_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Eric"
                    },
                    "author_info": {
                        "type": "string",
                        "readOnly": true,
                        "example": "eric@gitguardian.com"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Publish date",
                        "example": "2021-05-20T12:40:55.662949Z"
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true,
                        "example": "https://github.com/prm-dev-team/QATest_staging/commit/76dd18a2a8d27eaf00a45851cc7731c53b59ed19#diff-0f372f3171c8f13a15a22a1081487ed54fa70ad088e17c6c6386196a179a04ffR1"
                    },
                    "matches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/match"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagEnum"
                        },
                        "example": [
                            "FROM_HISTORICAL_SCAN",
                            "SENSITIVE_FILE"
                        ]
                    }
                }
            },
            "vcsOccurrence": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/occurrence"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "sha": {
                                "type": "string",
                                "nullable": true,
                                "readOnly": true,
                                "title": "Commit SHA",
                                "example": "d670460b4b4aece5915caf5c68d12f560a9fe3e4"
                            },
                            "presence": {
                                "type": "string",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PresenceEnum"
                                    }
                                ],
                                "example": "present"
                            },
                            "filepath": {
                                "type": "string",
                                "readOnly": true,
                                "nullable": true,
                                "description": "This is filename for old models with incomplete data",
                                "example": "test_data/12123testfile.txt"
                            }
                        }
                    }
                ]
            },
            "secretPresence": {
                "type": "object",
                "properties": {
                    "files_requiring_code_fix": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "files_pending_merge": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "files_fixed": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "outside_vcs": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "removed_outside_vcs": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 0
                    },
                    "in_vcs": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3
                    },
                    "removed_in_vcs": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 0
                    }
                }
            },
            "impactedPerimeter": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/StatusEnum"
                            }
                        ],
                        "readOnly": true,
                        "default": "TRIGGERED"
                    },
                    "secret_presence": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/secretPresence"
                            }
                        ],
                        "readOnly": true
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/impactedPerimeterSource"
                        }
                    }
                }
            },
            "impactedPerimeterSource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true,
                        "example": "https://github.com/GitGuardian/ggshield/"
                    },
                    "type": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/VCSSourceTypeEnum"
                            }
                        ]
                    },
                    "full_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "GitGuardian/ggshield"
                    },
                    "files": {
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/impactedPerimeterFiles"
                            }
                        ]
                    }
                }
            },
            "impactedPerimeterFiles": {
                "type": "object",
                "properties": {
                    "files_requiring_code_fix": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/fileRequiringCodeFix"
                        },
                        "readOnly": true
                    },
                    "files_pending_merge": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/filePendingMerge"
                        },
                        "readOnly": true
                    },
                    "files_fixed": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/fileFixed"
                        },
                        "readOnly": true
                    }
                }
            },
            "fileRequiringCodeFix": {
                "type": "object",
                "properties": {
                    "filepath": {
                        "type": "string",
                        "readOnly": true,
                        "example": "foo.txt"
                    },
                    "mentions_count": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "file_url": {
                        "type": "string",
                        "readOnly": true,
                        "example": "https://github.com/GitGuardian/ggshield/blob/main/foo.txt"
                    }
                }
            },
            "filePendingMerge": {
                "type": "object",
                "properties": {
                    "filepath": {
                        "type": "string",
                        "readOnly": true,
                        "example": "bar.txt"
                    },
                    "mentions_count": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "file_url": {
                        "type": "string",
                        "readOnly": true,
                        "example": "https://github.com/GitGuardian/ggshield/blob/main/bar.txt"
                    }
                }
            },
            "fileFixed": {
                "type": "object",
                "properties": {
                    "filepath": {
                        "type": "string",
                        "readOnly": true,
                        "example": "baz.txt"
                    },
                    "mentions_count": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "merge_request_url": {
                        "type": "string",
                        "readOnly": true,
                        "example": "https://github.com/GitGuardian/ggshield/pull/123"
                    }
                }
            },
            "detector": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "slack_bot_token"
                    },
                    "display_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Slack Bot Token"
                    },
                    "nature": {
                        "type": "string",
                        "readOnly": true,
                        "example": "specific"
                    },
                    "family": {
                        "type": "string",
                        "readOnly": true,
                        "example": "apikey"
                    },
                    "detector_group_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "slackbot_token"
                    },
                    "detector_group_display_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Slack Bot Token"
                    }
                },
                "required": [
                    "name",
                    "display_name",
                    "nature"
                ]
            },
            "detectorGroup": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "aws_iam"
                    },
                    "display_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "AWS Keys"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DetectorGroupTypeEnum"
                            }
                        ],
                        "example": "specific"
                    },
                    "category": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Cloud Provider"
                    },
                    "is_active": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether the detector is currently enabled on the workspace",
                        "example": true
                    },
                    "scans_code_only": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether the detector can scan other kinds of resources than VCS ones",
                        "example": false
                    },
                    "checkable": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Indicates whether this detector has a validity checker",
                        "example": true
                    },
                    "use_with_validity_check_disabled": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "If false, this detector will not be used if secret validity check is disabled on the workspace"
                    },
                    "frequency": {
                        "type": "number",
                        "readOnly": true,
                        "description": "Number of secrets found per million of commits from GitGuardian experience of open-source monitoring",
                        "example": "1O3.74"
                    },
                    "removed_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Date at which this detector was disabled by GitGuardian",
                        "example": null
                    },
                    "open_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of open secret incidents on the workspace associated to this detector",
                        "example": 17
                    },
                    "ignored_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of ignored secret incidents on the workspace associated to this detector",
                        "example": 9
                    },
                    "resolved_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of resolved secret incidents on the workspace associated to this detector",
                        "example": 42
                    }
                }
            },
            "feedback": {
                "type": "object",
                "title": "Feedback",
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2021-05-20T12:40:55.662949Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2021-05-20T12:40:55.662949Z"
                    },
                    "member_id": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "example": 42,
                        "description": "Only if the feedback has been provided from the dashboard."
                    },
                    "email": {
                        "type": "string",
                        "readOnly": true,
                        "example": "eric@gitguardian.com",
                        "description": "Feedback author's e-mail address"
                    },
                    "answers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/feedback_answer"
                        },
                        "readOnly": true
                    }
                }
            },
            "feedback_answer": {
                "type": "object",
                "title": "Answer",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/_feedback_boolean_answer"
                    },
                    {
                        "$ref": "#/components/schemas/_feedback_text_answer"
                    }
                ]
            },
            "_feedback_boolean_answer": {
                "type": "object",
                "title": "Boolean answer",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "boolean"
                        ],
                        "description": "The value's type for this field."
                    },
                    "field_ref": {
                        "type": "string",
                        "example": "actual_secret_yes_no",
                        "description": "The field's unique reference."
                    },
                    "field_label": {
                        "type": "string",
                        "example": "Is it an actual secret?",
                        "description": "The field's name or question."
                    },
                    "boolean": {
                        "type": "boolean",
                        "example": true,
                        "description": "The value provided for this field in the feedback."
                    }
                }
            },
            "_feedback_text_answer": {
                "type": "object",
                "title": "Text answer",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "text"
                        ],
                        "description": "The value's type for this field."
                    },
                    "field_ref": {
                        "type": "string",
                        "example": "remarks_text",
                        "description": "The field's unique reference."
                    },
                    "field_label": {
                        "type": "string",
                        "example": "Additional remarks",
                        "description": "The field's name or question."
                    },
                    "text": {
                        "type": "string",
                        "example": "This secret can be ignored",
                        "description": "The value provided for this field in the feedback."
                    }
                }
            },
            "_resource_identity_access": {
                "type": "object",
                "properties": {
                    "resource_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252
                    },
                    "resource_type": {
                        "type": "string",
                        "readOnly": true,
                        "example": "secret-incidents"
                    },
                    "permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "example": "can_edit"
                    }
                }
            },
            "resource_member_access": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "member_id": {
                                "type": "integer",
                                "readOnly": true,
                                "example": 1345
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/_resource_identity_access"
                    }
                ]
            },
            "resource_team_access": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "team_id": {
                                "type": "integer",
                                "readOnly": true,
                                "example": 1345
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/_resource_identity_access"
                    }
                ]
            },
            "resource_invitation_access": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "invitation_id": {
                                "type": "integer",
                                "readOnly": true,
                                "example": 1345
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/_resource_identity_access"
                    }
                ]
            },
            "invitation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "example": "john.smith@example.org"
                    },
                    "role": {
                        "readOnly": true,
                        "deprecated": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NonOwnerMemberAccessLevelEnum"
                            }
                        ]
                    },
                    "access_level": {
                        "readOnly": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NonOwnerMemberAccessLevelEnum"
                            }
                        ]
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of the invitation",
                        "example": "2019-08-22T14:15:22Z"
                    }
                }
            },
            "incidentInvitation": {
                "type": "object",
                "properties": {
                    "invitation_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the invitation object\n"
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the incident object\n"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "can_edit"
                    }
                }
            },
            "member": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "John Smith"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "example": "john.smith@example.org"
                    },
                    "role": {
                        "deprecated": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MemberAccessLevelEnum"
                            }
                        ]
                    },
                    "access_level": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MemberAccessLevelEnum"
                            }
                        ]
                    },
                    "active": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether this member is activated on the workspace."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-06-28T16:40:26.897Z"
                    },
                    "last_login": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": "2023-06-28T16:40:26.897Z"
                    }
                }
            },
            "incidentMember": {
                "type": "object",
                "properties": {
                    "member_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the Member object (replaces the id field)\n"
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the Incident object\n"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "can_edit"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1234,
                        "deprecated": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "John Smith",
                        "deprecated": true
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "example": "john.smith@example.org",
                        "deprecated": true
                    },
                    "role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MemberAccessLevelEnum"
                            }
                        ],
                        "readOnly": true,
                        "deprecated": true
                    }
                }
            },
            "source": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 6531
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "example": "https://github.com/GitGuardian/gg-shield"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "example": "github"
                    },
                    "full_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "gitguardian/gg-shield"
                    },
                    "health": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SourceHealthEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "at_risk"
                    },
                    "default_branch": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "example": "main",
                        "description": "Default branch of the source repository."
                    },
                    "default_branch_head": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "example": "abcd97b4aaf927ea934504263322e75e86c31xyz",
                        "description": "Reference of the HEAD of the default branch."
                    },
                    "open_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of open secret incidents with at least one occurrence on this source.\n",
                        "example": 3
                    },
                    "closed_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of closed secret incidents with at least one occurrence on this source.\n",
                        "example": 2
                    },
                    "secret_incidents_breakdown": {
                        "type": "object",
                        "description": "Detailed count of secret incidents linked to this source.",
                        "readOnly": true,
                        "properties": {
                            "open_secret_incidents": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/sourceSeverityBreakdown"
                                    }
                                ]
                            },
                            "closed_secret_incidents": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/sourceSeverityBreakdown"
                                    }
                                ]
                            }
                        }
                    },
                    "visibility": {
                        "type": "string",
                        "readOnly": true,
                        "example": "public"
                    },
                    "external_id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "VCS identifier of the source (e.g.: the GitHub id for a GitHub repository). Warning: external_id is a string because some VCS ids can be UUIDs.\n",
                        "example": "125"
                    },
                    "source_criticality": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Criticality of the source.\n",
                        "example": "critical"
                    },
                    "last_scan": {
                        "type": "object",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/scan"
                            }
                        ],
                        "readOnly": true,
                        "nullable": true
                    },
                    "monitored": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether the source is currently monitored by GitGuardian.\n",
                        "example": true
                    }
                }
            },
            "sourceSeverityBreakdown": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "severity_breakdown": {
                        "type": "object",
                        "properties": {
                            "critical": {
                                "type": "integer"
                            },
                            "high": {
                                "type": "integer"
                            },
                            "medium": {
                                "type": "integer"
                            },
                            "low": {
                                "type": "integer"
                            },
                            "info": {
                                "type": "integer"
                            },
                            "unknown": {
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "auditLog": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3759
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Date the event occurred",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "member_email": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "example": "eric@gitguardian.com"
                    },
                    "member_name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "example": "Eric",
                        "description": "Name of the member at the time he/she did the event. It may differ from the current name\nof the member if it has been updated since.\n"
                    },
                    "member_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 1243,
                        "description": "ID of the member that did the event. Can be null if the member has been deleted since then:\nin that case use `member_name` and `member_email` to identify the author of the action.\n"
                    },
                    "api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": "41f016f9-d44b-451c-a816-df041c057c6b",
                        "description": "ID of the API token associated to the event if it was done via the API.\nCan be null if the action was not performed via the API.\n"
                    },
                    "ip_address": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true
                    },
                    "target_ids": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "nullable": true,
                            "readOnly": true
                        },
                        "example": [
                            "1243",
                            "2bb559aa-bd72-48ca-b4ba-bf09b1c9a658"
                        ]
                    },
                    "action_type": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AuditLogActionTypeEnum"
                            }
                        ],
                        "example": "READ",
                        "readOnly": true
                    },
                    "event_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "user.logged_in"
                    },
                    "data": {
                        "type": "object",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Additional data associated to the event.",
                        "example": "{type: github_sso}"
                    }
                }
            },
            "team": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252
                    },
                    "name": {
                        "type": "string",
                        "example": "feature team A"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "team description.",
                        "example": "Description of my team"
                    },
                    "is_global": {
                        "type": "boolean",
                        "example": false,
                        "readOnly": true
                    },
                    "gitguardian_url": {
                        "type": "string",
                        "readOnly": true,
                        "title": "URL on the dashboard",
                        "example": "https://dashboard.gitguardian.com/workspace/1/settings/user/teams/1"
                    }
                }
            },
            "teamInvitation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252
                    },
                    "invitation_id": {
                        "type": "integer",
                        "example": 4851
                    },
                    "team_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 991
                    },
                    "is_team_leader": {
                        "type": "boolean",
                        "example": false
                    },
                    "team_permission": {
                        "type": "string",
                        "deprecated": true,
                        "description": "team_permission is replaced by is_team_leader",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/TeamPermissionEnum"
                            }
                        ],
                        "example": "cannot_manage"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "example": "can_edit"
                    }
                }
            },
            "teamMembership": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1234
                    },
                    "member_id": {
                        "type": "integer",
                        "description": "Id of a workspace member.",
                        "example": 2489
                    },
                    "team_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 4285
                    },
                    "is_team_leader": {
                        "type": "boolean",
                        "example": false
                    },
                    "team_permission": {
                        "type": "string",
                        "deprecated": true,
                        "description": "team_permission is replaced by is_team_leader",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/TeamPermissionEnum"
                            }
                        ],
                        "example": "cannot_manage"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "example": "can_edit"
                    }
                }
            },
            "teamRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1234
                    },
                    "member_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 2489
                    },
                    "team_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 4285
                    }
                }
            },
            "incidentTeam": {
                "type": "object",
                "properties": {
                    "team_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the Team object\n"
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the Incident object\n"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "can_edit"
                    }
                }
            },
            "honeytoken": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b"
                    },
                    "name": {
                        "type": "string",
                        "example": "honeytoken A"
                    },
                    "description": {
                        "type": "string",
                        "example": "honeytoken used in the repository AA"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of the honeytoken",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "gitguardian_url": {
                        "type": "string",
                        "readOnly": true,
                        "title": "URL on the dashboard",
                        "example": "https://dashboard.gitguardian.com/workspace/1/incidents/3bf0ed1b-68b2-4db8-b944-d450c5d35cf4"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "active",
                            "triggered",
                            "revoked"
                        ],
                        "description": "Status of the honeytoken.",
                        "example": "active"
                    },
                    "triggered_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Date when the honeytoken was switched from active to triggered the last time",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "revoked_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Date when the honeytoken was revoked",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "open_events_count": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 122
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "AWS"
                        ],
                        "description": "Type of the honeytoken.",
                        "example": "AWS"
                    },
                    "creator_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Id of the member who created this honeytoken.",
                        "example": 122
                    },
                    "revoker_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Id of the member who revoked this honeytoken.",
                        "example": 122
                    },
                    "creator_api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": "f74ffca5-d06d-45c2-a3d8-e8e95d15a464",
                        "description": "ID of the API key which created this honeytoken. Can be null if the honeytoken\nwas not created via the API.\n"
                    },
                    "revoker_api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": "19058e4a-0fab-4dcc-8ed6-4e2ec9fb2e44",
                        "description": "ID of the API key which created honeytoken note. Can be null if the honeytoken\nwas not created via the API.\n"
                    },
                    "token": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Secret to be placed as a honeytoken.",
                        "example": {
                            "access_token_id": "AAAA",
                            "secret_key": "BBB"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HoneyTokenEventTag"
                        },
                        "example": [
                            "publicly_exposed"
                        ]
                    },
                    "labels": {
                        "type": "array",
                        "description": "Custom tags set on the honeytoken. This field is deprecated; use the `custom_tags` field instead.",
                        "items": {
                            "$ref": "#/components/schemas/honeyTokenLabel"
                        },
                        "deprecated": true
                    },
                    "custom_tags": {
                        "type": "array",
                        "description": "Custom tags set on the honeytoken.",
                        "items": {
                            "$ref": "#/components/schemas/customTag"
                        }
                    }
                }
            },
            "honeyTokenWithContext": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "filepath": {
                        "type": "string",
                        "example": "config_prod.py"
                    },
                    "language": {
                        "type": "string",
                        "example": "python"
                    },
                    "suggested_commit_message": {
                        "type": "string",
                        "description": "Suggestion of a commit message to use",
                        "example": "adding test config"
                    },
                    "honeytoken_id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b"
                    },
                    "gitguardian_url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "URL of the honeytoken on the dashboard",
                        "example": "https://dashboard.gitguardian.com/workspace/1/honeytokens/948025a2-6969-493c-8696-3849c1e9f769"
                    }
                }
            },
            "honeyTokenNote": {
                "type": "object",
                "title": "Honeytoken Note",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "1b99892e-6254-4f8a-9e98-559ed810b7da"
                    },
                    "honeytoken_id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b",
                        "description": "Id of the related Honeytoken"
                    },
                    "member_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 38,
                        "description": "Id of the member who created this note. Can be null if the note was\nnot created by a member or if the member was deleted.\n"
                    },
                    "api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": "37d5b0d7-9f89-4b80-9070-261e26637836",
                        "description": "ID of the API key which created this note. Can be null if the note\nwas not created via the API.\n"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of the note",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": null,
                        "description": "Last time the content of the note was updated. Null if the\ncomment was never modified.\n"
                    },
                    "comment": {
                        "type": "string",
                        "maxLength": 10000,
                        "example": "I revoked this secret"
                    }
                }
            },
            "honeyTokenEvent": {
                "type": "object",
                "title": "Honeytoken Event",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "0cad1887-d616-4a46-8b5e-4c7b3a70dbaf"
                    },
                    "honeytoken_id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b",
                        "description": "Id of the related Honeytoken."
                    },
                    "triggered_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time on which the honeytoken was triggered. Null if the\nhoneytoken was never triggered.\n",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "gitguardian_url": {
                        "type": "string",
                        "readOnly": true,
                        "title": "URL on the dashboard",
                        "example": "https://dashboard.gitguardian.com/workspace/1/incidents/3bf0ed1b-68b2-4db8-b944-d450c5d35cf4"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "open",
                            "closed"
                        ],
                        "description": "Status of the honeytoken event.",
                        "example": "open"
                    },
                    "ip_address": {
                        "type": "string",
                        "readOnly": true,
                        "description": "IP address from which the event originates.",
                        "example": "8.8.8.8"
                    },
                    "action": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The action made through the honeytoken."
                    },
                    "data": {
                        "type": "object",
                        "readOnly": true,
                        "description": "An object with additional data related to the event"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HoneyTokenEventTag"
                        },
                        "example": [
                            "publicly_exposed"
                        ]
                    }
                }
            },
            "honeyTokenSource": {
                "type": "object",
                "title": "Honeytoken Source",
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/VCSSourceTypeEnum"
                            }
                        ]
                    },
                    "name": {
                        "type": "string",
                        "example": "gitguardian/gg-shield"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://github.com/GitGuardian/gg-shield"
                    },
                    "open_issues_count": {
                        "type": "number",
                        "description": "Number of open secret issues with at least one occurrence on this source.\n",
                        "example": 3
                    },
                    "total_files_count": {
                        "type": "number",
                        "description": "Number of files where the honeytoken appears.\n",
                        "example": 2
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Files where the honeytoken appears.",
                        "minItems": 0,
                        "example": [
                            ".env"
                        ]
                    },
                    "source_id": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "honeyTokenLabel": {
                "type": "object",
                "title": "Honeytoken Label",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "0cad1887-d616-4a46-8b5e-4c7b3a70dbaf"
                    },
                    "key": {
                        "type": "string",
                        "example": "env"
                    },
                    "value": {
                        "type": "string",
                        "example": "production"
                    }
                }
            },
            "APITokenStatusEnum": {
                "enum": [
                    "active",
                    "expired",
                    "revoked"
                ],
                "type": "string"
            },
            "APITokenTypeEnum": {
                "enum": [
                    "personal_access_token",
                    "service_account"
                ],
                "type": "string"
            },
            "APITokenScopeEnum": {
                "enum": [
                    "scan",
                    "incidents:read",
                    "incidents:write",
                    "incidents:share",
                    "members:read",
                    "members:write",
                    "teams:read",
                    "teams:write",
                    "audit_logs:read",
                    "honeytokens:read",
                    "honeytokens:write",
                    "api_tokens:read",
                    "api_tokens:write",
                    "ip_allowlist:read",
                    "ip_allowlist:write",
                    "sources:read",
                    "sources:write",
                    "nhi:send-inventory",
                    "nhi:write-vault"
                ],
                "type": "string"
            },
            "MemberAccessLevelEnum": {
                "enum": [
                    "owner",
                    "manager",
                    "member",
                    "restricted"
                ],
                "type": "string"
            },
            "NonOwnerMemberAccessLevelEnum": {
                "enum": [
                    "manager",
                    "member",
                    "restricted"
                ],
                "type": "string"
            },
            "OccurrenceKindEnum": {
                "enum": [
                    "realtime",
                    "historical"
                ],
                "type": "string"
            },
            "PresenceEnum": {
                "enum": [
                    "present",
                    "removed"
                ],
                "type": "string"
            },
            "DetectorGroupTypeEnum": {
                "enum": [
                    "specific",
                    "generic",
                    "custom"
                ],
                "type": "string"
            },
            "VCSSourceTypeEnum": {
                "type": "string",
                "readOnly": true,
                "example": "github",
                "enum": [
                    "azure_devops",
                    "bitbucket",
                    "bitbucket_cloud",
                    "github",
                    "gitlab"
                ]
            },
            "ScanStatusEnum": {
                "enum": [
                    "pending",
                    "running",
                    "canceled",
                    "failed",
                    "too_large",
                    "timeout",
                    "pending_timeout",
                    "finished"
                ],
                "type": "string"
            },
            "SecretStatusEnum": {
                "enum": [
                    "test_credential",
                    "false_positive",
                    "low_risk"
                ],
                "type": "string"
            },
            "SeverityEnum": {
                "enum": [
                    "critical",
                    "high",
                    "medium",
                    "low",
                    "info",
                    "unknown"
                ],
                "type": "string"
            },
            "SourceHealthEnum": {
                "enum": [
                    "safe",
                    "unknown",
                    "at_risk"
                ],
                "type": "string"
            },
            "StatusEnum": {
                "enum": [
                    "IGNORED",
                    "TRIGGERED",
                    "ASSIGNED",
                    "RESOLVED"
                ],
                "type": "string"
            },
            "ValidityEnum": {
                "enum": [
                    "valid",
                    "invalid",
                    "failed_to_check",
                    "no_checker",
                    "unknown"
                ],
                "type": "string"
            },
            "TagEnum": {
                "enum": [
                    "DEFAULT_BRANCH",
                    "FROM_HISTORICAL_SCAN",
                    "CHECK_RUN_SKIP_FALSE_POSITIVE",
                    "CHECK_RUN_SKIP_LOW_RISK",
                    "CHECK_RUN_SKIP_TEST_CRED",
                    "IGNORED_IN_CHECK_RUN",
                    "PUBLIC",
                    "PUBLICLY_EXPOSED",
                    "PUBLICLY_LEAKED",
                    "REGRESSION",
                    "SENSITIVE_FILE",
                    "TEST_FILE"
                ],
                "type": "string"
            },
            "TagFilterEnum": {
                "enum": [
                    "DEFAULT_BRANCH",
                    "FROM_HISTORICAL_SCAN",
                    "CHECK_RUN_SKIP_FALSE_POSITIVE",
                    "CHECK_RUN_SKIP_LOW_RISK",
                    "CHECK_RUN_SKIP_TEST_CRED",
                    "PUBLIC",
                    "PUBLICLY_EXPOSED",
                    "PUBLICLY_LEAKED",
                    "REGRESSION",
                    "SENSITIVE_FILE",
                    "TEST_FILE",
                    "NONE"
                ]
            },
            "AuditLogActionTypeEnum": {
                "enum": [
                    "READ",
                    "CREATE",
                    "UPDATE",
                    "DELETE",
                    "OTHER"
                ],
                "type": "string"
            },
            "TeamPermissionEnum": {
                "enum": [
                    "can_manage",
                    "cannot_manage"
                ],
                "type": "string"
            },
            "IncidentPermissionEnum": {
                "enum": [
                    "can_view",
                    "can_edit",
                    "full_access"
                ],
                "type": "string"
            },
            "HoneyTokenEventTag": {
                "enum": [
                    "publicly_exposed"
                ],
                "type": "string"
            },
            "SourceTypeQueryParamsEnum": {
                "enum": [
                    "bitbucket",
                    "bitbucket_cloud",
                    "github",
                    "gitlab",
                    "azure_devops",
                    "slack",
                    "jira_cloud",
                    "confluence_cloud",
                    "microsoft_teams",
                    "confluence_data_center",
                    "jira_data_center",
                    "servicenow"
                ],
                "type": "string"
            },
            "HMSLSourceTypeEnum": {
                "enum": [
                    "github",
                    "github_issue",
                    "github_gist",
                    "unknown"
                ],
                "type": "string"
            },
            "ip_allowlist_rule": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b"
                    },
                    "tag": {
                        "type": "string",
                        "example": "Main office",
                        "description": "Tag for the IP allowlist rule"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of the IP allowlist rule",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "ip_ranges": {
                        "type": "array",
                        "readOnly": true,
                        "description": "The IP addresses (individual IPs or CIDR notation) included in the IP allowlist rule",
                        "items": {
                            "type": "string",
                            "readOnly": true
                        },
                        "example": [
                            "35.153.173.97",
                            "10.0.0.0/24"
                        ]
                    }
                }
            },
            "ScimError400": {
                "title": "Error",
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "urn:ietf:params:scim:api:messages:2.0:Error"
                            ]
                        }
                    },
                    "scimType": {
                        "type": "string",
                        "description": "See https://www.rfc-editor.org/rfc/rfc7644#section-3.12 for more details."
                    },
                    "detail": {
                        "type": "string",
                        "description": "A human-readable description of the error."
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "400"
                        ],
                        "description": "The HTTP status code of the error."
                    }
                },
                "required": [
                    "schemas",
                    "detail",
                    "status"
                ]
            },
            "ScimError": {
                "title": "Error",
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "urn:ietf:params:scim:api:messages:2.0:Error"
                            ]
                        }
                    },
                    "detail": {
                        "type": "string",
                        "description": "A human-readable description of the error."
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "400",
                            "403",
                            "404"
                        ],
                        "description": "The HTTP status code of the error."
                    }
                },
                "required": [
                    "schemas",
                    "detail",
                    "status"
                ]
            },
            "ScimSimpleMeta": {
                "title": "Metadata",
                "description": "Resource metadata.",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The URI of the resource being returned."
                    },
                    "resourceType": {
                        "enum": [
                            "ResourceType",
                            "Schema",
                            "ServiceProviderConfig",
                            "User"
                        ],
                        "type": "string",
                        "description": "The name of the resource type of the resource."
                    }
                },
                "required": [
                    "location",
                    "resourceType"
                ],
                "type": "object"
            },
            "ScimMeta": {
                "title": "Metadata",
                "description": "Resource metadata.",
                "properties": {
                    "created": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The \"DateTime\" that the resource was added to the application."
                    },
                    "lastModified": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The most recent DateTime that the details of this resource were updated at the application."
                    },
                    "location": {
                        "type": "string",
                        "description": "The URI of the resource being returned."
                    },
                    "resourceType": {
                        "enum": [
                            "ResourceType",
                            "Schema",
                            "ServiceProviderConfig",
                            "User"
                        ],
                        "type": "string",
                        "description": "The name of the resource type of the resource."
                    }
                },
                "required": [
                    "location",
                    "resourceType",
                    "created",
                    "lastModified"
                ],
                "type": "object"
            },
            "ScimUserOutputSerializer": {
                "description": "SCIM representation of a member",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the User is activated on the application."
                    },
                    "emails": {
                        "items": {
                            "type": "object",
                            "properties": {
                                "primary": {
                                    "type": "boolean"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "value",
                                "primary"
                            ]
                        },
                        "type": "array",
                        "description": "Email addresses for the User."
                    },
                    "externalId": {
                        "type": "string",
                        "description": "A String that is an identifier for the resource as defined by the provisioning client."
                    },
                    "id": {
                        "type": "string",
                        "description": "A unique identifier for a SCIM resource as defined by the application."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/ScimMeta"
                    },
                    "name": {
                        "properties": {
                            "familyName": {
                                "type": "string",
                                "description": "The family name of the User."
                            },
                            "givenName": {
                                "type": "string",
                                "description": "The given name of the User."
                            }
                        },
                        "required": [
                            "familyName",
                            "givenName"
                        ],
                        "type": "object",
                        "description": "The components of the user's name."
                    },
                    "schemas": {
                        "items": {
                            "enum": [
                                "urn:ietf:params:scim:schemas:core:2.0:User"
                            ],
                            "type": "string"
                        },
                        "type": "array",
                        "description": "the namespaces of the SCIM schemas that define the attributes present in the current JSON structure."
                    },
                    "userName": {
                        "type": "string",
                        "description": "The application's unique identifier for the user."
                    }
                },
                "required": [
                    "meta",
                    "id",
                    "externalId",
                    "userName",
                    "name",
                    "active",
                    "emails"
                ],
                "type": "object"
            },
            "ScimResouceTypeSerializer": {
                "description": "SCIM Resource Type",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human-readable description of the resource type."
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The URI of the resource being returned."
                    },
                    "id": {
                        "type": "string",
                        "description": "The resource type's unique id."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/ScimSimpleMeta"
                    },
                    "name": {
                        "type": "string",
                        "description": "The resource type name."
                    },
                    "schema": {
                        "type": "string",
                        "description": "The resource type's primary/base schema URI."
                    },
                    "schemas": {
                        "items": {
                            "enum": [
                                "urn:ietf:params:scim:schemas:core:2.0:ResourceType"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "meta",
                    "id",
                    "name",
                    "endpoint",
                    "description",
                    "schema"
                ],
                "type": "object"
            },
            "_ScimBinarySchemaAttribute": {
                "title": "Binary attribute",
                "properties": {
                    "caseExact": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "multiValued": {
                        "type": "boolean"
                    },
                    "mutability": {
                        "enum": [
                            "readOnly",
                            "readWrite",
                            "immutable",
                            "writeOnly"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "returned": {
                        "enum": [
                            "always",
                            "never",
                            "default",
                            "request"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "binary"
                        ],
                        "type": "string"
                    },
                    "uniqueness": {
                        "enum": [
                            "none",
                            "server",
                            "global"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "multiValued",
                    "description",
                    "required",
                    "mutability",
                    "returned",
                    "caseExact"
                ],
                "type": "object"
            },
            "_ScimReferenceSchemaAttribute": {
                "title": "Reference attribute",
                "properties": {
                    "caseExact": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "multiValued": {
                        "type": "boolean"
                    },
                    "mutability": {
                        "enum": [
                            "readOnly",
                            "readWrite",
                            "immutable",
                            "writeOnly"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "referenceTypes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "returned": {
                        "enum": [
                            "always",
                            "never",
                            "default",
                            "request"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "reference"
                        ],
                        "type": "string"
                    },
                    "uniqueness": {
                        "enum": [
                            "none",
                            "server",
                            "global"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "multiValued",
                    "description",
                    "required",
                    "mutability",
                    "returned",
                    "caseExact",
                    "referenceTypes"
                ],
                "type": "object"
            },
            "_ScimSchemaAttribute": {
                "title": "Attribute",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "multiValued": {
                        "type": "boolean"
                    },
                    "mutability": {
                        "enum": [
                            "readOnly",
                            "readWrite",
                            "immutable",
                            "writeOnly"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "returned": {
                        "enum": [
                            "always",
                            "never",
                            "default",
                            "request"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "boolean",
                            "decimal",
                            "integer",
                            "dateTime"
                        ],
                        "type": "string"
                    },
                    "uniqueness": {
                        "enum": [
                            "none",
                            "server",
                            "global"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "multiValued",
                    "description",
                    "required",
                    "mutability",
                    "returned"
                ],
                "type": "object"
            },
            "_ScimSchemaComplexAttribute": {
                "title": "Complex attribute",
                "properties": {
                    "caseExact": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "multiValued": {
                        "type": "boolean"
                    },
                    "mutability": {
                        "enum": [
                            "readOnly",
                            "readWrite",
                            "immutable",
                            "writeOnly"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "returned": {
                        "enum": [
                            "always",
                            "never",
                            "default",
                            "request"
                        ],
                        "type": "string"
                    },
                    "subAttributes": {
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/_ScimBinarySchemaAttribute"
                                },
                                {
                                    "$ref": "#/components/schemas/_ScimReferenceSchemaAttribute"
                                },
                                {
                                    "$ref": "#/components/schemas/_ScimStringSchemaAttribute"
                                },
                                {
                                    "$ref": "#/components/schemas/_ScimSchemaAttribute"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "complex"
                        ],
                        "type": "string"
                    },
                    "uniqueness": {
                        "enum": [
                            "none",
                            "server",
                            "global"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "multiValued",
                    "description",
                    "required",
                    "mutability",
                    "returned",
                    "subAttributes"
                ],
                "type": "object"
            },
            "_ScimStringSchemaAttribute": {
                "title": "String attribute",
                "properties": {
                    "canonicalValues": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "caseExact": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "multiValued": {
                        "type": "boolean"
                    },
                    "mutability": {
                        "enum": [
                            "readOnly",
                            "readWrite",
                            "immutable",
                            "writeOnly"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "returned": {
                        "enum": [
                            "always",
                            "never",
                            "default",
                            "request"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "string"
                        ],
                        "type": "string"
                    },
                    "uniqueness": {
                        "enum": [
                            "none",
                            "server",
                            "global"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "multiValued",
                    "description",
                    "required",
                    "mutability",
                    "returned",
                    "caseExact"
                ],
                "type": "object"
            },
            "ScimSchemaSerializer": {
                "properties": {
                    "attributes": {
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/_ScimBinarySchemaAttribute"
                                },
                                {
                                    "$ref": "#/components/schemas/_ScimSchemaComplexAttribute"
                                },
                                {
                                    "$ref": "#/components/schemas/_ScimReferenceSchemaAttribute"
                                },
                                {
                                    "$ref": "#/components/schemas/_ScimStringSchemaAttribute"
                                },
                                {
                                    "$ref": "#/components/schemas/_ScimSchemaAttribute"
                                }
                            ]
                        },
                        "description": "Attributes (see https://www.rfc-editor.org/rfc/rfc7643#section-7 for description)",
                        "type": "array"
                    },
                    "description": {
                        "description": "The schema's human-readable description.",
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique URI of the schema."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/ScimSimpleMeta"
                    },
                    "name": {
                        "description": "The schema's human-readable name.",
                        "type": "string"
                    },
                    "schemas": {
                        "items": {
                            "enum": [
                                "urn:ietf:params:scim:schemas:core:2.0:Schema"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "meta",
                    "id",
                    "name",
                    "description",
                    "attributes"
                ],
                "type": "object"
            },
            "customTag": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b"
                    },
                    "key": {
                        "type": "string",
                        "example": "env"
                    },
                    "value": {
                        "type": "string",
                        "nullable": true,
                        "example": "prod"
                    }
                }
            },
            "internalIssueRealtimeSetting": {
                "type": "object",
                "properties": {
                    "vcs_author_only": {
                        "type": "boolean",
                        "description": "Indicates whether we should send a mail for new internal incidents\n"
                    },
                    "issue_type": {
                        "type": "string",
                        "enum": [
                            "all_issues",
                            "vcs_only",
                            "ods_only"
                        ],
                        "description": "Indicates whether we should send a mail for incidents coming from a VCS or an Other Data Source\n"
                    }
                }
            },
            "weeklyRecapSetting": {
                "type": "object",
                "nullable": true
            },
            "internalIssueAccessSetting": {
                "type": "object",
                "nullable": true
            },
            "internalIssueFeedbackSetting": {
                "type": "object",
                "nullable": true
            },
            "internalIssueIgnoredValidSecretSetting": {
                "type": "object",
                "nullable": true
            },
            "healthCheckSetting": {
                "type": "object",
                "nullable": true
            },
            "teamUpdatesSetting": {
                "type": "object",
                "nullable": true
            },
            "historicalScanCompletionSetting": {
                "type": "object",
                "nullable": true
            },
            "emailSettings": {
                "type": "object",
                "properties": {
                    "private_issue_realtime": {
                        "type": "object",
                        "properties": {
                            "is_active": {
                                "type": "boolean",
                                "description": "Indicates whether we should send a mail for new internal incidents\n"
                            },
                            "settings": {
                                "$ref": "#/components/schemas/internalIssueRealtimeSetting"
                            }
                        }
                    },
                    "weekly_recap": {
                        "type": "object",
                        "properties": {
                            "is_active": {
                                "type": "boolean",
                                "description": "Indicates whether we should send a mail for the workspace's weekly recap\n"
                            },
                            "settings": {
                                "$ref": "#/components/schemas/weeklyRecapSetting"
                            }
                        }
                    },
                    "private_issue_access": {
                        "type": "object",
                        "properties": {
                            "is_active": {
                                "type": "boolean",
                                "description": "Indicates whether we should send a mail when the member gets access to an incident\n"
                            },
                            "settings": {
                                "$ref": "#/components/schemas/internalIssueAccessSetting"
                            }
                        }
                    },
                    "private_issue_feedback_submitted": {
                        "type": "object",
                        "properties": {
                            "is_active": {
                                "type": "boolean",
                                "description": "Indicates whether we should send a mail whenever a feedback is submitted\n"
                            },
                            "settings": {
                                "$ref": "#/components/schemas/internalIssueFeedbackSetting"
                            }
                        }
                    },
                    "private_issue_ignored_with_valid_secret": {
                        "type": "object",
                        "properties": {
                            "is_active": {
                                "type": "boolean",
                                "description": "Indicates whether we should send a mail whenever an incident is ignored with a valid secret\n"
                            },
                            "settings": {
                                "$ref": "#/components/schemas/internalIssueIgnoredValidSecretSetting"
                            }
                        }
                    },
                    "health_checks": {
                        "type": "object",
                        "properties": {
                            "is_active": {
                                "type": "boolean",
                                "description": "Indicates whether we should send a mail when a health check is triggered\n"
                            },
                            "settings": {
                                "$ref": "#/components/schemas/healthCheckSetting"
                            }
                        }
                    },
                    "team_updates": {
                        "type": "object",
                        "properties": {
                            "is_active": {
                                "type": "boolean",
                                "description": "Indicates whether we should send an email whenever there are updates for a team\n"
                            },
                            "settings": {
                                "$ref": "#/components/schemas/teamUpdatesSetting"
                            }
                        }
                    },
                    "historical_scan_completion": {
                        "type": "object",
                        "properties": {
                            "is_active": {
                                "type": "boolean",
                                "description": "Indicates whether we should send an email whenever an historical scan is completed\n"
                            },
                            "settings": {
                                "$ref": "#/components/schemas/historicalScanCompletionSetting"
                            }
                        }
                    }
                }
            }
        },
        "responses": {
            "MaintenanceResponse": {
                "description": "API under maintenance",
                "headers": {
                    "X-Maintenance": {
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "API maintenance",
                                "value": {
                                    "detail": "API under scheduled maintenance."
                                }
                            }
                        }
                    }
                }
            },
            "ConflictError": {
                "description": "Data conflict",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Data conflict",
                                "value": {
                                    "detail": "Request conflicts with existing data."
                                }
                            }
                        }
                    }
                }
            },
            "BadRequestError": {
                "description": "Invalid data",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Invalid data",
                                "value": {
                                    "detail": "Invalid data."
                                }
                            }
                        }
                    }
                }
            },
            "UnauthorizedError": {
                "description": "Invalid API key",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Invalid APIKey",
                                "value": {
                                    "detail": "Invalid API key."
                                }
                            }
                        }
                    }
                }
            },
            "PermissionDeniedError": {
                "description": "Permission denied",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Permission denied",
                                "value": {
                                    "detail": "Permission denied."
                                }
                            }
                        }
                    }
                }
            },
            "OverQuotaError": {
                "description": "Quota limit reached",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Quota limit reached.",
                                "value": {
                                    "detail": "Quota limit reached."
                                }
                            }
                        }
                    }
                }
            },
            "ScanningError": {
                "description": "Scanning error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Scan did not succeed.",
                                "value": {
                                    "detail": "Scan did not succeed."
                                }
                            }
                        }
                    }
                }
            }
        },
        "parameters": {
            "incident_id": {
                "name": "incident_id",
                "in": "path",
                "required": true,
                "description": "The id of the incident to retrieve",
                "schema": {
                    "type": "integer"
                }
            },
            "honeytoken_id": {
                "name": "honeytoken_id",
                "in": "path",
                "required": true,
                "description": "The id of the honeytoken to retrieve",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "invitation_id": {
                "name": "invitation_id",
                "in": "path",
                "required": true,
                "description": "The id of the invitation to retrieve",
                "schema": {
                    "type": "integer"
                }
            },
            "team_id": {
                "name": "team_id",
                "in": "path",
                "required": true,
                "description": "The id of the team",
                "schema": {
                    "type": "integer"
                }
            },
            "member_id": {
                "name": "member_id",
                "in": "path",
                "required": true,
                "description": "The id of the workspace member",
                "schema": {
                    "type": "integer"
                }
            },
            "cursor": {
                "name": "cursor",
                "in": "query",
                "description": "Pagination cursor.",
                "schema": {
                    "type": "string"
                }
            },
            "page": {
                "deprecated": true,
                "name": "page",
                "in": "query",
                "description": "Page number.",
                "schema": {
                    "type": "integer",
                    "minimum": 0,
                    "default": 1
                }
            },
            "per_page": {
                "name": "per_page",
                "in": "query",
                "description": "Number of items to list per page.",
                "schema": {
                    "type": "integer",
                    "default": 20,
                    "minimum": 1,
                    "maximum": 100
                }
            },
            "date_before": {
                "in": "query",
                "name": "date_before",
                "schema": {
                    "type": "string",
                    "format": "datetime",
                    "description": "Entries found before this date.",
                    "example": "2019-08-30T14:15:22Z"
                }
            },
            "date_after": {
                "in": "query",
                "name": "date_after",
                "schema": {
                    "type": "string",
                    "format": "datetime",
                    "description": "Entries found after this date.",
                    "example": "2019-08-22T14:15:22Z"
                }
            },
            "resource_id": {
                "name": "resource_id",
                "in": "path",
                "required": true,
                "description": "The id of the resource of the access",
                "schema": {
                    "type": "integer"
                }
            },
            "resource_type": {
                "name": "resource_type",
                "in": "path",
                "required": true,
                "description": "The kind of resource of the access",
                "schema": {
                    "type": "string",
                    "enum": [
                        "secret-incidents"
                    ]
                }
            },
            "identity_id": {
                "name": "identity_id",
                "in": "path",
                "required": true,
                "description": "The id of the identity of the access",
                "schema": {
                    "type": "integer"
                }
            },
            "identity_type": {
                "name": "identity_type",
                "in": "path",
                "required": true,
                "description": "The kind of identity of the access",
                "schema": {
                    "type": "string",
                    "enum": [
                        "teams",
                        "invitations",
                        "members"
                    ]
                }
            },
            "ip_allowlist_rule_id": {
                "name": "ip_allowlist_rule_id",
                "in": "path",
                "required": true,
                "description": "The id of the IP allowlist rule",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "custom_tag_id": {
                "name": "custom_tag_id",
                "in": "path",
                "required": true,
                "description": "The id of the custom tag",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "headers": {
            "xPage": {
                "deprecated": true,
                "schema": {
                    "description": "The index of the current page.",
                    "minimum": 1
                }
            },
            "xPerPage": {
                "schema": {
                    "type": "integer",
                    "description": "The number of items per page.",
                    "default": 20,
                    "minimum": 1,
                    "maximum": 100
                }
            },
            "xNextPage": {
                "deprecated": true,
                "schema": {
                    "type": "integer",
                    "description": "The index of the next page.",
                    "minimum": 1
                }
            },
            "xPrevPage": {
                "deprecated": true,
                "schema": {
                    "type": "integer",
                    "description": "The index of the previous page.",
                    "minimum": 1
                }
            },
            "xTotal": {
                "deprecated": true,
                "schema": {
                    "type": "integer",
                    "description": "The total number of items.",
                    "minimum": 1
                }
            },
            "xTotalPages": {
                "deprecated": true,
                "schema": {
                    "type": "integer",
                    "description": "The total number of pages.",
                    "minimum": 1
                }
            }
        },
        "securitySchemes": {
            "api-key": {
                "description": "**Usage:** `Token <api-key>` in `Authorization` header.",
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "Token <api-key>"
            }
        }
    },
    "security": [
        {
            "api-key": []
        }
    ]
}