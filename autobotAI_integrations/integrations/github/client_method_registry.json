{
    "github": {
        "FIX_REPO_GET_GIT_REF": "No details available",
        "close": "Close connections to the server. Alternatively, use the Github        object as a context manager:        .. code-block:: python          with github.Github(...) as gh:            # do something",
        "create_from_raw_data": "Creates an object from raw_data previously obtained by :attr:`GithubObject.raw_data`, and optionally headers        previously obtained by :attr:`GithubObject.raw_headers`.        :param klass: the class of the object to create        :param raw_data: dict        :param headers: dict        :rtype: instance of class ``klass``",
        "default_retry": "A Github-specific implementation of `urllib3.Retry`    This retries 403 responses if they are retry-able. Github requests are retry-able when    the response provides a `\"Retry-After\"` header, or the content indicates a rate limit error.    By default, response codes 403, and 500 up to 599 are retried. This can be configured    via the `status_forcelist` argument.    By default, all methods defined in `Retry.DEFAULT_ALLOWED_METHODS` are retried, plus GET and POST.    This can be configured via the `allowed_methods` argument.",
        "dump": "Dumps (pickles) a PyGithub object to a file-like object. Some effort is made to not pickle sensitive        information like the Github credentials used in the :class:`Github` instance. But NO EFFORT is made to remove        sensitive information from the object's attributes.        :param obj: the object to pickle :param file: the file-like object to pickle to :param protocol: the        `pickling protocol <https://python.readthedocs.io/en/latest/library/pickle.html#data-stream-format>`_         :param obj: the object to pickle :param file: the file-like object to pickle to :param protocol: the        `pickling protocol <https://python.readthedocs.io/en/latest/library/pickle.html#data-         :param obj: the object to pickle :param file: the file-like object to pickle to :param protocol: the        `pickling protocol <https://python.readthedocs.io/en/latest/library/pickle.html#data-             stream-format>`_ :param obj: the object to pickle :param file: the file-like object to pickle to :param        protocol: the        `pickling protocol <https://python.readthedocs.io/en/latest/library/pickle.html#data-        :param obj: the object to pickle        :param file: the file-like object to pickle to        :param protocol: the `pickling protocol <https://python.readthedocs.io/en/latest/library/pickle.html#data-            stream-format>`_        :param obj: the object to pickle        :param file: the file-like object to pickle to        :param protocol: the `pickling protocol <https://python.readthedocs.io/en/latest/library/pickle.html#data-        :param obj: the object to pickle        :param file: the file-like object to pickle to        :param protocol: the `pickling protocol <https://python.readthedocs.io/en/latest/library/pickle.html#data-            stream-format>`_        :param obj: the object to pickle        :param file: the file-like object to pickle to        :param protocol: the `pickling protocol <https://python.readthedocs.io/en/latest/library/pickle.html#data-            stream-format>`_",
        "get_app": ":calls: `GET /apps/{slug} <https://docs.github.com/en/rest/reference/apps>`_ or `GET /app <https://docs.github.com/en/rest/reference/apps>`_",
        "get_emojis": ":calls: `GET /emojis <https://docs.github.com/en/rest/reference/emojis>`_        :rtype: dictionary of type => url for emoji`",
        "get_enterprise": ":calls: `GET /enterprises/{enterprise} <https://docs.github.com/en/enterprise-cloud@latest/rest/enterprise-admin>`_        :param enterprise: string        :rtype: :class:`Enterprise`",
        "get_events": ":calls: `GET /events <https://docs.github.com/en/rest/reference/activity#list-public-events>`_",
        "get_gist": ":calls: `GET /gists/{id} <https://docs.github.com/en/rest/reference/gists>`_",
        "get_gists": ":calls: `GET /gists/public <https://docs.github.com/en/rest/reference/gists>`_",
        "get_gitignore_template": ":calls: `GET /gitignore/templates/{name} <https://docs.github.com/en/rest/reference/gitignore>`_",
        "get_gitignore_templates": ":calls: `GET /gitignore/templates <https://docs.github.com/en/rest/reference/gitignore>`_",
        "get_global_advisories": ":calls: `GET /advisories <https://docs.github.com/en/rest/security-advisories/global-advisories>`        :param type: Optional string        :param ghsa_id: Optional string        :param cve_id: Optional string        :param ecosystem: Optional string        :param severity: Optional string        :param cwes: Optional comma separated string or list of integer or string        :param is_withdrawn: Optional bool        :param affects: Optional comma separated string or list of string        :param published: Optional string        :param updated: Optional string        :param modified: Optional string        :param before: Optional string        :param after: Optional string        :param sort: Optional string        :param direction: Optional string        :rtype: :class:`github.PaginatedList.PaginatedList` of :class:`github.GlobalAdvisory.GlobalAdvisory`",
        "get_global_advisory": ":calls: `GET /advisories/{ghsa_id} <https://docs.github.com/en/rest/security-advisories/global-advisories>`_        :param ghsa_id: string        :rtype: :class:`github.GlobalAdvisory.GlobalAdvisory`",
        "get_hook": ":calls: `GET /hooks/{name} <https://docs.github.com/en/rest/reference/repos#webhooks>`_",
        "get_hook_deliveries": ":calls: `GET /hooks/{hook_id}/deliveries <https://docs.github.com/en/rest/reference/repos#webhooks>`_        :param hook_id: integer        :rtype: list of :class:`HookDeliverySummary`",
        "get_hook_delivery": ":calls: `GET /hooks/{hook_id}/deliveries/{delivery_id} <https://docs.github.com/en/rest/reference/repos#webhooks>`_        :param hook_id: integer        :param delivery_id: integer        :rtype: :class:`HookDelivery`",
        "get_hooks": ":calls: `GET /hooks <https://docs.github.com/en/rest/reference/repos#webhooks>`_        :rtype: list of :class:`github.HookDescription.HookDescription`",
        "get_license": ":calls: `GET /license/{license} <https://docs.github.com/en/rest/reference/licenses#get-a-license>`_",
        "get_licenses": ":calls: `GET /licenses <https://docs.github.com/en/rest/reference/licenses#get-all-commonly-used-licenses>`_",
        "get_oauth_application": "No details available",
        "get_organization": ":calls: `GET /orgs/{org} <https://docs.github.com/en/rest/reference/orgs>`_",
        "get_organizations": ":calls: `GET /organizations <https://docs.github.com/en/rest/reference/orgs#list-organizations>`_",
        "get_project": ":calls: `GET /projects/{project_id} <https://docs.github.com/en/rest/reference/projects#get-a-project>`_",
        "get_project_column": ":calls: `GET /projects/columns/{column_id} <https://docs.github.com/en/rest/reference/projects#get-a-project-column>`_",
        "get_rate_limit": "Rate limit status for different resources (core/search/graphql).        :calls:`GET /rate_limit <https://docs.github.com/en/rest/reference/rate-limit>`_",
        "get_repo": ":calls: `GET /repos/{owner}/{repo} <https://docs.github.com/en/rest/reference/repos>`_ or `GET /repositories/{id} <https://docs.github.com/en/rest/reference/repos>`_",
        "get_repos": ":calls: `GET /repositories <https://docs.github.com/en/rest/reference/repos#list-public-repositories>`_        :param since: integer        :param visibility: string ('all','public')",
        "get_repository_discussion": "No details available",
        "get_user": ":calls: `GET /users/{user} <https://docs.github.com/en/rest/reference/users>`_ or `GET /user <https://docs.github.com/en/rest/reference/users>`_",
        "get_user_by_id": ":calls: `GET /user/{id} <https://docs.github.com/en/rest/reference/users>`_        :param user_id: int        :rtype: :class:`github.NamedUser.NamedUser`",
        "get_users": ":calls: `GET /users <https://docs.github.com/en/rest/reference/users>`_",
        "load": "Loads (unpickles) a PyGithub object from a file-like object.        :param f: the file-like object to unpickle from        :return: the unpickled object",
        "oauth_scopes": ":type: list of string",
        "per_page": "No details available",
        "rate_limiting": "First value is requests remaining, second value is request limit.",
        "rate_limiting_resettime": "Unix timestamp indicating when rate limiting will reset.",
        "render_markdown": ":calls: `POST /markdown <https://docs.github.com/en/rest/reference/markdown>`_        :param text: string        :param context: :class:`github.Repository.Repository`        :rtype: string",
        "requester": "Return my Requester object.        For example, to make requests to API endpoints not yet supported by PyGitHub.",
        "search_code": ":calls: `GET /search/code <https://docs.github.com/en/rest/reference/search>`_        :param query: string        :param sort: string ('indexed')        :param order: string ('asc', 'desc')        :param highlight: boolean (True, False)        :param qualifiers: keyword dict query qualifiers        :rtype: :class:`PaginatedList` of :class:`github.ContentFile.ContentFile`",
        "search_commits": ":calls: `GET /search/commits <https://docs.github.com/en/rest/reference/search>`_        :param query: string        :param sort: string ('author-date', 'committer-date')        :param order: string ('asc', 'desc')        :param qualifiers: keyword dict query qualifiers        :rtype: :class:`PaginatedList` of :class:`github.Commit.Commit`",
        "search_issues": ":calls: `GET /search/issues <https://docs.github.com/en/rest/reference/search>`_        :param query: string        :param sort: string ('comments', 'created', 'updated')        :param order: string ('asc', 'desc')        :param qualifiers: keyword dict query qualifiers        :rtype: :class:`PaginatedList` of :class:`github.Issue.Issue`",
        "search_repositories": ":calls: `GET /search/repositories <https://docs.github.com/en/rest/reference/search>`_        :param query: string        :param sort: string ('stars', 'forks', 'updated')        :param order: string ('asc', 'desc')        :param qualifiers: keyword dict query qualifiers",
        "search_topics": ":calls: `GET /search/topics <https://docs.github.com/en/rest/reference/search>`_        :param query: string        :param qualifiers: keyword dict query qualifiers        :rtype: :class:`PaginatedList` of :class:`github.Topic.Topic`",
        "search_users": ":calls: `GET /search/users <https://docs.github.com/en/rest/reference/search>`_        :param query: string        :param sort: string ('followers', 'repositories', 'joined')        :param order: string ('asc', 'desc')        :param qualifiers: keyword dict query qualifiers        :rtype: :class:`PaginatedList` of :class:`github.NamedUser.NamedUser`",
        "withLazy": "Create a Github instance with identical configuration but the given lazy setting.        :param lazy: completable objects created from this instance are lazy, as well as completable objects created            from those, and so on        :return: new Github instance"
    }
}