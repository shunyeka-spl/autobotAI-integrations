{
    "openapi": "3.0.3",
    "info": {
        "version": "1.1.4",
        "title": "GitHub v3 REST API",
        "description": "GitHub's v3 REST API.",
        "license": {
            "name": "MIT",
            "url": "https://spdx.org/licenses/MIT"
        },
        "termsOfService": "https://docs.github.com/articles/github-terms-of-service",
        "contact": {
            "name": "Support",
            "url": "https://support.github.com/contact?tags=dotcom-rest-api"
        },
        "x-github-plan": "api.github.com"
    },
    "tags": [
        {
            "name": "actions",
            "description": "Endpoints to manage GitHub Actions using the REST API."
        },
        {
            "name": "activity",
            "description": "Activity APIs provide access to notifications, subscriptions, and timelines."
        },
        {
            "name": "apps",
            "description": "Information for integrations and installations."
        },
        {
            "name": "billing",
            "description": "Monitor charges and usage from Actions and Packages."
        },
        {
            "name": "checks",
            "description": "Rich interactions with checks run by your integrations."
        },
        {
            "name": "code-scanning",
            "description": "Retrieve code scanning alerts from a repository."
        },
        {
            "name": "codes-of-conduct",
            "description": "Insight into codes of conduct for your communities."
        },
        {
            "name": "emojis",
            "description": "List emojis available to use on GitHub."
        },
        {
            "name": "dependabot",
            "description": "Endpoints to manage Dependabot."
        },
        {
            "name": "dependency-graph",
            "description": "Endpoints to access Dependency Graph features."
        },
        {
            "name": "gists",
            "description": "View, modify your gists."
        },
        {
            "name": "git",
            "description": "Raw Git functionality."
        },
        {
            "name": "gitignore",
            "description": "View gitignore templates"
        },
        {
            "name": "issues",
            "description": "Interact with GitHub Issues."
        },
        {
            "name": "licenses",
            "description": "View various OSS licenses."
        },
        {
            "name": "markdown",
            "description": "Render GitHub flavored markdown"
        },
        {
            "name": "merge-queue",
            "description": "Interact with GitHub Merge Queues."
        },
        {
            "name": "meta",
            "description": "Endpoints that give information about the API."
        },
        {
            "name": "migrations",
            "description": "Move projects to or from GitHub."
        },
        {
            "name": "oidc",
            "description": "Endpoints to manage GitHub OIDC configuration using the REST API."
        },
        {
            "name": "orgs",
            "description": "Interact with GitHub Orgs."
        },
        {
            "name": "packages",
            "description": "Manage packages for authenticated users and organizations."
        },
        {
            "name": "projects",
            "description": "Interact with GitHub Projects."
        },
        {
            "name": "pulls",
            "description": "Interact with GitHub Pull Requests."
        },
        {
            "name": "rate-limit",
            "description": "Check your current rate limit status"
        },
        {
            "name": "reactions",
            "description": "Interact with reactions to various GitHub entities."
        },
        {
            "name": "repos",
            "description": "Interact with GitHub Repos."
        },
        {
            "name": "search",
            "description": "Look for stuff on GitHub."
        },
        {
            "name": "secret-scanning",
            "description": "Retrieve secret scanning alerts from a repository."
        },
        {
            "name": "teams",
            "description": "Interact with GitHub Teams."
        },
        {
            "name": "users",
            "description": "Interact with and view information about users and also current user."
        },
        {
            "name": "codespaces",
            "description": "Endpoints to manage Codespaces using the REST API."
        },
        {
            "name": "copilot",
            "description": "Endpoints to manage Copilot using the REST API."
        },
        {
            "name": "security-advisories",
            "description": "Manage security advisories."
        },
        {
            "name": "interactions",
            "description": "Owner or admin management of users interactions."
        },
        {
            "name": "classroom",
            "description": "Interact with GitHub Classroom."
        },
        {
            "name": "desktop",
            "description": "Desktop specific endpoints."
        },
        {
            "name": "enterprise-teams",
            "description": "Endpoints to manage GitHub Enterprise Teams."
        },
        {
            "name": "code-security",
            "description": "Endpoints to manage Code security using the REST API."
        },
        {
            "name": "private-registries",
            "description": "Manage private registry configurations."
        },
        {
            "name": "hosted-compute",
            "description": "Manage hosted compute networking resources."
        }
    ],
    "externalDocs": {
        "description": "GitHub v3 REST API",
        "url": "https://docs.github.com/rest/"
    },
    "paths": {
        "/": {
            "get": {
                "summary": "GitHub API Root",
                "description": "Get Hypermedia links to resources accessible in GitHub's REST API",
                "tags": [
                    "meta"
                ],
                "operationId": "meta/root"
            }
        },
        "/advisories": {
            "get": {
                "summary": "List global security advisories",
                "description": "Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.\n\nBy default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see \"[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories).\"",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/list-global-advisories",
                "parameters": [
                    {
                        "name": "ghsa_id",
                        "in": "query",
                        "description": "If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "reviewed",
                                "malware",
                                "unreviewed"
                            ],
                            "default": "reviewed"
                        }
                    },
                    {
                        "name": "cve_id",
                        "description": "If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ecosystem",
                        "in": "query",
                        "description": "If specified, only advisories for these ecosystems will be returned.",
                        "schema": {
                            "type": "string",
                            "description": "The package's language or package management ecosystem.",
                            "enum": [
                                "rubygems",
                                "npm",
                                "pip",
                                "maven",
                                "nuget",
                                "composer",
                                "go",
                                "rust",
                                "erlang",
                                "actions",
                                "pub",
                                "other",
                                "swift"
                            ]
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "description": "If specified, only advisories with these severities will be returned.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "unknown",
                                "low",
                                "medium",
                                "high",
                                "critical"
                            ]
                        }
                    },
                    {
                        "name": "cwes",
                        "in": "query",
                        "description": "If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.\n\nExample: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "is_withdrawn",
                        "in": "query",
                        "description": "Whether to only return advisories that have been withdrawn.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "affects",
                        "in": "query",
                        "description": "If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified.\nIf the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.\n\nExample: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "maxItems": 1000,
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "published",
                        "in": "query",
                        "description": "If specified, only return advisories that were published on a date or date range.\n\nFor more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "updated",
                        "in": "query",
                        "description": "If specified, only return advisories that were updated on a date or date range.\n\nFor more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modified",
                        "description": "If specified, only show advisories that were updated or published on a date or date range.\n\nFor more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "epss_percentage",
                        "in": "query",
                        "description": "If specified, only return advisories that have an EPSS percentage score that matches the provided value.\nThe EPSS percentage represents the likelihood of a CVE being exploited.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "epss_percentile",
                        "in": "query",
                        "description": "If specified, only return advisories that have an EPSS percentile score that matches the provided value.\nThe EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 30
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "updated",
                                "published",
                                "epss_percentage",
                                "epss_percentile"
                            ],
                            "default": "published"
                        }
                    }
                ]
            }
        },
        "/advisories/{ghsa_id}": {
            "get": {
                "summary": "Get a global security advisory",
                "description": "Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/get-global-advisory",
                "parameters": [
                    {
                        "name": "ghsa_id",
                        "description": "The GHSA (GitHub Security Advisory) identifier of the advisory.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/app": {
            "get": {
                "summary": "Get the authenticated app",
                "description": "Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)\" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-authenticated",
                "parameters": []
            }
        },
        "/app-manifests/{code}/conversions": {
            "post": {
                "summary": "Create a GitHub App from a manifest",
                "description": "Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/create-from-manifest",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/app/hook/config": {
            "get": {
                "summary": "Get a webhook configuration for an app",
                "description": "Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-webhook-config-for-app"
            },
            "patch": {
                "summary": "Update a webhook configuration for an app",
                "description": "Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/update-webhook-config-for-app",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "The URL to which the payloads will be delivered.",
                                        "example": "https://example.com/webhook",
                                        "format": "uri"
                                    },
                                    "content_type": {
                                        "type": "string",
                                        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                                        "example": "\"json\""
                                    },
                                    "secret": {
                                        "type": "string",
                                        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
                                        "example": "\"********\""
                                    },
                                    "insecure_ssl": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                                                "example": "\"0\""
                                            },
                                            {
                                                "type": "number"
                                            }
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content_type": "json",
                                        "insecure_ssl": "0",
                                        "secret": "********",
                                        "url": "https://example.com/webhook"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/hook/deliveries": {
            "get": {
                "summary": "List deliveries for an app webhook",
                "description": "Returns a list of webhook deliveries for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-webhook-deliveries",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/app/hook/deliveries/{delivery_id}": {
            "get": {
                "summary": "Get a delivery for an app webhook",
                "description": "Returns a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-webhook-delivery",
                "parameters": [
                    {
                        "name": "delivery_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/app/hook/deliveries/{delivery_id}/attempts": {
            "post": {
                "summary": "Redeliver a delivery for an app webhook",
                "description": "Redeliver a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/redeliver-webhook-delivery",
                "parameters": [
                    {
                        "name": "delivery_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/app/installation-requests": {
            "get": {
                "summary": "List installation requests for the authenticated app",
                "description": "Lists all the pending installation requests for the authenticated GitHub App.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-installation-requests-for-authenticated-app",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/app/installations": {
            "get": {
                "summary": "List installations for the authenticated app",
                "description": "The permissions the installation has are included under the `permissions` key.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-installations",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "outdated",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/app/installations/{installation_id}": {
            "get": {
                "summary": "Get an installation for the authenticated app",
                "description": "Enables an authenticated GitHub App to find an installation's information using the installation id.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-installation",
                "parameters": [
                    {
                        "name": "installation_id",
                        "description": "The unique identifier of the installation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "examples": {
                            "default": {
                                "value": 1
                            }
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete an installation for the authenticated app",
                "description": "Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)\" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/delete-installation",
                "parameters": [
                    {
                        "name": "installation_id",
                        "description": "The unique identifier of the installation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "examples": {
                            "default": {
                                "value": 1
                            }
                        }
                    }
                ]
            }
        },
        "/app/installations/{installation_id}/access_tokens": {
            "post": {
                "summary": "Create an installation access token for an app",
                "description": "Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.\n\nOptionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.\n\nOptionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/create-installation-access-token",
                "parameters": [
                    {
                        "name": "installation_id",
                        "description": "The unique identifier of the installation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "examples": {
                            "default": {
                                "value": 1
                            }
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "repositories": {
                                        "description": "List of repository names that the token should have access to",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "rails"
                                        }
                                    },
                                    "repository_ids": {
                                        "description": "List of repository IDs that the token should have access to",
                                        "example": [
                                            1
                                        ],
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "permissions": {
                                        "title": "App Permissions",
                                        "type": "object",
                                        "description": "The permissions granted to the user access token.",
                                        "properties": {
                                            "actions": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "administration": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "checks": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for checks on code.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "codespaces": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to create, edit, delete, and list Codespaces.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "contents": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "dependabot_secrets": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage Dependabot secrets.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "deployments": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for deployments and deployment statuses.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "environments": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for managing repository environments.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "issues": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "metadata": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "packages": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for packages published to GitHub Packages.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "pages": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "pull_requests": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "repository_custom_properties": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "repository_hooks": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "repository_projects": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage repository projects, columns, and cards.",
                                                "enum": [
                                                    "read",
                                                    "write",
                                                    "admin"
                                                ]
                                            },
                                            "secret_scanning_alerts": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage secret scanning alerts.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "secrets": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage repository secrets.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "security_events": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "single_file": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage just a single file.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "statuses": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for commit statuses.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "vulnerability_alerts": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage Dependabot alerts.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "workflows": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to update GitHub Actions workflow files.",
                                                "enum": [
                                                    "write"
                                                ]
                                            },
                                            "members": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for organization teams and members.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_administration": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage access to an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_custom_roles": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for custom repository roles management.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_custom_org_roles": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for custom organization roles management.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_custom_properties": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for custom property management.",
                                                "enum": [
                                                    "read",
                                                    "write",
                                                    "admin"
                                                ]
                                            },
                                            "organization_copilot_seat_management": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.",
                                                "enum": [
                                                    "write"
                                                ]
                                            },
                                            "organization_announcement_banners": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage announcement banners for an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_events": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view events triggered by an activity in an organization.",
                                                "enum": [
                                                    "read"
                                                ]
                                            },
                                            "organization_hooks": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_personal_access_tokens": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_personal_access_token_requests": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_plan": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for viewing an organization's plan.",
                                                "enum": [
                                                    "read"
                                                ]
                                            },
                                            "organization_projects": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage organization projects and projects public preview (where available).",
                                                "enum": [
                                                    "read",
                                                    "write",
                                                    "admin"
                                                ]
                                            },
                                            "organization_packages": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for organization packages published to GitHub Packages.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_secrets": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage organization secrets.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_self_hosted_runners": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_user_blocking": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage users blocked by the organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "team_discussions": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage team discussions and related comments.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "email_addresses": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the email addresses belonging to a user.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "followers": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the followers belonging to a user.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "git_ssh_keys": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage git SSH keys.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "gpg_keys": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage GPG keys belonging to a user.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "interaction_limits": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage interaction limits on a repository.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "profile": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the profile settings belonging to a user.",
                                                "enum": [
                                                    "write"
                                                ]
                                            },
                                            "starring": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to list and manage repositories a user is starring.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            }
                                        },
                                        "example": {
                                            "contents": "read",
                                            "issues": "read",
                                            "deployments": "write",
                                            "single_file": "read"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "repositories": [
                                            "Hello-World"
                                        ],
                                        "permissions": {
                                            "issues": "write",
                                            "contents": "read"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/installations/{installation_id}/suspended": {
            "put": {
                "summary": "Suspend an app installation",
                "description": "Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/suspend-installation",
                "parameters": [
                    {
                        "name": "installation_id",
                        "description": "The unique identifier of the installation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "examples": {
                            "default": {
                                "value": 1
                            }
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Unsuspend an app installation",
                "description": "Removes a GitHub App installation suspension.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/unsuspend-installation",
                "parameters": [
                    {
                        "name": "installation_id",
                        "description": "The unique identifier of the installation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "examples": {
                            "default": {
                                "value": 1
                            }
                        }
                    }
                ]
            }
        },
        "/applications/{client_id}/grant": {
            "delete": {
                "summary": "Delete an app authorization",
                "description": "OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\nDeleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
                "operationId": "apps/delete-authorization",
                "tags": [
                    "apps"
                ],
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "required": true,
                        "description": "The client ID of the GitHub app.",
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "default": {
                                "value": "Iv1.8a61f9b3a7aba766"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "access_token": {
                                        "type": "string",
                                        "description": "The OAuth access token used to authenticate to the GitHub API."
                                    }
                                },
                                "required": [
                                    "access_token"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/applications/{client_id}/token": {
            "post": {
                "summary": "Check a token",
                "description": "OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return `404 NOT FOUND`.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/check-token",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "required": true,
                        "description": "The client ID of the GitHub app.",
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "default": {
                                "value": "Iv1.8a61f9b3a7aba766"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "access_token": {
                                        "description": "The access_token of the OAuth or GitHub application.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "access_token"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Reset a token",
                "description": "OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. Invalid tokens will return `404 NOT FOUND`.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/reset-token",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "required": true,
                        "description": "The client ID of the GitHub app.",
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "default": {
                                "value": "Iv1.8a61f9b3a7aba766"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "access_token": {
                                        "description": "The access_token of the OAuth or GitHub application.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "access_token"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an app token",
                "description": "OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/delete-token",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "required": true,
                        "description": "The client ID of the GitHub app.",
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "default": {
                                "value": "Iv1.8a61f9b3a7aba766"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "access_token": {
                                        "type": "string",
                                        "description": "The OAuth access token used to authenticate to the GitHub API."
                                    }
                                },
                                "required": [
                                    "access_token"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/applications/{client_id}/token/scoped": {
            "post": {
                "summary": "Create a scoped access token",
                "description": "Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify\nwhich repositories the token can access and which permissions are granted to the\ntoken.\n\nInvalid tokens will return `404 NOT FOUND`.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/scope-token",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "path",
                        "required": true,
                        "description": "The client ID of the GitHub app.",
                        "schema": {
                            "type": "string"
                        },
                        "examples": {
                            "default": {
                                "value": "Iv1.8a61f9b3a7aba766"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "access_token": {
                                        "type": "string",
                                        "description": "The access token used to authenticate to the GitHub API.",
                                        "example": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                                    },
                                    "target": {
                                        "description": "The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.",
                                        "type": "string",
                                        "example": "octocat"
                                    },
                                    "target_id": {
                                        "description": "The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.",
                                        "example": 1,
                                        "type": "integer"
                                    },
                                    "repositories": {
                                        "description": "The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "rails"
                                        }
                                    },
                                    "repository_ids": {
                                        "description": "The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.",
                                        "example": [
                                            1
                                        ],
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "permissions": {
                                        "title": "App Permissions",
                                        "type": "object",
                                        "description": "The permissions granted to the user access token.",
                                        "properties": {
                                            "actions": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "administration": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "checks": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for checks on code.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "codespaces": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to create, edit, delete, and list Codespaces.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "contents": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "dependabot_secrets": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage Dependabot secrets.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "deployments": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for deployments and deployment statuses.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "environments": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for managing repository environments.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "issues": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "metadata": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "packages": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for packages published to GitHub Packages.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "pages": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "pull_requests": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "repository_custom_properties": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "repository_hooks": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "repository_projects": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage repository projects, columns, and cards.",
                                                "enum": [
                                                    "read",
                                                    "write",
                                                    "admin"
                                                ]
                                            },
                                            "secret_scanning_alerts": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage secret scanning alerts.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "secrets": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage repository secrets.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "security_events": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "single_file": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage just a single file.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "statuses": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for commit statuses.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "vulnerability_alerts": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage Dependabot alerts.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "workflows": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to update GitHub Actions workflow files.",
                                                "enum": [
                                                    "write"
                                                ]
                                            },
                                            "members": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for organization teams and members.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_administration": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage access to an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_custom_roles": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for custom repository roles management.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_custom_org_roles": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for custom organization roles management.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_custom_properties": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for custom property management.",
                                                "enum": [
                                                    "read",
                                                    "write",
                                                    "admin"
                                                ]
                                            },
                                            "organization_copilot_seat_management": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.",
                                                "enum": [
                                                    "write"
                                                ]
                                            },
                                            "organization_announcement_banners": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage announcement banners for an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_events": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view events triggered by an activity in an organization.",
                                                "enum": [
                                                    "read"
                                                ]
                                            },
                                            "organization_hooks": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_personal_access_tokens": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_personal_access_token_requests": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_plan": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for viewing an organization's plan.",
                                                "enum": [
                                                    "read"
                                                ]
                                            },
                                            "organization_projects": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage organization projects and projects public preview (where available).",
                                                "enum": [
                                                    "read",
                                                    "write",
                                                    "admin"
                                                ]
                                            },
                                            "organization_packages": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token for organization packages published to GitHub Packages.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_secrets": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage organization secrets.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_self_hosted_runners": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "organization_user_blocking": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage users blocked by the organization.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "team_discussions": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage team discussions and related comments.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "email_addresses": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the email addresses belonging to a user.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "followers": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the followers belonging to a user.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "git_ssh_keys": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage git SSH keys.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "gpg_keys": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage GPG keys belonging to a user.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "interaction_limits": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to view and manage interaction limits on a repository.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            },
                                            "profile": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to manage the profile settings belonging to a user.",
                                                "enum": [
                                                    "write"
                                                ]
                                            },
                                            "starring": {
                                                "type": "string",
                                                "description": "The level of permission to grant the access token to list and manage repositories a user is starring.",
                                                "enum": [
                                                    "read",
                                                    "write"
                                                ]
                                            }
                                        },
                                        "example": {
                                            "contents": "read",
                                            "issues": "read",
                                            "deployments": "write",
                                            "single_file": "read"
                                        }
                                    }
                                },
                                "required": [
                                    "access_token"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a",
                                        "target": "octocat",
                                        "permissions": {
                                            "metadata": "read",
                                            "issues": "write",
                                            "contents": "read"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_slug}": {
            "get": {
                "summary": "Get an app",
                "description": "> [!NOTE]\n> The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-by-slug",
                "parameters": [
                    {
                        "name": "app_slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/assignments/{assignment_id}": {
            "get": {
                "summary": "Get an assignment",
                "description": "Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.",
                "tags": [
                    "classroom"
                ],
                "operationId": "classroom/get-an-assignment",
                "parameters": [
                    {
                        "name": "assignment_id",
                        "description": "The unique identifier of the classroom assignment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/assignments/{assignment_id}/accepted_assignments": {
            "get": {
                "summary": "List accepted assignments for an assignment",
                "description": "Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.",
                "tags": [
                    "classroom"
                ],
                "operationId": "classroom/list-accepted-assignments-for-an-assignment",
                "parameters": [
                    {
                        "name": "assignment_id",
                        "description": "The unique identifier of the classroom assignment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/assignments/{assignment_id}/grades": {
            "get": {
                "summary": "Get assignment grades",
                "description": "Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.",
                "tags": [
                    "classroom"
                ],
                "operationId": "classroom/get-assignment-grades",
                "parameters": [
                    {
                        "name": "assignment_id",
                        "description": "The unique identifier of the classroom assignment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/classrooms": {
            "get": {
                "summary": "List classrooms",
                "description": "Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.",
                "tags": [
                    "classroom"
                ],
                "operationId": "classroom/list-classrooms",
                "parameters": [
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/classrooms/{classroom_id}": {
            "get": {
                "summary": "Get a classroom",
                "description": "Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.",
                "tags": [
                    "classroom"
                ],
                "operationId": "classroom/get-a-classroom",
                "parameters": [
                    {
                        "name": "classroom_id",
                        "description": "The unique identifier of the classroom.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/classrooms/{classroom_id}/assignments": {
            "get": {
                "summary": "List assignments for a classroom",
                "description": "Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.",
                "tags": [
                    "classroom"
                ],
                "operationId": "classroom/list-assignments-for-a-classroom",
                "parameters": [
                    {
                        "name": "classroom_id",
                        "description": "The unique identifier of the classroom.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/codes_of_conduct": {
            "get": {
                "summary": "Get all codes of conduct",
                "description": "Returns array of all GitHub's codes of conduct.",
                "tags": [
                    "codes-of-conduct"
                ],
                "operationId": "codes-of-conduct/get-all-codes-of-conduct",
                "parameters": []
            }
        },
        "/codes_of_conduct/{key}": {
            "get": {
                "summary": "Get a code of conduct",
                "description": "Returns information about the specified GitHub code of conduct.",
                "tags": [
                    "codes-of-conduct"
                ],
                "operationId": "codes-of-conduct/get-conduct-code",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/emojis": {
            "get": {
                "summary": "Get emojis",
                "description": "Lists all the emojis available to use on GitHub.",
                "operationId": "emojis/get",
                "tags": [
                    "emojis"
                ],
                "parameters": []
            }
        },
        "/enterprises/{enterprise}/code-security/configurations": {
            "get": {
                "summary": "Get code security configurations for an enterprise",
                "description": "Lists all code security configurations available in an enterprise.\n\nThe authenticated user must be an administrator of the enterprise in order to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/get-configurations-for-enterprise",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a code security configuration for an enterprise",
                "description": "Creates a code security configuration in an enterprise.\n\nThe authenticated user must be an administrator of the enterprise in order to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/create-configuration-for-enterprise",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the code security configuration. Must be unique within the enterprise."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A description of the code security configuration",
                                        "maxLength": 255
                                    },
                                    "advanced_security": {
                                        "type": "string",
                                        "description": "The enablement status of GitHub Advanced Security",
                                        "enum": [
                                            "enabled",
                                            "disabled"
                                        ],
                                        "default": "disabled"
                                    },
                                    "dependency_graph": {
                                        "type": "string",
                                        "description": "The enablement status of Dependency Graph",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "enabled"
                                    },
                                    "dependency_graph_autosubmit_action": {
                                        "type": "string",
                                        "description": "The enablement status of Automatic dependency submission",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "dependency_graph_autosubmit_action_options": {
                                        "type": "object",
                                        "description": "Feature options for Automatic dependency submission",
                                        "properties": {
                                            "labeled_runners": {
                                                "type": "boolean",
                                                "description": "Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.",
                                                "default": false
                                            }
                                        }
                                    },
                                    "dependabot_alerts": {
                                        "type": "string",
                                        "description": "The enablement status of Dependabot alerts",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "dependabot_security_updates": {
                                        "type": "string",
                                        "description": "The enablement status of Dependabot security updates",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "code_scanning_default_setup": {
                                        "type": "string",
                                        "description": "The enablement status of code scanning default setup",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "code_scanning_default_setup_options": {
                                        "type": "object",
                                        "description": "Feature options for code scanning default setup",
                                        "nullable": true,
                                        "properties": {
                                            "runner_type": {
                                                "type": "string",
                                                "enum": [
                                                    "standard",
                                                    "labeled",
                                                    "not_set"
                                                ],
                                                "description": "Whether to use labeled runners or standard GitHub runners."
                                            },
                                            "runner_label": {
                                                "nullable": true,
                                                "type": "string",
                                                "description": "The label of the runner to use for code scanning default setup when runner_type is 'labeled'."
                                            }
                                        }
                                    },
                                    "code_scanning_delegated_alert_dismissal": {
                                        "type": "string",
                                        "description": "The enablement status of code scanning delegated alert dismissal",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_push_protection": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning push protection",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_validity_checks": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning validity checks",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_non_provider_patterns": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning non provider patterns",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_generic_secrets": {
                                        "type": "string",
                                        "description": "The enablement status of Copilot secret scanning",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_delegated_alert_dismissal": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning delegated alert dismissal",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "private_vulnerability_reporting": {
                                        "type": "string",
                                        "description": "The enablement status of private vulnerability reporting",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "enforcement": {
                                        "type": "string",
                                        "description": "The enforcement status for a security configuration",
                                        "enum": [
                                            "enforced",
                                            "unenforced"
                                        ],
                                        "default": "enforced"
                                    }
                                },
                                "required": [
                                    "name",
                                    "description"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example for a code security configuration",
                                    "value": {
                                        "name": "High rish settings",
                                        "description": "This is a code security configuration for octo-enterprise",
                                        "advanced_security": "enabled",
                                        "dependabot_alerts": "enabled",
                                        "dependabot_security_updates": "not_set",
                                        "secret_scanning": "enabled"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/enterprises/{enterprise}/code-security/configurations/defaults": {
            "get": {
                "summary": "Get default code security configurations for an enterprise",
                "description": "Lists the default code security configurations for an enterprise.\n\nThe authenticated user must be an administrator of the enterprise in order to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/get-default-configurations-for-enterprise",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/enterprises/{enterprise}/code-security/configurations/{configuration_id}": {
            "get": {
                "summary": "Retrieve a code security configuration of an enterprise",
                "description": "Gets a code security configuration available in an enterprise.\n\nThe authenticated user must be an administrator of the enterprise in order to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/get-single-configuration-for-enterprise",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a custom code security configuration for an enterprise",
                "description": "Updates a code security configuration in an enterprise.\n\nThe authenticated user must be an administrator of the enterprise in order to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/update-enterprise-configuration",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the code security configuration. Must be unique across the enterprise."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A description of the code security configuration",
                                        "maxLength": 255
                                    },
                                    "advanced_security": {
                                        "type": "string",
                                        "description": "The enablement status of GitHub Advanced Security. Must be set to enabled if you want to enable any GHAS settings.",
                                        "enum": [
                                            "enabled",
                                            "disabled"
                                        ]
                                    },
                                    "dependency_graph": {
                                        "type": "string",
                                        "description": "The enablement status of Dependency Graph",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "dependency_graph_autosubmit_action": {
                                        "type": "string",
                                        "description": "The enablement status of Automatic dependency submission",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "dependency_graph_autosubmit_action_options": {
                                        "type": "object",
                                        "description": "Feature options for Automatic dependency submission",
                                        "properties": {
                                            "labeled_runners": {
                                                "type": "boolean",
                                                "description": "Whether to use runners labeled with 'dependency-submission' or standard GitHub runners."
                                            }
                                        }
                                    },
                                    "dependabot_alerts": {
                                        "type": "string",
                                        "description": "The enablement status of Dependabot alerts",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "dependabot_security_updates": {
                                        "type": "string",
                                        "description": "The enablement status of Dependabot security updates",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "code_scanning_default_setup": {
                                        "type": "string",
                                        "description": "The enablement status of code scanning default setup",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "code_scanning_default_setup_options": {
                                        "type": "object",
                                        "description": "Feature options for code scanning default setup",
                                        "nullable": true,
                                        "properties": {
                                            "runner_type": {
                                                "type": "string",
                                                "enum": [
                                                    "standard",
                                                    "labeled",
                                                    "not_set"
                                                ],
                                                "description": "Whether to use labeled runners or standard GitHub runners."
                                            },
                                            "runner_label": {
                                                "nullable": true,
                                                "type": "string",
                                                "description": "The label of the runner to use for code scanning default setup when runner_type is 'labeled'."
                                            }
                                        }
                                    },
                                    "code_scanning_delegated_alert_dismissal": {
                                        "type": "string",
                                        "description": "The enablement status of code scanning delegated alert dismissal",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_push_protection": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning push protection",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_validity_checks": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning validity checks",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_non_provider_patterns": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning non-provider patterns",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_generic_secrets": {
                                        "type": "string",
                                        "description": "The enablement status of Copilot secret scanning",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_delegated_alert_dismissal": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning delegated alert dismissal",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "private_vulnerability_reporting": {
                                        "type": "string",
                                        "description": "The enablement status of private vulnerability reporting",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "enforcement": {
                                        "type": "string",
                                        "description": "The enforcement status for a security configuration",
                                        "enum": [
                                            "enforced",
                                            "unenforced"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example for updating a code security configuration",
                                    "value": {
                                        "name": "octo-enterprise recommended settings v2",
                                        "secret_scanning": "disabled",
                                        "code_scanning_default_setup": "enabled"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a code security configuration for an enterprise",
                "description": "Deletes a code security configuration from an enterprise.\nRepositories attached to the configuration will retain their settings but will no longer be associated with\nthe configuration.\n\nThe authenticated user must be an administrator for the enterprise to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/delete-configuration-for-enterprise",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach": {
            "post": {
                "summary": "Attach an enterprise configuration to repositories",
                "description": "Attaches an enterprise code security configuration to repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.\n\nIf insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.\n\nThe authenticated user must be an administrator for the enterprise to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/attach-enterprise-configuration",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "scope": {
                                        "type": "string",
                                        "description": "The type of repositories to attach the configuration to.",
                                        "enum": [
                                            "all",
                                            "all_without_configurations"
                                        ]
                                    }
                                },
                                "required": [
                                    "scope"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example for attaching a configuration to some repositories",
                                    "value": {
                                        "scope": "all"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults": {
            "put": {
                "summary": "Set a code security configuration as a default for an enterprise",
                "description": "Sets a code security configuration as a default to be applied to new repositories in your enterprise.\n\nThis configuration will be applied by default to the matching repository type when created, but only for organizations within the enterprise that do not already have a default code security configuration set.\n\nThe authenticated user must be an administrator for the enterprise to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/set-configuration-as-default-for-enterprise",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "default_for_new_repos": {
                                        "type": "string",
                                        "description": "Specify which types of repository this security configuration should be applied to by default.",
                                        "enum": [
                                            "all",
                                            "none",
                                            "private_and_internal",
                                            "public"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Set this configuration to be enabled by default on all new repositories.",
                                    "value": {
                                        "default_for_new_repos": "all"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories": {
            "get": {
                "summary": "Get repositories associated with an enterprise code security configuration",
                "description": "Lists the repositories associated with an enterprise code security configuration in an organization.\n\nThe authenticated user must be an administrator of the enterprise in order to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/get-repositories-for-enterprise-configuration",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "description": "A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.\n\nCan be: `all`, `attached`, `attaching`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    }
                ]
            }
        },
        "/enterprises/{enterprise}/dependabot/alerts": {
            "get": {
                "summary": "List Dependabot alerts for an enterprise",
                "description": "Lists Dependabot alerts for repositories that are owned by the specified enterprise.\n\nThe authenticated user must be a member of the enterprise to use this endpoint.\n\nAlerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/list-alerts-for-enterprise",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `auto_dismissed`, `dismissed`, `fixed`, `open`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "description": "A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ecosystem",
                        "in": "query",
                        "description": "A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package",
                        "in": "query",
                        "description": "A comma-separated list of package names. If specified, only alerts for these packages will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "epss_percentage",
                        "in": "query",
                        "description": "CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:\n- An exact number (`n`)\n- Comparators such as `>n`, `<n`, `>=n`, `<=n`\n- A range like `n..n`, where `n` is a number from 0.0 to 1.0\n\nFilters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "description": "The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "development",
                                "runtime"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed.\n`epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "epss_percentage"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "first",
                        "description": "**Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 30
                        }
                    },
                    {
                        "name": "last",
                        "description": "**Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/enterprises/{enterprise}/secret-scanning/alerts": {
            "get": {
                "summary": "List secret scanning alerts for an enterprise",
                "description": "Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.\n\nAlerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\n\nThe authenticated user must be a member of the enterprise in order to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.",
                "tags": [
                    "secret-scanning"
                ],
                "operationId": "secret-scanning/list-alerts-for-enterprise",
                "parameters": [
                    {
                        "name": "enterprise",
                        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "resolved"
                            ]
                        }
                    },
                    {
                        "name": "secret_type",
                        "in": "query",
                        "description": "A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See \"[Supported secret scanning patterns](https://docs.github.com/enterprise-cloud@latest/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)\" for a complete list of secret types.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resolution",
                        "in": "query",
                        "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "description": "A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "is_publicly_leaked",
                        "in": "query",
                        "description": "A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "is_multi_repo",
                        "in": "query",
                        "description": "A boolean value representing whether or not to filter alerts by the multi-repo tag being present.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/events": {
            "get": {
                "summary": "List public events",
                "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-public-events",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/feeds": {
            "get": {
                "summary": "Get feeds",
                "description": "Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.\n\n*   **Timeline**: The GitHub global public timeline\n*   **User**: The public timeline for any user, using `uri_template`. For more information, see \"[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia).\"\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n\nBy default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n> [!NOTE]\n> Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) since current feed URIs use the older, non revocable auth tokens.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/get-feeds",
                "parameters": []
            }
        },
        "/gists": {
            "get": {
                "summary": "List gists for the authenticated user",
                "description": "Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/list",
                "parameters": [
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a gist",
                "description": "Allows you to add a new gist with one or more files.\n\n> [!NOTE]\n> Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.",
                "operationId": "gists/create",
                "tags": [
                    "gists"
                ],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "Description of the gist",
                                        "example": "Example Ruby script",
                                        "type": "string"
                                    },
                                    "files": {
                                        "description": "Names and content for the files that make up the gist",
                                        "example": {
                                            "hello.rb": {
                                                "content": "puts \"Hello, World!\""
                                            }
                                        },
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "object",
                                            "properties": {
                                                "content": {
                                                    "description": "Content of the file",
                                                    "readOnly": false,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "content"
                                            ]
                                        }
                                    },
                                    "public": {
                                        "oneOf": [
                                            {
                                                "description": "Flag indicating whether the gist is public",
                                                "example": true,
                                                "type": "boolean",
                                                "default": false
                                            },
                                            {
                                                "type": "string",
                                                "example": "true",
                                                "default": "false",
                                                "enum": [
                                                    "true",
                                                    "false"
                                                ]
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "files"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "summary": "Creating a gist",
                                    "value": {
                                        "description": "Example of a gist",
                                        "public": false,
                                        "files": {
                                            "README.md": {
                                                "content": "Hello World"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gists/public": {
            "get": {
                "summary": "List public gists",
                "description": "List public gists sorted by most recently updated to least recently updated.\n\nNote: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/list-public",
                "parameters": [
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/gists/starred": {
            "get": {
                "summary": "List starred gists",
                "description": "List the authenticated user's starred gists:",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/list-starred",
                "parameters": [
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/gists/{gist_id}": {
            "get": {
                "summary": "Get a gist",
                "description": "Gets a specified gist.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/get",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a gist",
                "description": "Allows you to update a gist's description and to update, delete, or rename gist files. Files\nfrom the previous version of the gist that aren't explicitly changed during an edit\nare unchanged.\n\nAt least one of `description` or `files` is required.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/update",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "The description of the gist.",
                                        "example": "Example Ruby script",
                                        "type": "string"
                                    },
                                    "files": {
                                        "description": "The gist files to be updated, renamed, or deleted. Each `key` must match the current filename\n(including extension) of the targeted gist file. For example: `hello.py`.\n\nTo delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be\ndeleted if the specified object does not contain at least one of `content` or `filename`.",
                                        "example": {
                                            "hello.rb": {
                                                "content": "blah",
                                                "filename": "goodbye.rb"
                                            }
                                        },
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "object",
                                            "nullable": true,
                                            "properties": {
                                                "content": {
                                                    "description": "The new content of the file.",
                                                    "type": "string"
                                                },
                                                "filename": {
                                                    "description": "The new filename for the file.",
                                                    "type": "string",
                                                    "nullable": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "type": "object",
                                "nullable": true
                            },
                            "examples": {
                                "updateGist": {
                                    "summary": "Updating a gist",
                                    "value": {
                                        "description": "An updated gist description",
                                        "files": {
                                            "README.md": {
                                                "content": "Hello World from GitHub"
                                            }
                                        }
                                    }
                                },
                                "deleteFile": {
                                    "summary": "Deleting a gist file",
                                    "value": {
                                        "files": {
                                            "hello.py": null
                                        }
                                    }
                                },
                                "renameFile": {
                                    "summary": "Renaming a gist file",
                                    "value": {
                                        "files": {
                                            "hello.py": {
                                                "filename": "goodbye.py"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a gist",
                "description": "",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/delete",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gists/{gist_id}/comments": {
            "get": {
                "summary": "List gist comments",
                "description": "Lists the comments on a gist.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/list-comments",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a gist comment",
                "description": "Creates a comment on a gist.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/create-comment",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "body": {
                                        "description": "The comment text.",
                                        "type": "string",
                                        "maxLength": 65535,
                                        "example": "Body of the attachment"
                                    }
                                },
                                "type": "object",
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Creating a comment in a gist",
                                    "value": {
                                        "body": "This is a comment to a gist"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gists/{gist_id}/comments/{comment_id}": {
            "get": {
                "summary": "Get a gist comment",
                "description": "Gets a comment on a gist.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/get-comment",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a gist comment",
                "description": "Updates a comment on a gist.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/update-comment",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "body": {
                                        "description": "The comment text.",
                                        "type": "string",
                                        "maxLength": 65535,
                                        "example": "Body of the attachment"
                                    }
                                },
                                "type": "object",
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Updating a comment in a gist",
                                    "value": {
                                        "body": "This is an update to a comment in a gist"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a gist comment",
                "description": "",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/delete-comment",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ]
            }
        },
        "/gists/{gist_id}/commits": {
            "get": {
                "summary": "List gist commits",
                "description": "",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/list-commits",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/gists/{gist_id}/forks": {
            "get": {
                "summary": "List gist forks",
                "description": "",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/list-forks",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Fork a gist",
                "description": "",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/fork",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gists/{gist_id}/star": {
            "get": {
                "summary": "Check if a gist is starred",
                "description": "",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/check-is-starred",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Star a gist",
                "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/star",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Unstar a gist",
                "description": "",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/unstar",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gists/{gist_id}/{sha}": {
            "get": {
                "summary": "Get a gist revision",
                "description": "Gets a specified gist revision.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/get-revision",
                "parameters": [
                    {
                        "name": "gist_id",
                        "description": "The unique identifier of the gist.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sha",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gitignore/templates": {
            "get": {
                "summary": "Get all gitignore templates",
                "description": "List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).",
                "operationId": "gitignore/get-all-templates",
                "tags": [
                    "gitignore"
                ],
                "parameters": []
            }
        },
        "/gitignore/templates/{name}": {
            "get": {
                "summary": "Get a gitignore template",
                "description": "Get the content of a gitignore template.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.",
                "operationId": "gitignore/get-template",
                "tags": [
                    "gitignore"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/installation/repositories": {
            "get": {
                "summary": "List repositories accessible to the app installation",
                "description": "List repositories that an app installation can access.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-repos-accessible-to-installation",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/installation/token": {
            "delete": {
                "summary": "Revoke an installation access token",
                "description": "Revokes the installation token you're using to authenticate as an installation and access this endpoint.\n\nOnce an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)\" endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/revoke-installation-access-token",
                "parameters": []
            }
        },
        "/issues": {
            "get": {
                "summary": "List issues assigned to the authenticated user",
                "description": "List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list",
                "parameters": [
                    {
                        "name": "filter",
                        "description": "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "assigned",
                                "created",
                                "mentioned",
                                "subscribed",
                                "repos",
                                "all"
                            ],
                            "default": "assigned"
                        }
                    },
                    {
                        "name": "state",
                        "description": "Indicates the state of the issues to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "closed",
                                "all"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "labels",
                        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "What to sort results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "comments"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "collab",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "orgs",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "owned",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pulls",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/licenses": {
            "get": {
                "summary": "Get all commonly used licenses",
                "description": "Lists the most commonly used licenses on GitHub. For more information, see \"[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository).\"",
                "tags": [
                    "licenses"
                ],
                "operationId": "licenses/get-all-commonly-used",
                "parameters": [
                    {
                        "name": "featured",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/licenses/{license}": {
            "get": {
                "summary": "Get a license",
                "description": "Gets information about a specific license. For more information, see \"[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository).\"",
                "tags": [
                    "licenses"
                ],
                "operationId": "licenses/get",
                "parameters": [
                    {
                        "name": "license",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/markdown": {
            "post": {
                "summary": "Render a Markdown document",
                "description": "",
                "operationId": "markdown/render",
                "tags": [
                    "markdown"
                ],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "text": {
                                        "description": "The Markdown text to render in HTML.",
                                        "type": "string"
                                    },
                                    "mode": {
                                        "description": "The rendering mode.",
                                        "enum": [
                                            "markdown",
                                            "gfm"
                                        ],
                                        "default": "markdown",
                                        "example": "markdown",
                                        "type": "string"
                                    },
                                    "context": {
                                        "description": "The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "text"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "summary": "Rendering markdown",
                                    "value": {
                                        "text": "Hello **world**"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/markdown/raw": {
            "post": {
                "summary": "Render a Markdown document in raw mode",
                "description": "You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.",
                "operationId": "markdown/render-raw",
                "tags": [
                    "markdown"
                ],
                "parameters": [],
                "requestBody": {
                    "required": false,
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "text": "Hello **world**"
                                    }
                                }
                            }
                        },
                        "text/x-markdown": {
                            "schema": {
                                "type": "string"
                            },
                            "examples": {
                                "default": {
                                    "summary": "Rendering markdown",
                                    "value": {
                                        "text": "Hello **world**"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/marketplace_listing/accounts/{account_id}": {
            "get": {
                "summary": "Get a subscription plan for an account",
                "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-subscription-plan-for-account",
                "parameters": [
                    {
                        "name": "account_id",
                        "description": "account_id parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/marketplace_listing/plans": {
            "get": {
                "summary": "List plans",
                "description": "Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-plans",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/marketplace_listing/plans/{plan_id}/accounts": {
            "get": {
                "summary": "List accounts for a plan",
                "description": "Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-accounts-for-plan",
                "parameters": [
                    {
                        "name": "plan_id",
                        "description": "The unique identifier of the plan.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/marketplace_listing/stubbed/accounts/{account_id}": {
            "get": {
                "summary": "Get a subscription plan for an account (stubbed)",
                "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-subscription-plan-for-account-stubbed",
                "parameters": [
                    {
                        "name": "account_id",
                        "description": "account_id parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/marketplace_listing/stubbed/plans": {
            "get": {
                "summary": "List plans (stubbed)",
                "description": "Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-plans-stubbed",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/marketplace_listing/stubbed/plans/{plan_id}/accounts": {
            "get": {
                "summary": "List accounts for a plan (stubbed)",
                "description": "Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-accounts-for-plan-stubbed",
                "parameters": [
                    {
                        "name": "plan_id",
                        "description": "The unique identifier of the plan.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/meta": {
            "get": {
                "summary": "Get GitHub meta information",
                "description": "Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).\"\n\nThe API's response also includes a list of GitHub's domain names.\n\nThe values shown in the documentation's response are example values. You must always query the API directly to get the latest values.\n\n> [!NOTE]\n> This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.",
                "tags": [
                    "meta"
                ],
                "operationId": "meta/get",
                "parameters": []
            }
        },
        "/networks/{owner}/{repo}/events": {
            "get": {
                "summary": "List public events for a network of repositories",
                "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-public-events-for-repo-network",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/notifications": {
            "get": {
                "summary": "List notifications for the authenticated user",
                "description": "List all notifications for the current user, sorted by most recently updated.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-notifications-for-authenticated-user",
                "parameters": [
                    {
                        "name": "all",
                        "description": "If `true`, show notifications marked as read.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "participating",
                        "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "before",
                        "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 50). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    }
                ]
            },
            "put": {
                "summary": "Mark notifications as read",
                "description": "Marks all notifications as \"read\" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/mark-notifications-as-read",
                "parameters": [],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "last_read_at": {
                                        "description": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "read": {
                                        "description": "Whether the notification has been read.",
                                        "type": "boolean"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "last_read_at": "2022-06-10T00:00:00Z",
                                        "read": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/notifications/threads/{thread_id}": {
            "get": {
                "summary": "Get a thread",
                "description": "Gets information about a notification thread.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/get-thread",
                "parameters": [
                    {
                        "name": "thread_id",
                        "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Mark a thread as read",
                "description": "Marks a thread as \"read.\" Marking a thread as \"read\" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/mark-thread-as-read",
                "parameters": [
                    {
                        "name": "thread_id",
                        "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Mark a thread as done",
                "description": "Marks a thread as \"done.\" Marking a thread as \"done\" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/mark-thread-as-done",
                "parameters": [
                    {
                        "name": "thread_id",
                        "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/notifications/threads/{thread_id}/subscription": {
            "get": {
                "summary": "Get a thread subscription for the authenticated user",
                "description": "This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/get-thread-subscription-for-authenticated-user",
                "parameters": [
                    {
                        "name": "thread_id",
                        "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set a thread subscription",
                "description": "If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n\nYou can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n\nUnsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/set-thread-subscription",
                "parameters": [
                    {
                        "name": "thread_id",
                        "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ignored": {
                                        "description": "Whether to block all notifications from a thread.",
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "ignored": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a thread subscription",
                "description": "Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/delete-thread-subscription",
                "parameters": [
                    {
                        "name": "thread_id",
                        "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/octocat": {
            "get": {
                "summary": "Get Octocat",
                "description": "Get the octocat as ASCII art",
                "tags": [
                    "meta"
                ],
                "operationId": "meta/get-octocat",
                "parameters": [
                    {
                        "name": "s",
                        "in": "query",
                        "description": "The words to show in Octocat's speech bubble",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    }
                ]
            }
        },
        "/organizations": {
            "get": {
                "summary": "List organizations",
                "description": "Lists all organizations, in the order that they were created.\n\n> [!NOTE]\n> Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list",
                "parameters": [
                    {
                        "name": "since",
                        "description": "An organization ID. Only return organizations with an ID greater than this ID.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/organizations/{org}/settings/billing/usage": {
            "get": {
                "summary": "Get billing usage report for an organization",
                "description": "Gets a report of the total usage for an organization. To use this endpoint, you must be an administrator of an organization within an enterprise or an organization account.\n\n**Note:** This endpoint is only available to organizations with access to the enhanced billing platform. For more information, see \"[About the enhanced billing platform](https://docs.github.com/billing/using-the-new-billing-platform).\"",
                "tags": [
                    "billing"
                ],
                "operationId": "billing/get-github-billing-usage-report-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "year",
                        "description": "If specified, only return results for a single year. The value of `year` is an integer with four digits representing a year. For example, `2025`. Default value is the current year.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "month",
                        "description": "If specified, only return results for a single month. The value of `month` is an integer between `1` and `12`. If no year is specified the default `year` is used.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "day",
                        "description": "If specified, only return results for a single day. The value of `day` is an integer between `1` and `31`. If no `year` or `month` is specified, the default `year` and `month` are used.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hour",
                        "description": "If specified, only return results for a single hour. The value of `hour` is an integer between `0` and `23`. If no `year`, `month`, or `day` is specified, the default `year`, `month`, and `day` are used.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}": {
            "get": {
                "summary": "Get an organization",
                "description": "Gets information about an organization.\n\nWhen the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, outside collaborators, guest collaborators, repository collaborators, or everyone with access to any repository within the organization to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nTo see the full details about an organization, the authenticated user must be an organization owner.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.\n\nTo see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update an organization",
                "description": "> [!WARNING]\n> **Closing down notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n\n> [!WARNING]\n> **Closing down notice:** Code security product enablement for new repositories through the organization API is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization) to set defaults instead. For more information on setting a default security configuration, see the [changelog](https://github.blog/changelog/2024-07-09-sunsetting-security-settings-defaults-parameters-in-the-organizations-rest-api/).\n\nUpdates the organization's profile and member privileges.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/update",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "billing_email": {
                                        "type": "string",
                                        "description": "Billing email address. This address is not publicized."
                                    },
                                    "company": {
                                        "type": "string",
                                        "description": "The company name."
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "The publicly visible email address."
                                    },
                                    "twitter_username": {
                                        "type": "string",
                                        "description": "The Twitter username of the company."
                                    },
                                    "location": {
                                        "type": "string",
                                        "description": "The location."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The shorthand name of the company."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "The description of the company. The maximum size is 160 characters."
                                    },
                                    "has_organization_projects": {
                                        "type": "boolean",
                                        "description": "Whether an organization can use organization projects."
                                    },
                                    "has_repository_projects": {
                                        "type": "boolean",
                                        "description": "Whether repositories that belong to the organization can use repository projects."
                                    },
                                    "default_repository_permission": {
                                        "type": "string",
                                        "description": "Default permission level members have for organization repositories.",
                                        "enum": [
                                            "read",
                                            "write",
                                            "admin",
                                            "none"
                                        ],
                                        "default": "read"
                                    },
                                    "members_can_create_repositories": {
                                        "type": "boolean",
                                        "description": "Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
                                        "default": true
                                    },
                                    "members_can_create_internal_repositories": {
                                        "type": "boolean",
                                        "description": "Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation."
                                    },
                                    "members_can_create_private_repositories": {
                                        "type": "boolean",
                                        "description": "Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation."
                                    },
                                    "members_can_create_public_repositories": {
                                        "type": "boolean",
                                        "description": "Whether organization members can create public repositories, which are visible to anyone. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation."
                                    },
                                    "members_allowed_repository_creation_type": {
                                        "type": "string",
                                        "description": "Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. \n**Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.",
                                        "enum": [
                                            "all",
                                            "private",
                                            "none"
                                        ]
                                    },
                                    "members_can_create_pages": {
                                        "type": "boolean",
                                        "description": "Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.",
                                        "default": true
                                    },
                                    "members_can_create_public_pages": {
                                        "type": "boolean",
                                        "description": "Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.",
                                        "default": true
                                    },
                                    "members_can_create_private_pages": {
                                        "type": "boolean",
                                        "description": "Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.",
                                        "default": true
                                    },
                                    "members_can_fork_private_repositories": {
                                        "type": "boolean",
                                        "description": "Whether organization members can fork private organization repositories.",
                                        "default": false
                                    },
                                    "web_commit_signoff_required": {
                                        "type": "boolean",
                                        "description": "Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.",
                                        "default": false
                                    },
                                    "blog": {
                                        "type": "string",
                                        "example": "\"http://github.blog\""
                                    },
                                    "advanced_security_enabled_for_new_repositories": {
                                        "type": "boolean",
                                        "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.\n\nWhether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
                                        "deprecated": true
                                    },
                                    "dependabot_alerts_enabled_for_new_repositories": {
                                        "type": "boolean",
                                        "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.\n\nWhether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
                                        "deprecated": true
                                    },
                                    "dependabot_security_updates_enabled_for_new_repositories": {
                                        "type": "boolean",
                                        "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.\n\nWhether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
                                        "deprecated": true
                                    },
                                    "dependency_graph_enabled_for_new_repositories": {
                                        "type": "boolean",
                                        "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.\n\nWhether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
                                        "deprecated": true
                                    },
                                    "secret_scanning_enabled_for_new_repositories": {
                                        "type": "boolean",
                                        "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.\n\nWhether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
                                        "deprecated": true
                                    },
                                    "secret_scanning_push_protection_enabled_for_new_repositories": {
                                        "type": "boolean",
                                        "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.\n\nWhether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
                                        "deprecated": true
                                    },
                                    "secret_scanning_push_protection_custom_link_enabled": {
                                        "type": "boolean",
                                        "description": "Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection."
                                    },
                                    "secret_scanning_push_protection_custom_link": {
                                        "type": "string",
                                        "description": "If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret."
                                    },
                                    "deploy_keys_enabled_for_repositories": {
                                        "type": "boolean",
                                        "description": "Controls whether or not deploy keys may be added and used for repositories in the organization."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "billing_email": "mona@github.com",
                                        "company": "GitHub",
                                        "email": "mona@github.com",
                                        "twitter_username": "github",
                                        "location": "San Francisco",
                                        "name": "github",
                                        "description": "GitHub, the company.",
                                        "default_repository_permission": "read",
                                        "members_can_create_repositories": true,
                                        "members_allowed_repository_creation_type": "all"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an organization",
                "description": "Deletes an organization and all its repositories.\n\nThe organization login will be unavailable for 90 days after deletion.\n\nPlease review the Terms of Service regarding account deletion before using this endpoint:\n\nhttps://docs.github.com/site-policy/github-terms/github-terms-of-service",
                "operationId": "orgs/delete",
                "tags": [
                    "orgs"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/cache/usage": {
            "get": {
                "summary": "Get GitHub Actions cache usage for an organization",
                "description": "Gets the total GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\n\nOAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-actions-cache-usage-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/cache/usage-by-repository": {
            "get": {
                "summary": "List repositories with GitHub Actions cache usage for an organization",
                "description": "Lists repositories and their GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\n\nOAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-actions-cache-usage-by-repo-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/hosted-runners": {
            "get": {
                "summary": "List GitHub-hosted runners for an organization",
                "description": "Lists all GitHub-hosted runners configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-hosted-runners-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a GitHub-hosted runner for an organization",
                "description": "Creates a GitHub-hosted runner for an organization.\nOAuth tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.",
                "operationId": "actions/create-hosted-runner-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.",
                                        "type": "string"
                                    },
                                    "image": {
                                        "description": "The image of runner. To list all available images, use `GET /actions/hosted-runners/images/github-owned` or `GET /actions/hosted-runners/images/partner`.",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "The unique identifier of the runner image.",
                                                "type": "string"
                                            },
                                            "source": {
                                                "description": "The source of the runner image.",
                                                "type": "string",
                                                "enum": [
                                                    "github",
                                                    "partner",
                                                    "custom"
                                                ]
                                            }
                                        }
                                    },
                                    "size": {
                                        "description": "The machine size of the runner. To list available sizes, use `GET actions/hosted-runners/machine-sizes`",
                                        "type": "string"
                                    },
                                    "runner_group_id": {
                                        "description": "The existing runner group to add this runner to.",
                                        "type": "integer"
                                    },
                                    "maximum_runners": {
                                        "description": "The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.",
                                        "type": "integer"
                                    },
                                    "enable_static_ip": {
                                        "description": "Whether this runner should be created with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits`",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "name",
                                    "image",
                                    "size",
                                    "runner_group_id"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "My Hosted runner",
                                        "image": {
                                            "id": "ubuntu-latest",
                                            "source": "github"
                                        },
                                        "runner_group_id": 1,
                                        "size": "4-core",
                                        "maximum_runners": 50,
                                        "enable_static_ip": false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/hosted-runners/images/github-owned": {
            "get": {
                "summary": "Get GitHub-owned images for GitHub-hosted runners in an organization",
                "description": "Get the list of GitHub-owned images available for GitHub-hosted runners for an organization.",
                "operationId": "actions/get-hosted-runners-github-owned-images-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/hosted-runners/images/partner": {
            "get": {
                "summary": "Get partner images for GitHub-hosted runners in an organization",
                "description": "Get the list of partner images available for GitHub-hosted runners for an organization.",
                "operationId": "actions/get-hosted-runners-partner-images-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/hosted-runners/limits": {
            "get": {
                "summary": "Get limits on GitHub-hosted runners for an organization",
                "description": "Get the GitHub-hosted runners limits for an organization.",
                "operationId": "actions/get-hosted-runners-limits-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/hosted-runners/machine-sizes": {
            "get": {
                "summary": "Get GitHub-hosted runners machine specs for an organization",
                "description": "Get the list of machine specs available for GitHub-hosted runners for an organization.",
                "operationId": "actions/get-hosted-runners-machine-specs-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/hosted-runners/platforms": {
            "get": {
                "summary": "Get platforms for GitHub-hosted runners in an organization",
                "description": "Get the list of platforms available for GitHub-hosted runners for an organization.",
                "operationId": "actions/get-hosted-runners-platforms-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}": {
            "get": {
                "summary": "Get a GitHub-hosted runner for an organization",
                "description": "Gets a GitHub-hosted runner configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-hosted-runner-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hosted_runner_id",
                        "description": "Unique identifier of the GitHub-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a GitHub-hosted runner for an organization",
                "description": "Updates a GitHub-hosted runner for an organization.\nOAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.",
                "operationId": "actions/update-hosted-runner-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hosted_runner_id",
                        "description": "Unique identifier of the GitHub-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.",
                                        "type": "string"
                                    },
                                    "runner_group_id": {
                                        "description": "The existing runner group to add this runner to.",
                                        "type": "integer"
                                    },
                                    "maximum_runners": {
                                        "description": "The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.",
                                        "type": "integer"
                                    },
                                    "enable_static_ip": {
                                        "description": "Whether this runner should be updated with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits`",
                                        "type": "boolean"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "My larger runner",
                                        "runner_group_id": 1,
                                        "maximum_runners": 50,
                                        "enable_static_ip": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a GitHub-hosted runner for an organization",
                "description": "Deletes a GitHub-hosted runner for an organization.",
                "operationId": "actions/delete-hosted-runner-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hosted_runner_id",
                        "description": "Unique identifier of the GitHub-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/oidc/customization/sub": {
            "get": {
                "summary": "Get the customization template for an OIDC subject claim for an organization",
                "description": "Gets the customization template for an OpenID Connect (OIDC) subject claim.\n\nOAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.",
                "tags": [
                    "oidc"
                ],
                "operationId": "oidc/get-oidc-custom-sub-template-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set the customization template for an OIDC subject claim for an organization",
                "description": "Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "oidc"
                ],
                "operationId": "oidc/update-oidc-custom-sub-template-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Actions OIDC Subject customization",
                                "description": "Actions OIDC Subject customization",
                                "type": "object",
                                "properties": {
                                    "include_claim_keys": {
                                        "description": "Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "include_claim_keys"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "include_claim_keys": [
                                            "repo",
                                            "context"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/permissions": {
            "get": {
                "summary": "Get GitHub Actions permissions for an organization",
                "description": "Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/get-github-actions-permissions-organization",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set GitHub Actions permissions for an organization",
                "description": "Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/set-github-actions-permissions-organization",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "enabled_repositories": {
                                        "type": "string",
                                        "description": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions.",
                                        "enum": [
                                            "all",
                                            "none",
                                            "selected"
                                        ]
                                    },
                                    "allowed_actions": {
                                        "type": "string",
                                        "description": "The permissions policy that controls the actions and reusable workflows that are allowed to run.",
                                        "enum": [
                                            "all",
                                            "local_only",
                                            "selected"
                                        ]
                                    }
                                },
                                "required": [
                                    "enabled_repositories"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "enabled_repositories": "all",
                                        "allowed_actions": "selected"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/permissions/repositories": {
            "get": {
                "summary": "List selected repositories enabled for GitHub Actions in an organization",
                "description": "Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/list-selected-repositories-enabled-github-actions-organization",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set selected repositories enabled for GitHub Actions in an organization",
                "description": "Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/set-selected-repositories-enabled-github-actions-organization",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_repository_ids": {
                                        "description": "List of repository IDs to enable for GitHub Actions.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "description": "Unique identifier of the repository."
                                        }
                                    }
                                },
                                "required": [
                                    "selected_repository_ids"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_repository_ids": [
                                            32,
                                            42
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/permissions/repositories/{repository_id}": {
            "put": {
                "summary": "Enable a selected repository for GitHub Actions in an organization",
                "description": "Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/enable-selected-repository-github-actions-organization",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "description": "The unique identifier of the repository.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Disable a selected repository for GitHub Actions in an organization",
                "description": "Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/disable-selected-repository-github-actions-organization",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "description": "The unique identifier of the repository.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/permissions/selected-actions": {
            "get": {
                "summary": "Get allowed actions and reusable workflows for an organization",
                "description": "Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/get-allowed-actions-organization",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set allowed actions and reusable workflows for an organization",
                "description": "Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/set-allowed-actions-organization",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "github_owned_allowed": {
                                        "type": "boolean",
                                        "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization."
                                    },
                                    "verified_allowed": {
                                        "type": "boolean",
                                        "description": "Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators."
                                    },
                                    "patterns_allowed": {
                                        "type": "array",
                                        "description": "Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\n\n> [!NOTE]\n> The `patterns_allowed` setting only applies to public repositories.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "selected_actions": {
                                    "value": {
                                        "github_owned_allowed": true,
                                        "verified_allowed": false,
                                        "patterns_allowed": [
                                            "monalisa/octocat@*",
                                            "docker/*"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/permissions/workflow": {
            "get": {
                "summary": "Get default workflow permissions for an organization",
                "description": "Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,\nas well as whether GitHub Actions can submit approving pull request reviews. For more information, see\n\"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-github-actions-default-workflow-permissions-organization",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set default workflow permissions for an organization",
                "description": "Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions\ncan submit approving pull request reviews. For more information, see\n\"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/set-github-actions-default-workflow-permissions-organization",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "default_workflow_permissions": {
                                        "type": "string",
                                        "description": "The default workflow permissions granted to the GITHUB_TOKEN when running workflows.",
                                        "enum": [
                                            "read",
                                            "write"
                                        ]
                                    },
                                    "can_approve_pull_request_reviews": {
                                        "type": "boolean",
                                        "description": "Whether GitHub Actions can approve pull requests. Enabling this can be a security risk."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Give read-only permission, and allow approving PRs.",
                                    "value": {
                                        "default_workflow_permissions": "read",
                                        "can_approve_pull_request_reviews": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/runner-groups": {
            "get": {
                "summary": "List self-hosted runner groups for an organization",
                "description": "Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/list-self-hosted-runner-groups-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "visible_to_repository",
                        "description": "Only return runner groups that are allowed to be used by this repository.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a self-hosted runner group for an organization",
                "description": "Creates a new self-hosted runner group for an organization.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/create-self-hosted-runner-group-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Name of the runner group.",
                                        "type": "string"
                                    },
                                    "visibility": {
                                        "description": "Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.",
                                        "type": "string",
                                        "enum": [
                                            "selected",
                                            "all",
                                            "private"
                                        ],
                                        "default": "all"
                                    },
                                    "selected_repository_ids": {
                                        "description": "List of repository IDs that can access the runner group.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "description": "Unique identifier of the repository."
                                        }
                                    },
                                    "runners": {
                                        "description": "List of runner IDs to add to the runner group.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "description": "Unique identifier of the runner."
                                        }
                                    },
                                    "allows_public_repositories": {
                                        "description": "Whether the runner group can be used by `public` repositories.",
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "restricted_to_workflows": {
                                        "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "selected_workflows": {
                                        "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "description": "Name of workflow the runner group should be allowed to run. Note that a ref, tag, or long SHA is required.",
                                            "example": "octo-org/octo-repo/.github/workflows/deploy.yaml@main"
                                        }
                                    },
                                    "network_configuration_id": {
                                        "description": "The identifier of a hosted compute network configuration.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Expensive hardware runners",
                                        "visibility": "selected",
                                        "selected_repository_ids": [
                                            32,
                                            91
                                        ],
                                        "runners": [
                                            9,
                                            2
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/runner-groups/{runner_group_id}": {
            "get": {
                "summary": "Get a self-hosted runner group for an organization",
                "description": "Gets a specific self-hosted runner group for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/get-self-hosted-runner-group-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a self-hosted runner group for an organization",
                "description": "Updates the `name` and `visibility` of a self-hosted runner group in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/update-self-hosted-runner-group-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Name of the runner group.",
                                        "type": "string"
                                    },
                                    "visibility": {
                                        "description": "Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.",
                                        "type": "string",
                                        "enum": [
                                            "selected",
                                            "all",
                                            "private"
                                        ]
                                    },
                                    "allows_public_repositories": {
                                        "description": "Whether the runner group can be used by `public` repositories.",
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "restricted_to_workflows": {
                                        "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "selected_workflows": {
                                        "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "description": "Name of workflow the runner group should be allowed to run. Note that a ref, tag, or long SHA is required.",
                                            "example": "octo-org/octo-repo/.github/workflows/deploy.yaml@main"
                                        }
                                    },
                                    "network_configuration_id": {
                                        "description": "The identifier of a hosted compute network configuration.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Expensive hardware runners",
                                        "visibility": "selected"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a self-hosted runner group from an organization",
                "description": "Deletes a self-hosted runner group for an organization.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/delete-self-hosted-runner-group-from-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners": {
            "get": {
                "summary": "List GitHub-hosted runners in a group for an organization",
                "description": "Lists the GitHub-hosted runners in an organization group.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/list-github-hosted-runners-in-group-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories": {
            "get": {
                "summary": "List repository access to a self-hosted runner group in an organization",
                "description": "Lists the repositories with access to a self-hosted runner group configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/list-repo-access-to-self-hosted-runner-group-in-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set repository access for a self-hosted runner group in an organization",
                "description": "Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/set-repo-access-to-self-hosted-runner-group-in-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_repository_ids": {
                                        "description": "List of repository IDs that can access the runner group.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "description": "Unique identifier of the repository."
                                        }
                                    }
                                },
                                "required": [
                                    "selected_repository_ids"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_repository_ids": [
                                            32,
                                            91
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}": {
            "put": {
                "summary": "Add repository access to a self-hosted runner group in an organization",
                "description": "Adds a repository to the list of repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/add-repo-access-to-self-hosted-runner-group-in-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "repository_id",
                        "description": "The unique identifier of the repository.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove repository access to a self-hosted runner group in an organization",
                "description": "Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/remove-repo-access-to-self-hosted-runner-group-in-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "repository_id",
                        "description": "The unique identifier of the repository.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners": {
            "get": {
                "summary": "List self-hosted runners in a group for an organization",
                "description": "Lists self-hosted runners that are in a specific organization group.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/list-self-hosted-runners-in-group-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set self-hosted runners in a group for an organization",
                "description": "Replaces the list of self-hosted runners that are part of an organization runner group.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/set-self-hosted-runners-in-group-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "runners": {
                                        "description": "List of runner IDs to add to the runner group.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "description": "Unique identifier of the runner."
                                        }
                                    }
                                },
                                "required": [
                                    "runners"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "runners": [
                                            9,
                                            2
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
            "put": {
                "summary": "Add a self-hosted runner to a group for an organization",
                "description": "Adds a self-hosted runner to a runner group configured in an organization.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/add-self-hosted-runner-to-group-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove a self-hosted runner from a group for an organization",
                "description": "Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "operationId": "actions/remove-self-hosted-runner-from-group-for-org",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_group_id",
                        "description": "Unique identifier of the self-hosted runner group.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runners": {
            "get": {
                "summary": "List self-hosted runners for an organization",
                "description": "Lists all self-hosted runners configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-self-hosted-runners-for-org",
                "parameters": [
                    {
                        "name": "name",
                        "description": "The name of a self-hosted runner.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runners/downloads": {
            "get": {
                "summary": "List runner applications for an organization",
                "description": "Lists binaries for the runner application that you can download and run.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-runner-applications-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runners/generate-jitconfig": {
            "post": {
                "summary": "Create configuration for a just-in-time runner for an organization",
                "description": "Generates a configuration that can be passed to the runner application at startup.\n\nThe authenticated user must have admin access to the organization.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/generate-runner-jitconfig-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "runner_group_id",
                                    "labels"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the new runner."
                                    },
                                    "runner_group_id": {
                                        "type": "integer",
                                        "description": "The ID of the runner group to register the runner to."
                                    },
                                    "labels": {
                                        "type": "array",
                                        "minItems": 1,
                                        "maxItems": 100,
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100."
                                    },
                                    "work_folder": {
                                        "type": "string",
                                        "description": "The working directory to be used for job execution, relative to the runner install directory.",
                                        "default": "_work"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "New runner",
                                        "runner_group_id": 1,
                                        "labels": [
                                            "self-hosted",
                                            "X64",
                                            "macOS",
                                            "no-gpu"
                                        ],
                                        "work_folder": "_work"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/runners/registration-token": {
            "post": {
                "summary": "Create a registration token for an organization",
                "description": "Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-registration-token-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runners/remove-token": {
            "post": {
                "summary": "Create a remove token for an organization",
                "description": "Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:\n\n```\n./config.sh remove --token TOKEN\n```\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-remove-token-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runners/{runner_id}": {
            "get": {
                "summary": "Get a self-hosted runner for an organization",
                "description": "Gets a specific self-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-self-hosted-runner-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a self-hosted runner from an organization",
                "description": "Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-self-hosted-runner-from-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runners/{runner_id}/labels": {
            "get": {
                "summary": "List labels for a self-hosted runner for an organization",
                "description": "Lists all labels for a self-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-labels-for-self-hosted-runner-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Add custom labels to a self-hosted runner for an organization",
                "description": "Adds custom labels to a self-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/add-custom-labels-to-self-hosted-runner-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "labels"
                                ],
                                "properties": {
                                    "labels": {
                                        "type": "array",
                                        "minItems": 1,
                                        "maxItems": 100,
                                        "description": "The names of the custom labels to add to the runner.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "labels": [
                                            "gpu",
                                            "accelerated"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Set custom labels for a self-hosted runner for an organization",
                "description": "Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/set-custom-labels-for-self-hosted-runner-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "labels"
                                ],
                                "properties": {
                                    "labels": {
                                        "type": "array",
                                        "minItems": 0,
                                        "maxItems": 100,
                                        "description": "The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "labels": [
                                            "gpu",
                                            "accelerated"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove all custom labels from a self-hosted runner for an organization",
                "description": "Remove all custom labels from a self-hosted runner configured in an\norganization. Returns the remaining read-only labels from the runner.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/remove-all-custom-labels-from-self-hosted-runner-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/runners/{runner_id}/labels/{name}": {
            "delete": {
                "summary": "Remove a custom label from a self-hosted runner for an organization",
                "description": "Remove a custom label from a self-hosted runner configured\nin an organization. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/remove-custom-label-from-self-hosted-runner-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of a self-hosted runner's custom label.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/secrets": {
            "get": {
                "summary": "List organization secrets",
                "description": "Lists all secrets available in an organization without revealing their\nencrypted values.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-org-secrets",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/secrets/public-key": {
            "get": {
                "summary": "Get an organization public key",
                "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nThe authenticated user must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-org-public-key",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/secrets/{secret_name}": {
            "get": {
                "summary": "Get an organization secret",
                "description": "Gets a single organization secret without revealing its encrypted value.\n\nThe authenticated user must have collaborator access to a repository to create, update, or read secrets\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update an organization secret",
                "description": "Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-or-update-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "encrypted_value": {
                                        "type": "string",
                                        "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "type": "string",
                                        "description": "ID of the key you used to encrypt the secret."
                                    },
                                    "visibility": {
                                        "type": "string",
                                        "description": "Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.",
                                        "enum": [
                                            "all",
                                            "private",
                                            "selected"
                                        ]
                                    },
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "encrypted_value",
                                    "key_id",
                                    "visibility"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678",
                                        "visibility": "selected",
                                        "selected_repository_ids": [
                                            1296269,
                                            1296280
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an organization secret",
                "description": "Deletes a secret in an organization using the secret name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/secrets/{secret_name}/repositories": {
            "get": {
                "summary": "List selected repositories for an organization secret",
                "description": "Lists all repositories that have been selected when the `visibility`\nfor repository access to a secret is set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-selected-repos-for-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set selected repositories for an organization secret",
                "description": "Replaces all repositories for an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/set-selected-repos-for-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "selected_repository_ids"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_repository_ids": [
                                            64780797
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
            "put": {
                "summary": "Add selected repository to an organization secret",
                "description": "Adds a repository to an organization secret when the `visibility` for\nrepository access is set to `selected`. For more information about setting the visibility, see [Create or\nupdate an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/add-selected-repo-to-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove selected repository from an organization secret",
                "description": "Removes a repository from an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/remove-selected-repo-from-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/variables": {
            "get": {
                "summary": "List organization variables",
                "description": "Lists all organization variables.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-org-variables",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an organization variable",
                "description": "Creates an organization variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-org-variable",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the variable."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "The value of the variable."
                                    },
                                    "visibility": {
                                        "type": "string",
                                        "description": "The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.",
                                        "enum": [
                                            "all",
                                            "private",
                                            "selected"
                                        ]
                                    },
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "name",
                                    "value",
                                    "visibility"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "USERNAME",
                                        "value": "octocat",
                                        "visibility": "selected",
                                        "selected_repository_ids": [
                                            1296269,
                                            1296280
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/variables/{name}": {
            "get": {
                "summary": "Get an organization variable",
                "description": "Gets a specific variable in an organization.\n\nThe authenticated user must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-org-variable",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update an organization variable",
                "description": "Updates an organization variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/update-org-variable",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the variable."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "The value of the variable."
                                    },
                                    "visibility": {
                                        "type": "string",
                                        "description": "The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.",
                                        "enum": [
                                            "all",
                                            "private",
                                            "selected"
                                        ]
                                    },
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "USERNAME",
                                        "value": "octocat",
                                        "visibility": "selected",
                                        "selected_repository_ids": [
                                            1296269,
                                            1296280
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an organization variable",
                "description": "Deletes an organization variable using the variable name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-org-variable",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/actions/variables/{name}/repositories": {
            "get": {
                "summary": "List selected repositories for an organization variable",
                "description": "Lists all repositories that can access an organization variable\nthat is available to selected repositories.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-selected-repos-for-org-variable",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set selected repositories for an organization variable",
                "description": "Replaces all repositories for an organization variable that is available\nto selected repositories. Organization variables that are available to selected\nrepositories have their `visibility` field set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/set-selected-repos-for-org-variable",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "The IDs of the repositories that can access the organization variable.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "selected_repository_ids"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_repository_ids": [
                                            64780797
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}": {
            "put": {
                "summary": "Add selected repository to an organization variable",
                "description": "Adds a repository to an organization variable that is available to selected repositories.\nOrganization variables that are available to selected repositories have their `visibility` field set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/add-selected-repo-to-org-variable",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove selected repository from an organization variable",
                "description": "Removes a repository from an organization variable that is\navailable to selected repositories. Organization variables that are available to\nselected repositories have their `visibility` field set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/remove-selected-repo-from-org-variable",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/attestations/{subject_digest}": {
            "get": {
                "summary": "List attestations",
                "description": "List a collection of artifact attestations with a given subject digest that are associated with repositories owned by an organization.\n\nThe collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-attestations",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subject_digest",
                        "description": "The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "predicate_type",
                        "description": "Optional filter for fetching attestations with a given predicate type.\nThis option accepts `provenance`, `sbom`, or freeform text for custom predicate types.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/blocks": {
            "get": {
                "summary": "List users blocked by an organization",
                "description": "List the users blocked by an organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-blocked-users",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/blocks/{username}": {
            "get": {
                "summary": "Check if a user is blocked by an organization",
                "description": "Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/check-blocked-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Block a user from an organization",
                "description": "Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/block-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Unblock a user from an organization",
                "description": "Unblocks the given user on behalf of the specified organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/unblock-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/code-scanning/alerts": {
            "get": {
                "summary": "List code scanning alerts for an organization",
                "description": "Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nThe authenticated user must be an owner or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/list-alerts-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tool_name",
                        "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The name of the tool used to generate the code scanning analysis."
                        }
                    },
                    {
                        "name": "tool_guid",
                        "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "nullable": true,
                            "type": "string",
                            "description": "The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data."
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "state",
                        "description": "If specified, only code scanning alerts with this state will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "State of a code scanning alert.",
                            "enum": [
                                "open",
                                "closed",
                                "dismissed",
                                "fixed"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property by which to sort the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "severity",
                        "description": "If specified, only code scanning alerts with this severity will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Severity of a code scanning alert.",
                            "enum": [
                                "critical",
                                "high",
                                "medium",
                                "low",
                                "warning",
                                "note",
                                "error"
                            ]
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/code-security/configurations": {
            "get": {
                "summary": "Get code security configurations for an organization",
                "description": "Lists all code security configurations available in an organization.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/get-configurations-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "target_type",
                        "in": "query",
                        "description": "The target type of the code security configuration",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "global",
                                "all"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a code security configuration",
                "description": "Creates a code security configuration in an organization.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/create-configuration",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the code security configuration. Must be unique within the organization."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A description of the code security configuration",
                                        "maxLength": 255
                                    },
                                    "advanced_security": {
                                        "type": "string",
                                        "description": "The enablement status of GitHub Advanced Security",
                                        "enum": [
                                            "enabled",
                                            "disabled"
                                        ],
                                        "default": "disabled"
                                    },
                                    "dependency_graph": {
                                        "type": "string",
                                        "description": "The enablement status of Dependency Graph",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "enabled"
                                    },
                                    "dependency_graph_autosubmit_action": {
                                        "type": "string",
                                        "description": "The enablement status of Automatic dependency submission",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "dependency_graph_autosubmit_action_options": {
                                        "type": "object",
                                        "description": "Feature options for Automatic dependency submission",
                                        "properties": {
                                            "labeled_runners": {
                                                "type": "boolean",
                                                "description": "Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.",
                                                "default": false
                                            }
                                        }
                                    },
                                    "dependabot_alerts": {
                                        "type": "string",
                                        "description": "The enablement status of Dependabot alerts",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "dependabot_security_updates": {
                                        "type": "string",
                                        "description": "The enablement status of Dependabot security updates",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "code_scanning_default_setup": {
                                        "type": "string",
                                        "description": "The enablement status of code scanning default setup",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "code_scanning_default_setup_options": {
                                        "type": "object",
                                        "description": "Feature options for code scanning default setup",
                                        "nullable": true,
                                        "properties": {
                                            "runner_type": {
                                                "type": "string",
                                                "enum": [
                                                    "standard",
                                                    "labeled",
                                                    "not_set"
                                                ],
                                                "description": "Whether to use labeled runners or standard GitHub runners."
                                            },
                                            "runner_label": {
                                                "nullable": true,
                                                "type": "string",
                                                "description": "The label of the runner to use for code scanning default setup when runner_type is 'labeled'."
                                            }
                                        }
                                    },
                                    "code_scanning_delegated_alert_dismissal": {
                                        "type": "string",
                                        "description": "The enablement status of code scanning delegated alert dismissal",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "not_set"
                                    },
                                    "secret_scanning": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_push_protection": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning push protection",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_delegated_bypass": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning delegated bypass",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_delegated_bypass_options": {
                                        "type": "object",
                                        "description": "Feature options for secret scanning delegated bypass",
                                        "properties": {
                                            "reviewers": {
                                                "type": "array",
                                                "description": "The bypass reviewers for secret scanning delegated bypass",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "reviewer_id",
                                                        "reviewer_type"
                                                    ],
                                                    "properties": {
                                                        "reviewer_id": {
                                                            "type": "integer",
                                                            "description": "The ID of the team or role selected as a bypass reviewer"
                                                        },
                                                        "reviewer_type": {
                                                            "type": "string",
                                                            "description": "The type of the bypass reviewer",
                                                            "enum": [
                                                                "TEAM",
                                                                "ROLE"
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "secret_scanning_validity_checks": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning validity checks",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_non_provider_patterns": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning non provider patterns",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_generic_secrets": {
                                        "type": "string",
                                        "description": "The enablement status of Copilot secret scanning",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning_delegated_alert_dismissal": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning delegated alert dismissal",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "private_vulnerability_reporting": {
                                        "type": "string",
                                        "description": "The enablement status of private vulnerability reporting",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "enforcement": {
                                        "type": "string",
                                        "description": "The enforcement status for a security configuration",
                                        "enum": [
                                            "enforced",
                                            "unenforced"
                                        ],
                                        "default": "enforced"
                                    }
                                },
                                "required": [
                                    "name",
                                    "description"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example for a code security configuration",
                                    "value": {
                                        "name": "octo-org recommended settings",
                                        "description": "This is a code security configuration for octo-org",
                                        "advanced_security": "enabled",
                                        "dependabot_alerts": "enabled",
                                        "dependabot_security_updates": "not_set",
                                        "secret_scanning": "enabled"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/code-security/configurations/defaults": {
            "get": {
                "summary": "Get default code security configurations",
                "description": "Lists the default code security configurations for an organization.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/get-default-configurations",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/code-security/configurations/detach": {
            "delete": {
                "summary": "Detach configurations from repositories",
                "description": "Detach code security configuration(s) from a set of repositories.\nRepositories will retain their settings but will no longer be associated with the configuration.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/detach-configuration",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository IDs to detach from configurations.",
                                        "items": {
                                            "type": "integer",
                                            "description": "Unique identifier of the repository."
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example for detaching repositories from configurations.",
                                    "value": {
                                        "selected_repository_ids": [
                                            32,
                                            91
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/code-security/configurations/{configuration_id}": {
            "get": {
                "summary": "Get a code security configuration",
                "description": "Gets a code security configuration available in an organization.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/get-configuration",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a code security configuration",
                "description": "Updates a code security configuration in an organization.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/update-configuration",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the code security configuration. Must be unique within the organization."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A description of the code security configuration",
                                        "maxLength": 255
                                    },
                                    "advanced_security": {
                                        "type": "string",
                                        "description": "The enablement status of GitHub Advanced Security",
                                        "enum": [
                                            "enabled",
                                            "disabled"
                                        ]
                                    },
                                    "dependency_graph": {
                                        "type": "string",
                                        "description": "The enablement status of Dependency Graph",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "dependency_graph_autosubmit_action": {
                                        "type": "string",
                                        "description": "The enablement status of Automatic dependency submission",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "dependency_graph_autosubmit_action_options": {
                                        "type": "object",
                                        "description": "Feature options for Automatic dependency submission",
                                        "properties": {
                                            "labeled_runners": {
                                                "type": "boolean",
                                                "description": "Whether to use runners labeled with 'dependency-submission' or standard GitHub runners."
                                            }
                                        }
                                    },
                                    "dependabot_alerts": {
                                        "type": "string",
                                        "description": "The enablement status of Dependabot alerts",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "dependabot_security_updates": {
                                        "type": "string",
                                        "description": "The enablement status of Dependabot security updates",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "code_scanning_default_setup": {
                                        "type": "string",
                                        "description": "The enablement status of code scanning default setup",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "code_scanning_default_setup_options": {
                                        "type": "object",
                                        "description": "Feature options for code scanning default setup",
                                        "nullable": true,
                                        "properties": {
                                            "runner_type": {
                                                "type": "string",
                                                "enum": [
                                                    "standard",
                                                    "labeled",
                                                    "not_set"
                                                ],
                                                "description": "Whether to use labeled runners or standard GitHub runners."
                                            },
                                            "runner_label": {
                                                "nullable": true,
                                                "type": "string",
                                                "description": "The label of the runner to use for code scanning default setup when runner_type is 'labeled'."
                                            }
                                        }
                                    },
                                    "code_scanning_delegated_alert_dismissal": {
                                        "type": "string",
                                        "description": "The enablement status of code scanning delegated alert dismissal",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ],
                                        "default": "disabled"
                                    },
                                    "secret_scanning": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_push_protection": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning push protection",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_delegated_bypass": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning delegated bypass",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_delegated_bypass_options": {
                                        "type": "object",
                                        "description": "Feature options for secret scanning delegated bypass",
                                        "properties": {
                                            "reviewers": {
                                                "type": "array",
                                                "description": "The bypass reviewers for secret scanning delegated bypass",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "reviewer_id",
                                                        "reviewer_type"
                                                    ],
                                                    "properties": {
                                                        "reviewer_id": {
                                                            "type": "integer",
                                                            "description": "The ID of the team or role selected as a bypass reviewer"
                                                        },
                                                        "reviewer_type": {
                                                            "type": "string",
                                                            "description": "The type of the bypass reviewer",
                                                            "enum": [
                                                                "TEAM",
                                                                "ROLE"
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "secret_scanning_validity_checks": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning validity checks",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_non_provider_patterns": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning non-provider patterns",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_generic_secrets": {
                                        "type": "string",
                                        "description": "The enablement status of Copilot secret scanning",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "secret_scanning_delegated_alert_dismissal": {
                                        "type": "string",
                                        "description": "The enablement status of secret scanning delegated alert dismissal",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "private_vulnerability_reporting": {
                                        "type": "string",
                                        "description": "The enablement status of private vulnerability reporting",
                                        "enum": [
                                            "enabled",
                                            "disabled",
                                            "not_set"
                                        ]
                                    },
                                    "enforcement": {
                                        "type": "string",
                                        "description": "The enforcement status for a security configuration",
                                        "enum": [
                                            "enforced",
                                            "unenforced"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example for updating a code security configuration",
                                    "value": {
                                        "name": "octo-org recommended settings v2",
                                        "secret_scanning": "disabled",
                                        "code_scanning_default_setup": "enabled"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a code security configuration",
                "description": "Deletes the desired code security configuration from an organization.\nRepositories attached to the configuration will retain their settings but will no longer be associated with\nthe configuration.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/delete-configuration",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/code-security/configurations/{configuration_id}/attach": {
            "post": {
                "summary": "Attach a configuration to repositories",
                "description": "Attach a code security configuration to a set of repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.\n\nIf insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/attach-configuration",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "scope": {
                                        "type": "string",
                                        "description": "The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids`",
                                        "enum": [
                                            "all",
                                            "all_without_configurations",
                                            "public",
                                            "private_or_internal",
                                            "selected"
                                        ]
                                    },
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository IDs to attach the configuration to. You can only provide a list of repository ids when the `scope` is set to `selected`.",
                                        "items": {
                                            "type": "integer",
                                            "description": "Unique identifier of the repository."
                                        }
                                    }
                                },
                                "required": [
                                    "scope"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example for attaching a configuration to some repositories",
                                    "value": {
                                        "scope": "selected",
                                        "selected_repository_ids": [
                                            32,
                                            91
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/code-security/configurations/{configuration_id}/defaults": {
            "put": {
                "summary": "Set a code security configuration as a default for an organization",
                "description": "Sets a code security configuration as a default to be applied to new repositories in your organization.\n\nThis configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/set-configuration-as-default",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "default_for_new_repos": {
                                        "type": "string",
                                        "description": "Specify which types of repository this security configuration should be applied to by default.",
                                        "enum": [
                                            "all",
                                            "none",
                                            "private_and_internal",
                                            "public"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Set this configuration to be enabled by default on all new repositories.",
                                    "value": {
                                        "default_for_new_repos": "all"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/code-security/configurations/{configuration_id}/repositories": {
            "get": {
                "summary": "Get repositories associated with a code security configuration",
                "description": "Lists the repositories associated with a code security configuration in an organization.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/get-repositories-for-configuration",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configuration_id",
                        "description": "The unique identifier of the code security configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "description": "A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.\n\nCan be: `all`, `attached`, `attaching`, `detached`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/codespaces": {
            "get": {
                "summary": "List codespaces for the organization",
                "description": "Lists the codespaces associated to a specified organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/list-in-organization",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/codespaces/access": {
            "put": {
                "summary": "Manage access control for organization codespaces",
                "description": "Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/set-codespaces-access",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true,
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "visibility": {
                                        "type": "string",
                                        "description": "Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.",
                                        "enum": [
                                            "disabled",
                                            "selected_members",
                                            "all_members",
                                            "all_members_and_outside_collaborators"
                                        ]
                                    },
                                    "selected_usernames": {
                                        "type": "array",
                                        "description": "The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "maxItems": 100
                                    }
                                },
                                "required": [
                                    "visibility"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "visibility": "selected_members",
                                        "selected_usernames": [
                                            "johnDoe",
                                            "atomIO"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/codespaces/access/selected_users": {
            "post": {
                "summary": "Add users to Codespaces access for an organization",
                "description": "Codespaces for the specified users will be billed to the organization.\n\nTo use this endpoint, the access settings for the organization must be set to `selected_members`.\nFor information on how to change this setting, see \"[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/set-codespaces-access-users",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true,
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_usernames": {
                                        "type": "array",
                                        "description": "The usernames of the organization members whose codespaces be billed to the organization.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "maxItems": 100
                                    }
                                },
                                "required": [
                                    "selected_usernames"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_usernames": [
                                            "johnDoe",
                                            "atomIO"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove users from Codespaces access for an organization",
                "description": "Codespaces for the specified users will no longer be billed to the organization.\n\nTo use this endpoint, the access settings for the organization must be set to `selected_members`.\nFor information on how to change this setting, see \"[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/delete-codespaces-access-users",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_usernames": {
                                        "type": "array",
                                        "description": "The usernames of the organization members whose codespaces should not be billed to the organization.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "maxItems": 100
                                    }
                                },
                                "required": [
                                    "selected_usernames"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_usernames": [
                                            "johnDoe",
                                            "atomIO"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/codespaces/secrets": {
            "get": {
                "summary": "List organization secrets",
                "description": "Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/list-org-secrets",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/codespaces/secrets/public-key": {
            "get": {
                "summary": "Get an organization public key",
                "description": "Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/get-org-public-key",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/codespaces/secrets/{secret_name}": {
            "get": {
                "summary": "Get an organization secret",
                "description": "Gets an organization development environment secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/get-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update an organization secret",
                "description": "Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/create-or-update-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "encrypted_value": {
                                        "type": "string",
                                        "description": "The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "type": "string",
                                        "description": "The ID of the key you used to encrypt the secret."
                                    },
                                    "visibility": {
                                        "type": "string",
                                        "description": "Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.",
                                        "enum": [
                                            "all",
                                            "private",
                                            "selected"
                                        ]
                                    },
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "visibility"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678",
                                        "visibility": "selected",
                                        "selected_repository_ids": [
                                            1296269,
                                            1296280
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an organization secret",
                "description": "Deletes an organization development environment secret using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/delete-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/codespaces/secrets/{secret_name}/repositories": {
            "get": {
                "summary": "List selected repositories for an organization secret",
                "description": "Lists all repositories that have been selected when the `visibility`\nfor repository access to a secret is set to `selected`.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/list-selected-repos-for-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set selected repositories for an organization secret",
                "description": "Replaces all repositories for an organization development environment secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/set-selected-repos-for-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "selected_repository_ids"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_repository_ids": [
                                            64780797
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
            "put": {
                "summary": "Add selected repository to an organization secret",
                "description": "Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/add-selected-repo-to-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove selected repository from an organization secret",
                "description": "Removes a repository from an organization development environment secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/remove-selected-repo-from-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/copilot/billing": {
            "get": {
                "summary": "Get Copilot seat information and settings for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nGets information about an organization's Copilot subscription, including seat breakdown\nand feature policies. To configure these settings, go to your organization's settings on GitHub.com.\nFor more information, see \"[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization).\"\n\nOnly organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.\n\nOAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.",
                "tags": [
                    "copilot"
                ],
                "operationId": "copilot/get-copilot-organization-details",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/copilot/billing/seats": {
            "get": {
                "summary": "List all Copilot seat assignments for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nLists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.\nOnly organization owners can view assigned seats.\n\nEach seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.\nFor more information about activity data, see \"[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.",
                "tags": [
                    "copilot"
                ],
                "operationId": "copilot/list-copilot-seats",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/copilot/billing/selected_teams": {
            "post": {
                "summary": "Add teams to the Copilot subscription for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nPurchases a GitHub Copilot seat for all users within each specified team.\nThe organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see \"[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization).\"\n\nOnly organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.\nFor more information about setting up a Copilot subscription, see \"[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization).\"\nFor more information about setting a suggestion matching policy, see \"[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching).\"\n\nThe response contains the total number of new seats that were created and existing seats that were refreshed.\n\nOAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.",
                "tags": [
                    "copilot"
                ],
                "operationId": "copilot/add-copilot-seats-for-teams",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_teams": {
                                        "type": "array",
                                        "description": "List of team names within the organization to which to grant access to GitHub Copilot.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "minItems": 1
                                    }
                                },
                                "required": [
                                    "selected_teams"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_teams": [
                                            "engteam1",
                                            "engteam2",
                                            "engteam3"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                }
            },
            "delete": {
                "summary": "Remove teams from the Copilot subscription for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nSets seats for all members of each team specified to \"pending cancellation\".\nThis will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.\nFor more information about disabling access to Copilot, see \"[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization).\"\n\nOnly organization owners can cancel Copilot seats for their organization members.\n\nThe response contains the total number of seats set to \"pending cancellation\".\n\nOAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.",
                "tags": [
                    "copilot"
                ],
                "operationId": "copilot/cancel-copilot-seat-assignment-for-teams",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_teams": {
                                        "type": "array",
                                        "description": "The names of teams from which to revoke access to GitHub Copilot.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "minItems": 1
                                    }
                                },
                                "required": [
                                    "selected_teams"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_teams": [
                                            "engteam1",
                                            "engteam2",
                                            "engteam3"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/orgs/{org}/copilot/billing/selected_users": {
            "post": {
                "summary": "Add users to the Copilot subscription for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nPurchases a GitHub Copilot seat for each user specified.\nThe organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see \"[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization).\"\n\nOnly organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.\nFor more information about setting up a Copilot subscription, see \"[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization).\"\nFor more information about setting a suggestion matching policy, see \"[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching).\"\n\nThe response contains the total number of new seats that were created and existing seats that were refreshed.\n\nOAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.",
                "tags": [
                    "copilot"
                ],
                "operationId": "copilot/add-copilot-seats-for-users",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_usernames": {
                                        "type": "array",
                                        "description": "The usernames of the organization members to be granted access to GitHub Copilot.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "minItems": 1
                                    }
                                },
                                "required": [
                                    "selected_usernames"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_usernames": [
                                            "cooluser1",
                                            "hacker2",
                                            "octocat"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                }
            },
            "delete": {
                "summary": "Remove users from the Copilot subscription for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nSets seats for all users specified to \"pending cancellation\".\nThis will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.\nFor more information about disabling access to Copilot, see \"[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization).\"\n\nOnly organization owners can cancel Copilot seats for their organization members.\n\nThe response contains the total number of seats set to \"pending cancellation\".\n\nOAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.",
                "tags": [
                    "copilot"
                ],
                "operationId": "copilot/cancel-copilot-seat-assignment-for-users",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_usernames": {
                                        "type": "array",
                                        "description": "The usernames of the organization members for which to revoke access to GitHub Copilot.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "minItems": 1
                                    }
                                },
                                "required": [
                                    "selected_usernames"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_usernames": [
                                            "cooluser1",
                                            "hacker2",
                                            "octocat"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/orgs/{org}/copilot/metrics": {
            "get": {
                "summary": "Get Copilot metrics for an organization",
                "description": "Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.\n\n> [!NOTE]\n> This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.\n\nThe response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,\nand the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,\nthey must have telemetry enabled in their IDE.\n\nTo access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.\nOnly organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.\n\nOAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.",
                "tags": [
                    "copilot"
                ],
                "operationId": "copilot/copilot-metrics-for-organization",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "since",
                        "description": "Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "until",
                        "description": "Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 28
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/dependabot/alerts": {
            "get": {
                "summary": "List Dependabot alerts for an organization",
                "description": "Lists Dependabot alerts for an organization.\n\nThe authenticated user must be an owner or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/list-alerts-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `auto_dismissed`, `dismissed`, `fixed`, `open`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "description": "A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ecosystem",
                        "in": "query",
                        "description": "A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package",
                        "in": "query",
                        "description": "A comma-separated list of package names. If specified, only alerts for these packages will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "epss_percentage",
                        "in": "query",
                        "description": "CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:\n- An exact number (`n`)\n- Comparators such as `>n`, `<n`, `>=n`, `<=n`\n- A range like `n..n`, where `n` is a number from 0.0 to 1.0\n\nFilters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "description": "The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "development",
                                "runtime"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed.\n`epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "epss_percentage"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "first",
                        "description": "**Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 30
                        }
                    },
                    {
                        "name": "last",
                        "description": "**Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/dependabot/secrets": {
            "get": {
                "summary": "List organization secrets",
                "description": "Lists all secrets available in an organization without revealing their\nencrypted values.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/list-org-secrets",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/dependabot/secrets/public-key": {
            "get": {
                "summary": "Get an organization public key",
                "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/get-org-public-key",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/dependabot/secrets/{secret_name}": {
            "get": {
                "summary": "Get an organization secret",
                "description": "Gets a single organization secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/get-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update an organization secret",
                "description": "Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/create-or-update-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "encrypted_value": {
                                        "type": "string",
                                        "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "type": "string",
                                        "description": "ID of the key you used to encrypt the secret."
                                    },
                                    "visibility": {
                                        "type": "string",
                                        "description": "Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.",
                                        "enum": [
                                            "all",
                                            "private",
                                            "selected"
                                        ]
                                    },
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "visibility"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678",
                                        "visibility": "selected",
                                        "selected_repository_ids": [
                                            "1296269",
                                            "1296280"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an organization secret",
                "description": "Deletes a secret in an organization using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/delete-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/dependabot/secrets/{secret_name}/repositories": {
            "get": {
                "summary": "List selected repositories for an organization secret",
                "description": "Lists all repositories that have been selected when the `visibility`\nfor repository access to a secret is set to `selected`.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/list-selected-repos-for-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set selected repositories for an organization secret",
                "description": "Replaces all repositories for an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/set-selected-repos-for-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "selected_repository_ids"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_repository_ids": [
                                            64780797
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": {
            "put": {
                "summary": "Add selected repository to an organization secret",
                "description": "Adds a repository to an organization secret when the `visibility` for\nrepository access is set to `selected`. The visibility is set when you [Create or\nupdate an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/add-selected-repo-to-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove selected repository from an organization secret",
                "description": "Removes a repository from an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/remove-selected-repo-from-org-secret",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/docker/conflicts": {
            "get": {
                "summary": "Get list of conflicting packages during Docker migration for organization",
                "description": "Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/list-docker-migration-conflicting-packages-for-organization",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/events": {
            "get": {
                "summary": "List public organization events",
                "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-public-org-events",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/failed_invitations": {
            "get": {
                "summary": "List failed organization invitations",
                "description": "The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-failed-invitations",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/hooks": {
            "get": {
                "summary": "List organization webhooks",
                "description": "List webhooks for an organization.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-webhooks",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an organization webhook",
                "description": "Create a hook that posts payloads in JSON format.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or\nedit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/create-webhook",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Must be passed as \"web\"."
                                    },
                                    "config": {
                                        "type": "object",
                                        "description": "Key/value pairs to provide settings for this webhook.",
                                        "properties": {
                                            "url": {
                                                "type": "string",
                                                "description": "The URL to which the payloads will be delivered.",
                                                "example": "https://example.com/webhook",
                                                "format": "uri"
                                            },
                                            "content_type": {
                                                "type": "string",
                                                "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                                                "example": "\"json\""
                                            },
                                            "secret": {
                                                "type": "string",
                                                "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
                                                "example": "\"********\""
                                            },
                                            "insecure_ssl": {
                                                "oneOf": [
                                                    {
                                                        "type": "string",
                                                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                                                        "example": "\"0\""
                                                    },
                                                    {
                                                        "type": "number"
                                                    }
                                                ]
                                            },
                                            "username": {
                                                "type": "string",
                                                "example": "\"kdaigle\""
                                            },
                                            "password": {
                                                "type": "string",
                                                "example": "\"password\""
                                            }
                                        },
                                        "required": [
                                            "url"
                                        ]
                                    },
                                    "events": {
                                        "type": "array",
                                        "description": "Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `[\"*\"]` to receive all possible events.",
                                        "default": [
                                            "push"
                                        ],
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "active": {
                                        "type": "boolean",
                                        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                                        "default": true
                                    }
                                },
                                "required": [
                                    "name",
                                    "config"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "web",
                                        "active": true,
                                        "events": [
                                            "push",
                                            "pull_request"
                                        ],
                                        "config": {
                                            "url": "http://example.com/webhook",
                                            "content_type": "json"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/hooks/{hook_id}": {
            "get": {
                "summary": "Get an organization webhook",
                "description": "Returns a webhook configured in an organization. To get only the webhook\n`config` properties, see \"[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-webhook",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update an organization webhook",
                "description": "Updates a webhook configured in an organization. When you update a webhook,\nthe `secret` will be overwritten. If you previously had a `secret` set, you must\nprovide the same `secret` or set a new `secret` or the secret will be removed. If\nyou are only updating individual webhook `config` properties, use \"[Update a webhook\nconfiguration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)\".\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/update-webhook",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "config": {
                                        "type": "object",
                                        "description": "Key/value pairs to provide settings for this webhook.",
                                        "properties": {
                                            "url": {
                                                "type": "string",
                                                "description": "The URL to which the payloads will be delivered.",
                                                "example": "https://example.com/webhook",
                                                "format": "uri"
                                            },
                                            "content_type": {
                                                "type": "string",
                                                "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                                                "example": "\"json\""
                                            },
                                            "secret": {
                                                "type": "string",
                                                "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
                                                "example": "\"********\""
                                            },
                                            "insecure_ssl": {
                                                "oneOf": [
                                                    {
                                                        "type": "string",
                                                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                                                        "example": "\"0\""
                                                    },
                                                    {
                                                        "type": "number"
                                                    }
                                                ]
                                            }
                                        },
                                        "required": [
                                            "url"
                                        ]
                                    },
                                    "events": {
                                        "type": "array",
                                        "description": "Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.",
                                        "default": [
                                            "push"
                                        ],
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "active": {
                                        "type": "boolean",
                                        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                                        "default": true
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "\"web\""
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "active": true,
                                        "events": [
                                            "pull_request"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an organization webhook",
                "description": "Delete a webhook for an organization.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/delete-webhook",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/hooks/{hook_id}/config": {
            "get": {
                "summary": "Get a webhook configuration for an organization",
                "description": "Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook).\"\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-webhook-config-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a webhook configuration for an organization",
                "description": "Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook).\"\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/update-webhook-config-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "The URL to which the payloads will be delivered.",
                                        "example": "https://example.com/webhook",
                                        "format": "uri"
                                    },
                                    "content_type": {
                                        "type": "string",
                                        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                                        "example": "\"json\""
                                    },
                                    "secret": {
                                        "type": "string",
                                        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
                                        "example": "\"********\""
                                    },
                                    "insecure_ssl": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                                                "example": "\"0\""
                                            },
                                            {
                                                "type": "number"
                                            }
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Update an existing webhook",
                                    "value": {
                                        "url": "http://example.com/webhook",
                                        "content_type": "json",
                                        "insecure_ssl": "0",
                                        "secret": "********"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/hooks/{hook_id}/deliveries": {
            "get": {
                "summary": "List deliveries for an organization webhook",
                "description": "Returns a list of webhook deliveries for a webhook configured in an organization.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-webhook-deliveries",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}": {
            "get": {
                "summary": "Get a webhook delivery for an organization webhook",
                "description": "Returns a delivery for a webhook configured in an organization.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-webhook-delivery",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "delivery_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": {
            "post": {
                "summary": "Redeliver a delivery for an organization webhook",
                "description": "Redeliver a delivery for a webhook configured in an organization.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/redeliver-webhook-delivery",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "delivery_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/hooks/{hook_id}/pings": {
            "post": {
                "summary": "Ping an organization webhook",
                "description": "This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)\nto be sent to the hook.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/ping-webhook",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}": {
            "get": {
                "summary": "Get route stats by actor",
                "description": "Get API request count statistics for an actor broken down by route within a specified time frame.",
                "tags": [
                    "orgs"
                ],
                "operationId": "api-insights/get-route-stats-by-actor",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "actor_type",
                        "in": "path",
                        "description": "The type of the actor",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "installation",
                                "classic_pat",
                                "fine_grained_pat",
                                "oauth_app",
                                "github_app_user_to_server"
                            ]
                        }
                    },
                    {
                        "name": "actor_id",
                        "in": "path",
                        "description": "The ID of the actor",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "min_timestamp",
                        "description": "The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max_timestamp",
                        "description": "The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "last_rate_limited_timestamp",
                                    "last_request_timestamp",
                                    "rate_limited_request_count",
                                    "http_method",
                                    "api_route",
                                    "total_request_count"
                                ],
                                "default": "total_request_count"
                            }
                        }
                    },
                    {
                        "name": "api_route_substring",
                        "in": "query",
                        "description": "Providing a substring will filter results where the API route contains the substring. This is a case-insensitive search.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/insights/api/subject-stats": {
            "get": {
                "summary": "Get subject stats",
                "description": "Get API request statistics for all subjects within an organization within a specified time frame. Subjects can be users or GitHub Apps.",
                "tags": [
                    "orgs"
                ],
                "operationId": "api-insights/get-subject-stats",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "min_timestamp",
                        "description": "The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max_timestamp",
                        "description": "The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "last_rate_limited_timestamp",
                                    "last_request_timestamp",
                                    "rate_limited_request_count",
                                    "subject_name",
                                    "total_request_count"
                                ],
                                "default": "total_request_count"
                            }
                        }
                    },
                    {
                        "name": "subject_name_substring",
                        "in": "query",
                        "description": "Providing a substring will filter results where the subject name contains the substring. This is a case-insensitive search.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/insights/api/summary-stats": {
            "get": {
                "summary": "Get summary stats",
                "description": "Get overall statistics of API requests made within an organization by all users and apps within a specified time frame.",
                "tags": [
                    "orgs"
                ],
                "operationId": "api-insights/get-summary-stats",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "min_timestamp",
                        "description": "The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max_timestamp",
                        "description": "The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/insights/api/summary-stats/users/{user_id}": {
            "get": {
                "summary": "Get summary stats by user",
                "description": "Get overall statistics of API requests within the organization for a user.",
                "tags": [
                    "orgs"
                ],
                "operationId": "api-insights/get-summary-stats-by-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The ID of the user to query for stats",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "min_timestamp",
                        "description": "The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max_timestamp",
                        "description": "The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}": {
            "get": {
                "summary": "Get summary stats by actor",
                "description": "Get overall statistics of API requests within the organization made by a specific actor. Actors can be GitHub App installations, OAuth apps or other tokens on behalf of a user.",
                "tags": [
                    "orgs"
                ],
                "operationId": "api-insights/get-summary-stats-by-actor",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "min_timestamp",
                        "description": "The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max_timestamp",
                        "description": "The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "actor_type",
                        "in": "path",
                        "description": "The type of the actor",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "installation",
                                "classic_pat",
                                "fine_grained_pat",
                                "oauth_app",
                                "github_app_user_to_server"
                            ]
                        }
                    },
                    {
                        "name": "actor_id",
                        "in": "path",
                        "description": "The ID of the actor",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/insights/api/time-stats": {
            "get": {
                "summary": "Get time stats",
                "description": "Get the number of API requests and rate-limited requests made within an organization over a specified time period.",
                "tags": [
                    "orgs"
                ],
                "operationId": "api-insights/get-time-stats",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "min_timestamp",
                        "description": "The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max_timestamp",
                        "description": "The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timestamp_increment",
                        "description": "The increment of time used to breakdown the query results (5m, 10m, 1h, etc.)",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/insights/api/time-stats/users/{user_id}": {
            "get": {
                "summary": "Get time stats by user",
                "description": "Get the number of API requests and rate-limited requests made within an organization by a specific user over a specified time period.",
                "tags": [
                    "orgs"
                ],
                "operationId": "api-insights/get-time-stats-by-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The ID of the user to query for stats",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "min_timestamp",
                        "description": "The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max_timestamp",
                        "description": "The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timestamp_increment",
                        "description": "The increment of time used to breakdown the query results (5m, 10m, 1h, etc.)",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}": {
            "get": {
                "summary": "Get time stats by actor",
                "description": "Get the number of API requests and rate-limited requests made within an organization by a specific actor within a specified time period.",
                "tags": [
                    "orgs"
                ],
                "operationId": "api-insights/get-time-stats-by-actor",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "actor_type",
                        "in": "path",
                        "description": "The type of the actor",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "installation",
                                "classic_pat",
                                "fine_grained_pat",
                                "oauth_app",
                                "github_app_user_to_server"
                            ]
                        }
                    },
                    {
                        "name": "actor_id",
                        "in": "path",
                        "description": "The ID of the actor",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "min_timestamp",
                        "description": "The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max_timestamp",
                        "description": "The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timestamp_increment",
                        "description": "The increment of time used to breakdown the query results (5m, 10m, 1h, etc.)",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/insights/api/user-stats/{user_id}": {
            "get": {
                "summary": "Get user stats",
                "description": "Get API usage statistics within an organization for a user broken down by the type of access.",
                "tags": [
                    "orgs"
                ],
                "operationId": "api-insights/get-user-stats",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The ID of the user to query for stats",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "min_timestamp",
                        "description": "The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max_timestamp",
                        "description": "The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "last_rate_limited_timestamp",
                                    "last_request_timestamp",
                                    "rate_limited_request_count",
                                    "subject_name",
                                    "total_request_count"
                                ],
                                "default": "total_request_count"
                            }
                        }
                    },
                    {
                        "name": "actor_name_substring",
                        "in": "query",
                        "description": "Providing a substring will filter results where the actor name contains the substring. This is a case-insensitive search.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/installation": {
            "get": {
                "summary": "Get an organization installation for the authenticated app",
                "description": "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-org-installation",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/installations": {
            "get": {
                "summary": "List app installations for an organization",
                "description": "Lists all GitHub Apps in an organization. The installation count includes\nall GitHub Apps installed on repositories in the organization.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-app-installations",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/interaction-limits": {
            "get": {
                "summary": "Get interaction restrictions for an organization",
                "description": "Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.",
                "tags": [
                    "interactions"
                ],
                "operationId": "interactions/get-restrictions-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set interaction restrictions for an organization",
                "description": "Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.",
                "tags": [
                    "interactions"
                ],
                "operationId": "interactions/set-restrictions-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Interaction Restrictions",
                                "description": "Limit interactions to a specific type of user for a specified duration",
                                "type": "object",
                                "properties": {
                                    "limit": {
                                        "type": "string",
                                        "description": "The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.",
                                        "example": "collaborators_only",
                                        "enum": [
                                            "existing_users",
                                            "contributors_only",
                                            "collaborators_only"
                                        ]
                                    },
                                    "expiry": {
                                        "type": "string",
                                        "description": "The duration of the interaction restriction. Default: `one_day`.",
                                        "example": "one_month",
                                        "enum": [
                                            "one_day",
                                            "three_days",
                                            "one_week",
                                            "one_month",
                                            "six_months"
                                        ]
                                    }
                                },
                                "required": [
                                    "limit"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "limit": "collaborators_only",
                                        "expiry": "one_month"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove interaction restrictions for an organization",
                "description": "Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.",
                "tags": [
                    "interactions"
                ],
                "operationId": "interactions/remove-restrictions-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/invitations": {
            "get": {
                "summary": "List pending organization invitations",
                "description": "The return hash contains a `role` field which refers to the Organization\nInvitation role and will be one of the following values: `direct_member`, `admin`,\n`billing_manager`, or `hiring_manager`. If the invitee is not a GitHub\nmember, the `login` field in the return hash will be `null`.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-pending-invitations",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "role",
                        "description": "Filter invitations by their member role.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "admin",
                                "direct_member",
                                "billing_manager",
                                "hiring_manager"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "invitation_source",
                        "description": "Filter invitations by their invitation source.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "member",
                                "scim"
                            ],
                            "default": "all"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an organization invitation",
                "description": "Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/create-invitation",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "invitee_id": {
                                        "type": "integer",
                                        "description": "**Required unless you provide `email`**. GitHub user ID for the person you are inviting."
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user."
                                    },
                                    "role": {
                                        "type": "string",
                                        "description": "The role for the new member. \n * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization. \n * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.",
                                        "enum": [
                                            "admin",
                                            "direct_member",
                                            "billing_manager",
                                            "reinstate"
                                        ],
                                        "default": "direct_member"
                                    },
                                    "team_ids": {
                                        "type": "array",
                                        "description": "Specify IDs for the teams you want to invite new members to.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "email": "octocat@github.com",
                                        "role": "direct_member",
                                        "team_ids": [
                                            12,
                                            26
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/invitations/{invitation_id}": {
            "delete": {
                "summary": "Cancel an organization invitation",
                "description": "Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/cancel-invitation",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invitation_id",
                        "description": "The unique identifier of the invitation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/invitations/{invitation_id}/teams": {
            "get": {
                "summary": "List organization invitation teams",
                "description": "List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-invitation-teams",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invitation_id",
                        "description": "The unique identifier of the invitation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/issue-types": {
            "get": {
                "summary": "List issue types for an organization",
                "description": "Lists all issue types for an organization. OAuth app tokens and personal access tokens (classic) need the read:org scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-issue-types",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create issue type for an organization",
                "description": "Create a new issue type for an organization.\n\nYou can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).\n\nTo use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and\npersonal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/create-issue-type",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Name of the issue type.",
                                        "type": "string"
                                    },
                                    "is_enabled": {
                                        "description": "Whether or not the issue type is enabled at the organization level.",
                                        "type": "boolean"
                                    },
                                    "is_private": {
                                        "description": "Whether or not the issue type is restricted to issues in private repositories.",
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "description": "Description of the issue type.",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "color": {
                                        "description": "Color for the issue type.",
                                        "type": "string",
                                        "enum": [
                                            "gray",
                                            "blue",
                                            "green",
                                            "yellow",
                                            "orange",
                                            "red",
                                            "pink",
                                            "purple"
                                        ],
                                        "nullable": true
                                    }
                                },
                                "required": [
                                    "name",
                                    "is_enabled"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Epic",
                                        "description": "An issue type for a multi-week tracking of work",
                                        "is_enabled": true,
                                        "color": "green"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/issue-types/{issue_type_id}": {
            "put": {
                "summary": "Update issue type for an organization",
                "description": "Updates an issue type for an organization.\n\nYou can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).\n\nTo use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and\npersonal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/update-issue-type",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_type_id",
                        "description": "The unique identifier of the issue type.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Name of the issue type.",
                                        "type": "string"
                                    },
                                    "is_enabled": {
                                        "description": "Whether or not the issue type is enabled at the organization level.",
                                        "type": "boolean"
                                    },
                                    "is_private": {
                                        "description": "Whether or not the issue type is restricted to issues in private repositories.",
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "description": "Description of the issue type.",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "color": {
                                        "description": "Color for the issue type.",
                                        "type": "string",
                                        "enum": [
                                            "gray",
                                            "blue",
                                            "green",
                                            "yellow",
                                            "orange",
                                            "red",
                                            "pink",
                                            "purple"
                                        ],
                                        "nullable": true
                                    }
                                },
                                "required": [
                                    "name",
                                    "is_enabled"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Epic",
                                        "description": "An issue type for a multi-week tracking of work",
                                        "is_enabled": true,
                                        "color": "green"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete issue type for an organization",
                "description": "Deletes an issue type for an organization.\n\nYou can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).\n\nTo use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and\npersonal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/delete-issue-type",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_type_id",
                        "description": "The unique identifier of the issue type.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/issues": {
            "get": {
                "summary": "List organization issues assigned to the authenticated user",
                "description": "List issues in an organization assigned to the authenticated user.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "description": "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "assigned",
                                "created",
                                "mentioned",
                                "subscribed",
                                "repos",
                                "all"
                            ],
                            "default": "assigned"
                        }
                    },
                    {
                        "name": "state",
                        "description": "Indicates the state of the issues to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "closed",
                                "all"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "labels",
                        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "description": "Can be the name of an issue type.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "What to sort results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "comments"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/members": {
            "get": {
                "summary": "List organization members",
                "description": "List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-members",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "description": "Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "2fa_disabled",
                                "all"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "role",
                        "description": "Filter members returned by their role.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "admin",
                                "member"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/members/{username}": {
            "get": {
                "summary": "Check organization membership for a user",
                "description": "Check if a user is, publicly or privately, a member of the organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/check-membership-for-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove an organization member",
                "description": "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/remove-member",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/members/{username}/codespaces": {
            "get": {
                "summary": "List codespaces for a user in organization",
                "description": "Lists the codespaces that a member of an organization has for repositories in that organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/get-codespaces-for-user-in-org",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/members/{username}/codespaces/{codespace_name}": {
            "delete": {
                "summary": "Delete a codespace from the organization",
                "description": "Deletes a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/delete-from-organization",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop": {
            "post": {
                "summary": "Stop a codespace for an organization user",
                "description": "Stops a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/stop-in-organization",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/members/{username}/copilot": {
            "get": {
                "summary": "Get Copilot seat assignment details for a user",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nGets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.\n\nThe seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.\nFor more information about activity data, see \"[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization).\"\n\nOnly organization owners can view Copilot seat assignment details for members of their organization.\n\nOAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.",
                "tags": [
                    "copilot"
                ],
                "operationId": "copilot/get-copilot-seat-details-for-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/memberships/{username}": {
            "get": {
                "summary": "Get organization membership for a user",
                "description": "In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-membership-for-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set organization membership for a user",
                "description": "Only authenticated organization owners can add a member to the organization or update the member's role.\n\n*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n    \n*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n\n**Rate limits**\n\nTo prevent abuse, organization owners are limited to creating 50 organization invitations for an organization within a 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/set-membership-for-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "description": "The role to give the user in the organization. Can be one of:  \n * `admin` - The user will become an owner of the organization.  \n * `member` - The user will become a non-owner member of the organization.",
                                        "enum": [
                                            "admin",
                                            "member"
                                        ],
                                        "default": "member"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Set an organization membership role for a user",
                                    "value": {
                                        "role": "member"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove organization membership for a user",
                "description": "In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n\nIf the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/remove-membership-for-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/migrations": {
            "get": {
                "summary": "List organization migrations",
                "description": "Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).\n\nA list of `repositories` is only returned for export migrations.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/list-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "exclude",
                        "description": "Exclude attributes from the API response to improve performance",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "description": "Allowed values that can be passed to the exclude param.",
                                "enum": [
                                    "repositories"
                                ],
                                "example": "repositories",
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "post": {
                "summary": "Start an organization migration",
                "description": "Initiates the generation of a migration archive.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/start-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "repositories": {
                                        "type": "array",
                                        "description": "A list of arrays indicating which repositories should be migrated.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "lock_repositories": {
                                        "type": "boolean",
                                        "example": true,
                                        "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
                                        "default": false
                                    },
                                    "exclude_metadata": {
                                        "type": "boolean",
                                        "description": "Indicates whether metadata should be excluded and only git source should be included for the migration.",
                                        "default": false
                                    },
                                    "exclude_git_data": {
                                        "type": "boolean",
                                        "description": "Indicates whether the repository git data should be excluded from the migration.",
                                        "default": false
                                    },
                                    "exclude_attachments": {
                                        "type": "boolean",
                                        "example": true,
                                        "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
                                        "default": false
                                    },
                                    "exclude_releases": {
                                        "type": "boolean",
                                        "example": true,
                                        "description": "Indicates whether releases should be excluded from the migration (to reduce migration archive file size).",
                                        "default": false
                                    },
                                    "exclude_owner_projects": {
                                        "type": "boolean",
                                        "example": true,
                                        "description": "Indicates whether projects owned by the organization or users should be excluded. from the migration.",
                                        "default": false
                                    },
                                    "org_metadata_only": {
                                        "type": "boolean",
                                        "example": true,
                                        "description": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).",
                                        "default": false
                                    },
                                    "exclude": {
                                        "type": "array",
                                        "description": "Exclude related items from being returned in the response in order to improve performance of the request.",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "repositories"
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "repositories"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "repositories": [
                                            "github/Hello-World"
                                        ],
                                        "lock_repositories": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/migrations/{migration_id}": {
            "get": {
                "summary": "Get an organization migration status",
                "description": "Fetches the status of a migration.\n\nThe `state` of a migration can be one of the following values:\n\n*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/get-status-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "exclude",
                        "description": "Exclude attributes from the API response to improve performance",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "description": "Allowed values that can be passed to the exclude param.",
                                "enum": [
                                    "repositories"
                                ],
                                "example": "repositories",
                                "type": "string"
                            }
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/migrations/{migration_id}/archive": {
            "get": {
                "summary": "Download an organization migration archive",
                "description": "Fetches the URL to a migration archive.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/download-archive-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete an organization migration archive",
                "description": "Deletes a previous migration archive. Migration archives are automatically deleted after seven days.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/delete-archive-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": {
            "delete": {
                "summary": "Unlock an organization repository",
                "description": "Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/unlock-repo-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "repo_name",
                        "description": "repo_name parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/migrations/{migration_id}/repositories": {
            "get": {
                "summary": "List repositories in an organization migration",
                "description": "List all the repositories for this organization migration.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/list-repos-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/organization-roles": {
            "get": {
                "summary": "Get all organization roles for an organization",
                "description": "Lists the organization roles available in this organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-org-roles",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/organization-roles/teams/{team_slug}": {
            "delete": {
                "summary": "Remove all organization roles for a team",
                "description": "Removes all assigned organization roles from a team. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/revoke-all-org-roles-team",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}": {
            "put": {
                "summary": "Assign an organization role to a team",
                "description": "Assigns an organization role to a team in an organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/assign-team-to-org-role",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "description": "The unique identifier of the role.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove an organization role from a team",
                "description": "Removes an organization role from a team. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/revoke-org-role-team",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "description": "The unique identifier of the role.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/organization-roles/users/{username}": {
            "delete": {
                "summary": "Remove all organization roles for a user",
                "description": "Revokes all assigned organization roles from a user. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/revoke-all-org-roles-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/organization-roles/users/{username}/{role_id}": {
            "put": {
                "summary": "Assign an organization role to a user",
                "description": "Assigns an organization role to a member of an organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/assign-user-to-org-role",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "description": "The unique identifier of the role.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove an organization role from a user",
                "description": "Remove an organization role from a user. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/revoke-org-role-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "description": "The unique identifier of the role.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/organization-roles/{role_id}": {
            "get": {
                "summary": "Get an organization role",
                "description": "Gets an organization role that is available to this organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-org-role",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "description": "The unique identifier of the role.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/organization-roles/{role_id}/teams": {
            "get": {
                "summary": "List teams that are assigned to an organization role",
                "description": "Lists the teams that are assigned to an organization role. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nTo use this endpoint, you must be an administrator for the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-org-role-teams",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "description": "The unique identifier of the role.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/organization-roles/{role_id}/users": {
            "get": {
                "summary": "List users that are assigned to an organization role",
                "description": "Lists organization members that are assigned to an organization role. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nTo use this endpoint, you must be an administrator for the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-org-role-users",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role_id",
                        "description": "The unique identifier of the role.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/outside_collaborators": {
            "get": {
                "summary": "List outside collaborators for an organization",
                "description": "List all users who are outside collaborators of an organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-outside-collaborators",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "description": "Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "2fa_disabled",
                                "all"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/outside_collaborators/{username}": {
            "put": {
                "summary": "Convert an organization member to outside collaborator",
                "description": "When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/convert-member-to-outside-collaborator",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "async": {
                                        "type": "boolean",
                                        "description": "When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.",
                                        "default": false
                                    }
                                }
                            },
                            "examples": {
                                "202": {
                                    "summary": "Status code 202, asynchronous request",
                                    "value": {
                                        "async": true
                                    }
                                },
                                "204": {
                                    "summary": "Status code 204, synchronous request",
                                    "value": null
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove outside collaborator from an organization",
                "description": "Removing a user from this list will remove them from all the organization's repositories.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/remove-outside-collaborator",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/packages": {
            "get": {
                "summary": "List packages for an organization",
                "description": "Lists packages in an organization readable by the user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/list-packages-for-organization",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "visibility",
                        "description": "The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "public",
                                "private",
                                "internal"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/packages/{package_type}/{package_name}": {
            "get": {
                "summary": "Get a package for an organization",
                "description": "Gets a specific package in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/get-package-for-organization",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a package for an organization",
                "description": "Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/delete-package-for-org",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/packages/{package_type}/{package_name}/restore": {
            "post": {
                "summary": "Restore a package for an organization",
                "description": "Restores an entire package in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/restore-package-for-org",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "token",
                        "description": "package token",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "in": "query"
                    }
                ]
            }
        },
        "/orgs/{org}/packages/{package_type}/{package_name}/versions": {
            "get": {
                "summary": "List package versions for a package owned by an organization",
                "description": "Lists package versions for a package owned by an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/get-all-package-versions-for-package-owned-by-org",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "required": false,
                        "description": "The state of the package, either active or deleted.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "deleted"
                            ],
                            "default": "active"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
            "get": {
                "summary": "Get a package version for an organization",
                "description": "Gets a specific package version in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/get-package-version-for-organization",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package_version_id",
                        "description": "Unique identifier of the package version.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete package version for an organization",
                "description": "Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/delete-package-version-for-org",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package_version_id",
                        "description": "Unique identifier of the package version.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
            "post": {
                "summary": "Restore package version for an organization",
                "description": "Restores a specific package version in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/restore-package-version-for-org",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package_version_id",
                        "description": "Unique identifier of the package version.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/personal-access-token-requests": {
            "get": {
                "summary": "List requests to access organization resources with fine-grained personal access tokens",
                "description": "Lists requests from organization members to access organization resources with a fine-grained personal access token.\n\nOnly GitHub Apps can use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-pat-grant-requests",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property by which to sort the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at"
                            ],
                            "default": "created_at"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "A list of owner usernames to use to filter the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                                "type": "string"
                            },
                            "example": "owner[]=octocat1,owner[]=octocat2"
                        }
                    },
                    {
                        "name": "repository",
                        "description": "The name of the repository to use to filter the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Hello-World"
                        }
                    },
                    {
                        "name": "permission",
                        "description": "The permission to use to filter the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "issues_read"
                        }
                    },
                    {
                        "name": "last_used_before",
                        "description": "Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "last_used_after",
                        "description": "Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "token_id",
                        "description": "The ID of the token",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                                "type": "string"
                            },
                            "example": "token_id[]=1,token_id[]=2"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Review requests to access organization resources with fine-grained personal access tokens",
                "description": "Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.\n\nOnly GitHub Apps can use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/review-pat-grant-requests-in-bulk",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "pat_request_ids": {
                                        "type": "array",
                                        "description": "Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "minItems": 1,
                                        "maxItems": 100
                                    },
                                    "action": {
                                        "type": "string",
                                        "description": "Action to apply to the requests.",
                                        "enum": [
                                            "approve",
                                            "deny"
                                        ]
                                    },
                                    "reason": {
                                        "type": "string",
                                        "description": "Reason for approving or denying the requests. Max 1024 characters.",
                                        "maxLength": 1024,
                                        "nullable": true
                                    }
                                },
                                "required": [
                                    "action"
                                ]
                            },
                            "examples": {
                                "204": {
                                    "summary": "Example of denying a request",
                                    "value": {
                                        "pat_request_ids": [
                                            42,
                                            73
                                        ],
                                        "action": "deny",
                                        "reason": "Access is too broad."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/personal-access-token-requests/{pat_request_id}": {
            "post": {
                "summary": "Review a request to access organization resources with a fine-grained personal access token",
                "description": "Approves or denies a pending request to access organization resources via a fine-grained personal access token.\n\nOnly GitHub Apps can use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/review-pat-grant-request",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pat_request_id",
                        "in": "path",
                        "description": "Unique identifier of the request for access via fine-grained personal access token.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "type": "string",
                                        "description": "Action to apply to the request.",
                                        "enum": [
                                            "approve",
                                            "deny"
                                        ]
                                    },
                                    "reason": {
                                        "type": "string",
                                        "description": "Reason for approving or denying the request. Max 1024 characters.",
                                        "maxLength": 1024,
                                        "nullable": true
                                    }
                                },
                                "required": [
                                    "action"
                                ]
                            },
                            "examples": {
                                "204": {
                                    "summary": "Example of denying a request",
                                    "value": {
                                        "action": "deny",
                                        "reason": "This request is denied because the access is too broad."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories": {
            "get": {
                "summary": "List repositories requested to be accessed by a fine-grained personal access token",
                "description": "Lists the repositories a fine-grained personal access token request is requesting access to.\n\nOnly GitHub Apps can use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-pat-grant-request-repositories",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pat_request_id",
                        "in": "path",
                        "description": "Unique identifier of the request for access via fine-grained personal access token.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/personal-access-tokens": {
            "get": {
                "summary": "List fine-grained personal access tokens with access to organization resources",
                "description": "Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.\n\nOnly GitHub Apps can use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-pat-grants",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property by which to sort the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at"
                            ],
                            "default": "created_at"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "A list of owner usernames to use to filter the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                                "type": "string"
                            },
                            "example": "owner[]=octocat1,owner[]=octocat2"
                        }
                    },
                    {
                        "name": "repository",
                        "description": "The name of the repository to use to filter the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Hello-World"
                        }
                    },
                    {
                        "name": "permission",
                        "description": "The permission to use to filter the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "issues_read"
                        }
                    },
                    {
                        "name": "last_used_before",
                        "description": "Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "last_used_after",
                        "description": "Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "token_id",
                        "description": "The ID of the token",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "maxItems": 50,
                            "items": {
                                "type": "string"
                            },
                            "example": "token_id[]=1,token_id[]=2"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Update the access to organization resources via fine-grained personal access tokens",
                "description": "Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.\n\nOnly GitHub Apps can use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/update-pat-accesses",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "type": "string",
                                        "description": "Action to apply to the fine-grained personal access token.",
                                        "enum": [
                                            "revoke"
                                        ]
                                    },
                                    "pat_ids": {
                                        "description": "The IDs of the fine-grained personal access tokens.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "description": "Unique identifier of the fine-grained personal access token."
                                        },
                                        "minItems": 1,
                                        "maxItems": 100
                                    }
                                },
                                "required": [
                                    "action",
                                    "pat_ids"
                                ]
                            },
                            "examples": {
                                "204": {
                                    "summary": "Example of revoking a fine-grained personal access token.",
                                    "value": {
                                        "action": "revoke",
                                        "pat_ids": [
                                            1296269,
                                            1296280
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/personal-access-tokens/{pat_id}": {
            "post": {
                "summary": "Update the access a fine-grained personal access token has to organization resources",
                "description": "Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.\n\nOnly GitHub Apps can use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/update-pat-access",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pat_id",
                        "description": "The unique identifier of the fine-grained personal access token.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "type": "string",
                                        "description": "Action to apply to the fine-grained personal access token.",
                                        "enum": [
                                            "revoke"
                                        ]
                                    }
                                },
                                "required": [
                                    "action"
                                ]
                            },
                            "examples": {
                                "204": {
                                    "summary": "Example of revoking a fine-grained personal access token.",
                                    "value": {
                                        "action": "revoke"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/personal-access-tokens/{pat_id}/repositories": {
            "get": {
                "summary": "List repositories a fine-grained personal access token has access to",
                "description": "Lists the repositories a fine-grained personal access token has access to.\n\nOnly GitHub Apps can use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-pat-grant-repositories",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pat_id",
                        "in": "path",
                        "description": "Unique identifier of the fine-grained personal access token.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/private-registries": {
            "get": {
                "summary": "List private registries for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nLists all private registry configurations available at the organization-level without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "private-registries"
                ],
                "operationId": "private-registries/list-org-private-registries",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a private registry for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nCreates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "private-registries"
                ],
                "operationId": "private-registries/create-org-private-registry",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "registry_type": {
                                        "description": "The registry type.",
                                        "type": "string",
                                        "enum": [
                                            "maven_repository"
                                        ]
                                    },
                                    "username": {
                                        "description": "The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication.",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "encrypted_value": {
                                        "description": "The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.",
                                        "type": "string",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "description": "The ID of the key you used to encrypt the secret.",
                                        "type": "string"
                                    },
                                    "visibility": {
                                        "description": "Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.",
                                        "type": "string",
                                        "enum": [
                                            "all",
                                            "private",
                                            "selected"
                                        ]
                                    },
                                    "selected_repository_ids": {
                                        "description": "An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. You can manage the list of selected repositories using the [Update a private registry for an organization](https://docs.github.com/rest/private-registries/organization-configurations#update-a-private-registry-for-an-organization) endpoint. This field should be omitted if `visibility` is set to `all` or `private`.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "registry_type",
                                    "encrypted_value",
                                    "key_id",
                                    "visibility"
                                ]
                            },
                            "examples": {
                                "org-private-registry-with-private-visibility": {
                                    "summary": "Example of a private registry configuration with private visibility",
                                    "value": {
                                        "registry_type": "maven_repository",
                                        "username": "monalisa",
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678",
                                        "visibility": "private"
                                    }
                                },
                                "org-private-registry-with-selected-visibility": {
                                    "summary": "Example of a private registry configuration with selected visibility",
                                    "value": {
                                        "registry_type": "maven_repository",
                                        "username": "monalisa",
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678",
                                        "visibility": "selected",
                                        "selected_repository_ids": [
                                            1296269,
                                            1296280
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/private-registries/public-key": {
            "get": {
                "summary": "Get private registries public key for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nGets the org public key, which is needed to encrypt private registry secrets. You need to encrypt a secret before you can create or update secrets.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "private-registries"
                ],
                "operationId": "private-registries/get-org-public-key",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/private-registries/{secret_name}": {
            "get": {
                "summary": "Get a private registry for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nGet the configuration of a single private registry defined for an organization, omitting its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "private-registries"
                ],
                "operationId": "private-registries/get-org-private-registry",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a private registry for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nUpdates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "private-registries"
                ],
                "operationId": "private-registries/update-org-private-registry",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "registry_type": {
                                        "description": "The registry type.",
                                        "type": "string",
                                        "enum": [
                                            "maven_repository"
                                        ]
                                    },
                                    "username": {
                                        "description": "The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication.",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "encrypted_value": {
                                        "description": "The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.",
                                        "type": "string",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "description": "The ID of the key you used to encrypt the secret.",
                                        "type": "string"
                                    },
                                    "visibility": {
                                        "description": "Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.",
                                        "type": "string",
                                        "enum": [
                                            "all",
                                            "private",
                                            "selected"
                                        ]
                                    },
                                    "selected_repository_ids": {
                                        "description": "An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. This field should be omitted if `visibility` is set to `all` or `private`.",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "username": "monalisa",
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a private registry for an organization",
                "description": "> [!NOTE]\n> This endpoint is in public preview and is subject to change.\n\nDelete a private registry configuration at the organization-level.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.",
                "tags": [
                    "private-registries"
                ],
                "operationId": "private-registries/delete-org-private-registry",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/projects": {
            "get": {
                "summary": "List organization projects",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/list-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "description": "Indicates the state of the projects to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "closed",
                                "all"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            },
            "post": {
                "summary": "Create an organization project",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/create-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the project."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The description of the project."
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Organization Roadmap",
                                        "body": "High-level roadmap for the upcoming year."
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/orgs/{org}/properties/schema": {
            "get": {
                "summary": "Get all custom properties for an organization",
                "description": "Gets all custom properties defined for an organization.\nOrganization members can read these properties.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-all-custom-properties",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Create or update custom properties for an organization",
                "description": "Creates new or updates existing custom properties defined for an organization in a batch.\n\nIf the property already exists, the existing property will be replaced with the new values.\nMissing optional values will fall back to default values, previous values will be overwritten.\nE.g. if a property exists with `values_editable_by: org_and_repo_actors` and it's updated without specifying `values_editable_by`, it will be updated to default value `org_actors`.\n\nTo use this endpoint, the authenticated user must be one of:\n  - An administrator for the organization.\n  - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/create-or-update-custom-properties",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "properties": {
                                        "type": "array",
                                        "description": "The array of custom properties to create or update.",
                                        "items": {
                                            "title": "Organization Custom Property",
                                            "description": "Custom property defined on an organization",
                                            "type": "object",
                                            "properties": {
                                                "property_name": {
                                                    "type": "string",
                                                    "description": "The name of the property"
                                                },
                                                "url": {
                                                    "type": "string",
                                                    "format": "uri",
                                                    "description": "The URL that can be used to fetch, update, or delete info about this property via the API."
                                                },
                                                "source_type": {
                                                    "type": "string",
                                                    "description": "The source type of the property",
                                                    "enum": [
                                                        "organization",
                                                        "enterprise"
                                                    ],
                                                    "example": "organization"
                                                },
                                                "value_type": {
                                                    "type": "string",
                                                    "example": "single_select",
                                                    "enum": [
                                                        "string",
                                                        "single_select",
                                                        "multi_select",
                                                        "true_false"
                                                    ],
                                                    "description": "The type of the value for the property"
                                                },
                                                "required": {
                                                    "type": "boolean",
                                                    "description": "Whether the property is required."
                                                },
                                                "default_value": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    ],
                                                    "nullable": true,
                                                    "description": "Default value of the property"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "description": "Short description of the property"
                                                },
                                                "allowed_values": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "maxLength": 75
                                                    },
                                                    "maxItems": 200,
                                                    "nullable": true,
                                                    "description": "An ordered list of the allowed values of the property.\nThe property can have up to 200 allowed values."
                                                },
                                                "values_editable_by": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "enum": [
                                                        "org_actors",
                                                        "org_and_repo_actors"
                                                    ],
                                                    "example": "org_actors",
                                                    "description": "Who can edit the values of the property"
                                                }
                                            },
                                            "required": [
                                                "property_name",
                                                "value_type"
                                            ]
                                        },
                                        "minItems": 1,
                                        "maxItems": 100
                                    }
                                },
                                "required": [
                                    "properties"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "properties": [
                                            {
                                                "property_name": "environment",
                                                "value_type": "single_select",
                                                "required": true,
                                                "default_value": "production",
                                                "description": "Prod or dev environment",
                                                "allowed_values": [
                                                    "production",
                                                    "development"
                                                ],
                                                "values_editable_by": "org_actors"
                                            },
                                            {
                                                "property_name": "service",
                                                "value_type": "string"
                                            },
                                            {
                                                "property_name": "team",
                                                "value_type": "string",
                                                "description": "Team owning the repository"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/properties/schema/{custom_property_name}": {
            "get": {
                "summary": "Get a custom property for an organization",
                "description": "Gets a custom property that is defined for an organization.\nOrganization members can read these properties.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-custom-property",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "custom_property_name",
                        "description": "The custom property name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update a custom property for an organization",
                "description": "Creates a new or updates an existing custom property that is defined for an organization.\n\nTo use this endpoint, the authenticated user must be one of:\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/create-or-update-custom-property",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "custom_property_name",
                        "description": "The custom property name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Custom Property Set Payload",
                                "description": "Custom property set payload",
                                "type": "object",
                                "properties": {
                                    "value_type": {
                                        "type": "string",
                                        "example": "single_select",
                                        "enum": [
                                            "string",
                                            "single_select",
                                            "multi_select",
                                            "true_false"
                                        ],
                                        "description": "The type of the value for the property"
                                    },
                                    "required": {
                                        "type": "boolean",
                                        "description": "Whether the property is required."
                                    },
                                    "default_value": {
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        ],
                                        "nullable": true,
                                        "description": "Default value of the property"
                                    },
                                    "description": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "Short description of the property"
                                    },
                                    "allowed_values": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "maxLength": 75
                                        },
                                        "maxItems": 200,
                                        "nullable": true,
                                        "description": "An ordered list of the allowed values of the property.\nThe property can have up to 200 allowed values."
                                    },
                                    "values_editable_by": {
                                        "type": "string",
                                        "nullable": true,
                                        "enum": [
                                            "org_actors",
                                            "org_and_repo_actors"
                                        ],
                                        "example": "org_actors",
                                        "description": "Who can edit the values of the property"
                                    }
                                },
                                "required": [
                                    "value_type"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "value_type": "single_select",
                                        "required": true,
                                        "default_value": "production",
                                        "description": "Prod or dev environment",
                                        "allowed_values": [
                                            "production",
                                            "development"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove a custom property for an organization",
                "description": "Removes a custom property that is defined for an organization.\n\nTo use this endpoint, the authenticated user must be one of:\n  - An administrator for the organization.\n  - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/remove-custom-property",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "custom_property_name",
                        "description": "The custom property name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/properties/values": {
            "get": {
                "summary": "List custom property values for organization repositories",
                "description": "Lists organization repositories with all of their custom property values.\nOrganization members can read these properties.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-custom-properties-values-for-repos",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "repository_query",
                        "description": "Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Create or update custom property values for organization repositories",
                "description": "Create new or update existing custom property values for repositories in a batch that belong to an organization.\nEach target repository will have its custom property values updated to match the values provided in the request.\n\nA maximum of 30 repositories can be updated in a single request.\n\nUsing a value of `null` for a custom property will remove or 'unset' the property value from the repository.\n\nTo use this endpoint, the authenticated user must be one of:\n  - An administrator for the organization.\n  - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/create-or-update-custom-properties-values-for-repos",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "repository_names": {
                                        "type": "array",
                                        "description": "The names of repositories that the custom property values will be applied to.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "minItems": 1,
                                        "maxItems": 30
                                    },
                                    "properties": {
                                        "type": "array",
                                        "description": "List of custom property names and associated values to apply to the repositories.",
                                        "items": {
                                            "title": "Custom Property Value",
                                            "description": "Custom property name and associated value",
                                            "type": "object",
                                            "properties": {
                                                "property_name": {
                                                    "type": "string",
                                                    "description": "The name of the property"
                                                },
                                                "value": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    ],
                                                    "description": "The value assigned to the property",
                                                    "nullable": true
                                                }
                                            },
                                            "required": [
                                                "property_name",
                                                "value"
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "repository_names",
                                    "properties"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "repository_names": [
                                            "Hello-World",
                                            "octo-repo"
                                        ],
                                        "properties": [
                                            {
                                                "property_name": "environment",
                                                "value": "production"
                                            },
                                            {
                                                "property_name": "service",
                                                "value": "web"
                                            },
                                            {
                                                "property_name": "team",
                                                "value": "octocat"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/public_members": {
            "get": {
                "summary": "List public organization members",
                "description": "Members of an organization can choose to have their membership publicized or not.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-public-members",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/public_members/{username}": {
            "get": {
                "summary": "Check public organization membership for a user",
                "description": "Check if the provided user is a public member of the organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/check-public-membership-for-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set public organization membership for the authenticated user",
                "description": "The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/set-public-membership-for-authenticated-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove public organization membership for the authenticated user",
                "description": "Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/remove-public-membership-for-authenticated-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/repos": {
            "get": {
                "summary": "List organization repositories",
                "description": "Lists repositories for the specified organization.\n\n> [!NOTE]\n> In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "description": "Specifies the types of repositories you want returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "public",
                                "private",
                                "forks",
                                "sources",
                                "member"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "pushed",
                                "full_name"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an organization repository",
                "description": "Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the repository."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A short description of the repository."
                                    },
                                    "homepage": {
                                        "type": "string",
                                        "description": "A URL with more information about the repository."
                                    },
                                    "private": {
                                        "type": "boolean",
                                        "description": "Whether the repository is private.",
                                        "default": false
                                    },
                                    "visibility": {
                                        "type": "string",
                                        "description": "The visibility of the repository.",
                                        "enum": [
                                            "public",
                                            "private"
                                        ]
                                    },
                                    "has_issues": {
                                        "type": "boolean",
                                        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
                                        "default": true
                                    },
                                    "has_projects": {
                                        "type": "boolean",
                                        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                                        "default": true
                                    },
                                    "has_wiki": {
                                        "type": "boolean",
                                        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
                                        "default": true
                                    },
                                    "has_downloads": {
                                        "description": "Whether downloads are enabled.",
                                        "default": true,
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "is_template": {
                                        "type": "boolean",
                                        "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
                                        "default": false
                                    },
                                    "team_id": {
                                        "type": "integer",
                                        "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization."
                                    },
                                    "auto_init": {
                                        "type": "boolean",
                                        "description": "Pass `true` to create an initial commit with empty README.",
                                        "default": false
                                    },
                                    "gitignore_template": {
                                        "type": "string",
                                        "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\"."
                                    },
                                    "license_template": {
                                        "type": "string",
                                        "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\"."
                                    },
                                    "allow_squash_merge": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
                                        "default": true
                                    },
                                    "allow_merge_commit": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
                                        "default": true
                                    },
                                    "allow_rebase_merge": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
                                        "default": true
                                    },
                                    "allow_auto_merge": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.",
                                        "default": false
                                    },
                                    "delete_branch_on_merge": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**",
                                        "default": false
                                    },
                                    "use_squash_pr_title_as_default": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.",
                                        "default": false,
                                        "deprecated": true
                                    },
                                    "squash_merge_commit_title": {
                                        "type": "string",
                                        "enum": [
                                            "PR_TITLE",
                                            "COMMIT_OR_PR_TITLE"
                                        ],
                                        "description": "Required when using `squash_merge_commit_message`.\n\nThe default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
                                    },
                                    "squash_merge_commit_message": {
                                        "type": "string",
                                        "enum": [
                                            "PR_BODY",
                                            "COMMIT_MESSAGES",
                                            "BLANK"
                                        ],
                                        "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
                                    },
                                    "merge_commit_title": {
                                        "type": "string",
                                        "enum": [
                                            "PR_TITLE",
                                            "MERGE_MESSAGE"
                                        ],
                                        "description": "Required when using `merge_commit_message`.\n\nThe default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
                                    },
                                    "merge_commit_message": {
                                        "type": "string",
                                        "enum": [
                                            "PR_BODY",
                                            "PR_TITLE",
                                            "BLANK"
                                        ],
                                        "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
                                    },
                                    "custom_properties": {
                                        "type": "object",
                                        "description": "The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.",
                                        "additionalProperties": true
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Hello-World",
                                        "description": "This is your first repository",
                                        "homepage": "https://github.com",
                                        "private": false,
                                        "has_issues": true,
                                        "has_projects": true,
                                        "has_wiki": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/rulesets": {
            "get": {
                "summary": "Get all organization repository rulesets",
                "description": "Get all the repository rulesets for an organization.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-org-rulesets",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "targets",
                        "description": "A comma-separated list of rule targets to filter by.\nIf provided, only rulesets that apply to the specified targets will be returned.\nFor example, `branch,tag,push`.\n",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "branch,tag,push"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an organization repository ruleset",
                "description": "Create a repository ruleset for an organization.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-org-ruleset",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the ruleset."
                                    },
                                    "target": {
                                        "type": "string",
                                        "description": "The target of the ruleset",
                                        "enum": [
                                            "branch",
                                            "tag",
                                            "push",
                                            "repository"
                                        ],
                                        "default": "branch"
                                    },
                                    "enforcement": {
                                        "type": "string",
                                        "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).",
                                        "enum": [
                                            "disabled",
                                            "active",
                                            "evaluate"
                                        ]
                                    },
                                    "bypass_actors": {
                                        "type": "array",
                                        "description": "The actors that can bypass the rules in this ruleset",
                                        "items": {
                                            "title": "Repository Ruleset Bypass Actor",
                                            "type": "object",
                                            "description": "An actor that can bypass rules in a ruleset",
                                            "required": [
                                                "actor_type"
                                            ],
                                            "properties": {
                                                "actor_id": {
                                                    "type": "integer",
                                                    "nullable": true,
                                                    "description": "The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories."
                                                },
                                                "actor_type": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Integration",
                                                        "OrganizationAdmin",
                                                        "RepositoryRole",
                                                        "Team",
                                                        "DeployKey"
                                                    ],
                                                    "description": "The type of actor that can bypass a ruleset."
                                                },
                                                "bypass_mode": {
                                                    "type": "string",
                                                    "description": "When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.",
                                                    "enum": [
                                                        "always",
                                                        "pull_request"
                                                    ],
                                                    "default": "always"
                                                }
                                            }
                                        }
                                    },
                                    "conditions": {
                                        "title": "Organization ruleset conditions",
                                        "type": "object",
                                        "description": "Conditions for an organization ruleset.\nThe branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.\nThe push rulesets conditions object does not require the `ref_name` property.\nFor repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.",
                                        "oneOf": [
                                            {
                                                "type": "object",
                                                "title": "repository_name_and_ref_name",
                                                "description": "Conditions to target repositories by name and refs by name",
                                                "allOf": [
                                                    {
                                                        "title": "Repository ruleset conditions for ref names",
                                                        "type": "object",
                                                        "description": "Parameters for a repository ruleset ref name condition",
                                                        "properties": {
                                                            "ref_name": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Repository ruleset conditions for repository names",
                                                        "type": "object",
                                                        "description": "Parameters for a repository name condition",
                                                        "properties": {
                                                            "repository_name": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "protected": {
                                                                        "type": "boolean",
                                                                        "description": "Whether renaming of target repositories is prevented."
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "required": [
                                                            "repository_name"
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "title": "repository_id_and_ref_name",
                                                "description": "Conditions to target repositories by id and refs by name",
                                                "allOf": [
                                                    {
                                                        "title": "Repository ruleset conditions for ref names",
                                                        "type": "object",
                                                        "description": "Parameters for a repository ruleset ref name condition",
                                                        "properties": {
                                                            "ref_name": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Repository ruleset conditions for repository IDs",
                                                        "type": "object",
                                                        "description": "Parameters for a repository ID condition",
                                                        "properties": {
                                                            "repository_id": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "repository_ids": {
                                                                        "type": "array",
                                                                        "description": "The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.",
                                                                        "items": {
                                                                            "type": "integer"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "required": [
                                                            "repository_id"
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "title": "repository_property_and_ref_name",
                                                "description": "Conditions to target repositories by property and refs by name",
                                                "allOf": [
                                                    {
                                                        "title": "Repository ruleset conditions for ref names",
                                                        "type": "object",
                                                        "description": "Parameters for a repository ruleset ref name condition",
                                                        "properties": {
                                                            "ref_name": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Repository ruleset conditions for repository properties",
                                                        "type": "object",
                                                        "description": "Parameters for a repository property condition",
                                                        "properties": {
                                                            "repository_property": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "The repository properties and values to include. All of these properties must match for the condition to pass.",
                                                                        "items": {
                                                                            "title": "Repository ruleset property targeting definition",
                                                                            "type": "object",
                                                                            "description": "Parameters for a targeting a repository property",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string",
                                                                                    "description": "The name of the repository property to target"
                                                                                },
                                                                                "property_values": {
                                                                                    "type": "array",
                                                                                    "description": "The values to match for the repository property",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "source": {
                                                                                    "type": "string",
                                                                                    "description": "The source of the repository property. Defaults to 'custom' if not specified.",
                                                                                    "enum": [
                                                                                        "custom",
                                                                                        "system"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "property_values"
                                                                            ]
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "The repository properties and values to exclude. The condition will not pass if any of these properties match.",
                                                                        "items": {
                                                                            "title": "Repository ruleset property targeting definition",
                                                                            "type": "object",
                                                                            "description": "Parameters for a targeting a repository property",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string",
                                                                                    "description": "The name of the repository property to target"
                                                                                },
                                                                                "property_values": {
                                                                                    "type": "array",
                                                                                    "description": "The values to match for the repository property",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "source": {
                                                                                    "type": "string",
                                                                                    "description": "The source of the repository property. Defaults to 'custom' if not specified.",
                                                                                    "enum": [
                                                                                        "custom",
                                                                                        "system"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "property_values"
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "required": [
                                                            "repository_property"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "rules": {
                                        "type": "array",
                                        "description": "An array of rules within the ruleset.",
                                        "items": {
                                            "title": "Repository Rule",
                                            "type": "object",
                                            "description": "A repository rule.",
                                            "oneOf": [
                                                {
                                                    "title": "creation",
                                                    "description": "Only allow users with bypass permission to create matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "creation"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "update",
                                                    "description": "Only allow users with bypass permission to update matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "update"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "update_allows_fetch_and_merge": {
                                                                    "type": "boolean",
                                                                    "description": "Branch can pull changes from its upstream repository"
                                                                }
                                                            },
                                                            "required": [
                                                                "update_allows_fetch_and_merge"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "deletion",
                                                    "description": "Only allow users with bypass permissions to delete matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "deletion"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_linear_history",
                                                    "description": "Prevent merge commits from being pushed to matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_linear_history"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "merge_queue",
                                                    "description": "Merges must be performed via a merge queue.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "merge_queue"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "check_response_timeout_minutes": {
                                                                    "type": "integer",
                                                                    "description": "Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed",
                                                                    "minimum": 1,
                                                                    "maximum": 360
                                                                },
                                                                "grouping_strategy": {
                                                                    "type": "string",
                                                                    "description": "When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.",
                                                                    "enum": [
                                                                        "ALLGREEN",
                                                                        "HEADGREEN"
                                                                    ]
                                                                },
                                                                "max_entries_to_build": {
                                                                    "type": "integer",
                                                                    "description": "Limit the number of queued pull requests requesting checks and workflow runs at the same time.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "max_entries_to_merge": {
                                                                    "type": "integer",
                                                                    "description": "The maximum number of PRs that will be merged together in a group.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "merge_method": {
                                                                    "type": "string",
                                                                    "description": "Method to use when merging changes from queued pull requests.",
                                                                    "enum": [
                                                                        "MERGE",
                                                                        "SQUASH",
                                                                        "REBASE"
                                                                    ]
                                                                },
                                                                "min_entries_to_merge": {
                                                                    "type": "integer",
                                                                    "description": "The minimum number of PRs that will be merged together in a group.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "min_entries_to_merge_wait_minutes": {
                                                                    "type": "integer",
                                                                    "description": "The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.",
                                                                    "minimum": 0,
                                                                    "maximum": 360
                                                                }
                                                            },
                                                            "required": [
                                                                "check_response_timeout_minutes",
                                                                "grouping_strategy",
                                                                "max_entries_to_build",
                                                                "max_entries_to_merge",
                                                                "merge_method",
                                                                "min_entries_to_merge",
                                                                "min_entries_to_merge_wait_minutes"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_deployments",
                                                    "description": "Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_deployments"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "required_deployment_environments": {
                                                                    "type": "array",
                                                                    "description": "The environments that must be successfully deployed to before branches can be merged.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "required_deployment_environments"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_signatures",
                                                    "description": "Commits pushed to matching refs must have verified signatures.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_signatures"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "pull_request",
                                                    "description": "Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "pull_request"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "allowed_merge_methods": {
                                                                    "type": "array",
                                                                    "description": "Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.",
                                                                    "items": {
                                                                        "type": "string",
                                                                        "enum": [
                                                                            "merge",
                                                                            "squash",
                                                                            "rebase"
                                                                        ]
                                                                    }
                                                                },
                                                                "automatic_copilot_code_review_enabled": {
                                                                    "type": "boolean",
                                                                    "description": "> [!NOTE]\n> `automatic_copilot_code_review_enabled` is in beta and subject to change.\n\nAutomatically request review from Copilot for new pull requests, if the author has access to Copilot code review."
                                                                },
                                                                "dismiss_stale_reviews_on_push": {
                                                                    "type": "boolean",
                                                                    "description": "New, reviewable commits pushed will dismiss previous pull request review approvals."
                                                                },
                                                                "require_code_owner_review": {
                                                                    "type": "boolean",
                                                                    "description": "Require an approving review in pull requests that modify files that have a designated code owner."
                                                                },
                                                                "require_last_push_approval": {
                                                                    "type": "boolean",
                                                                    "description": "Whether the most recent reviewable push must be approved by someone other than the person who pushed it."
                                                                },
                                                                "required_approving_review_count": {
                                                                    "type": "integer",
                                                                    "description": "The number of approving reviews that are required before a pull request can be merged.",
                                                                    "minimum": 0,
                                                                    "maximum": 10
                                                                },
                                                                "required_review_thread_resolution": {
                                                                    "type": "boolean",
                                                                    "description": "All conversations on code must be resolved before a pull request can be merged."
                                                                }
                                                            },
                                                            "required": [
                                                                "dismiss_stale_reviews_on_push",
                                                                "require_code_owner_review",
                                                                "require_last_push_approval",
                                                                "required_approving_review_count",
                                                                "required_review_thread_resolution"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_status_checks",
                                                    "description": "Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_status_checks"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "do_not_enforce_on_create": {
                                                                    "type": "boolean",
                                                                    "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                                                                },
                                                                "required_status_checks": {
                                                                    "type": "array",
                                                                    "description": "Status checks that are required.",
                                                                    "items": {
                                                                        "title": "StatusCheckConfiguration",
                                                                        "description": "Required status check",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "context": {
                                                                                "type": "string",
                                                                                "description": "The status check context name that must be present on the commit."
                                                                            },
                                                                            "integration_id": {
                                                                                "type": "integer",
                                                                                "description": "The optional integration ID that this status check must originate from."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "context"
                                                                        ]
                                                                    }
                                                                },
                                                                "strict_required_status_checks_policy": {
                                                                    "type": "boolean",
                                                                    "description": "Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled."
                                                                }
                                                            },
                                                            "required": [
                                                                "required_status_checks",
                                                                "strict_required_status_checks_policy"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "non_fast_forward",
                                                    "description": "Prevent users with push access from force pushing to refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "non_fast_forward"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "commit_message_pattern",
                                                    "description": "Parameters to be used for the commit_message_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "commit_message_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "commit_author_email_pattern",
                                                    "description": "Parameters to be used for the commit_author_email_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "commit_author_email_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "committer_email_pattern",
                                                    "description": "Parameters to be used for the committer_email_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "committer_email_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "branch_name_pattern",
                                                    "description": "Parameters to be used for the branch_name_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "branch_name_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "tag_name_pattern",
                                                    "description": "Parameters to be used for the tag_name_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "tag_name_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "file_path_restriction",
                                                    "description": "Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "file_path_restriction"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "restricted_file_paths": {
                                                                    "type": "array",
                                                                    "description": "The file paths that are restricted from being pushed to the commit graph.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "restricted_file_paths"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "max_file_path_length",
                                                    "description": "Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "max_file_path_length"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "max_file_path_length": {
                                                                    "type": "integer",
                                                                    "description": "The maximum amount of characters allowed in file paths.",
                                                                    "minimum": 1,
                                                                    "maximum": 256
                                                                }
                                                            },
                                                            "required": [
                                                                "max_file_path_length"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "file_extension_restriction",
                                                    "description": "Prevent commits that include files with specified file extensions from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "file_extension_restriction"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "restricted_file_extensions": {
                                                                    "type": "array",
                                                                    "description": "The file extensions that are restricted from being pushed to the commit graph.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "restricted_file_extensions"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "max_file_size",
                                                    "description": "Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "max_file_size"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "max_file_size": {
                                                                    "type": "integer",
                                                                    "description": "The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).",
                                                                    "minimum": 1,
                                                                    "maximum": 100
                                                                }
                                                            },
                                                            "required": [
                                                                "max_file_size"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "workflows",
                                                    "description": "Require all changes made to a targeted branch to pass the specified workflows before they can be merged.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "workflows"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "do_not_enforce_on_create": {
                                                                    "type": "boolean",
                                                                    "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                                                                },
                                                                "workflows": {
                                                                    "type": "array",
                                                                    "description": "Workflows that must pass for this rule to pass.",
                                                                    "items": {
                                                                        "title": "WorkflowFileReference",
                                                                        "description": "A workflow that must run for this rule to pass",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "path": {
                                                                                "type": "string",
                                                                                "description": "The path to the workflow file"
                                                                            },
                                                                            "ref": {
                                                                                "type": "string",
                                                                                "description": "The ref (branch or tag) of the workflow file to use"
                                                                            },
                                                                            "repository_id": {
                                                                                "type": "integer",
                                                                                "description": "The ID of the repository where the workflow is defined"
                                                                            },
                                                                            "sha": {
                                                                                "type": "string",
                                                                                "description": "The commit SHA of the workflow file to use"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "path",
                                                                            "repository_id"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "workflows"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "code_scanning",
                                                    "description": "Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "code_scanning"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "code_scanning_tools": {
                                                                    "type": "array",
                                                                    "description": "Tools that must provide code scanning results for this rule to pass.",
                                                                    "items": {
                                                                        "title": "CodeScanningTool",
                                                                        "description": "A tool that must provide code scanning results for this rule to pass.",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "alerts_threshold": {
                                                                                "type": "string",
                                                                                "description": "The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                                                                "enum": [
                                                                                    "none",
                                                                                    "errors",
                                                                                    "errors_and_warnings",
                                                                                    "all"
                                                                                ]
                                                                            },
                                                                            "security_alerts_threshold": {
                                                                                "type": "string",
                                                                                "description": "The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                                                                "enum": [
                                                                                    "none",
                                                                                    "critical",
                                                                                    "high_or_higher",
                                                                                    "medium_or_higher",
                                                                                    "all"
                                                                                ]
                                                                            },
                                                                            "tool": {
                                                                                "type": "string",
                                                                                "description": "The name of a code scanning tool"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "alerts_threshold",
                                                                            "security_alerts_threshold",
                                                                            "tool"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "code_scanning_tools"
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "name",
                                    "enforcement"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "super cool ruleset",
                                        "target": "branch",
                                        "enforcement": "active",
                                        "bypass_actors": [
                                            {
                                                "actor_id": 234,
                                                "actor_type": "Team",
                                                "bypass_mode": "always"
                                            }
                                        ],
                                        "conditions": {
                                            "ref_name": {
                                                "include": [
                                                    "refs/heads/main",
                                                    "refs/heads/master"
                                                ],
                                                "exclude": [
                                                    "refs/heads/dev*"
                                                ]
                                            },
                                            "repository_name": {
                                                "include": [
                                                    "important_repository",
                                                    "another_important_repository"
                                                ],
                                                "exclude": [
                                                    "unimportant_repository"
                                                ],
                                                "protected": true
                                            }
                                        },
                                        "rules": [
                                            {
                                                "type": "commit_author_email_pattern",
                                                "parameters": {
                                                    "operator": "contains",
                                                    "pattern": "github"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/rulesets/rule-suites": {
            "get": {
                "summary": "List organization rule suites",
                "description": "Lists suites of rule evaluations at the organization level.\nFor more information, see \"[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-org-rule-suites",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "repository_name",
                        "description": "The name of the repository to filter on.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "time_period",
                        "description": "The time period to filter by.\n\nFor example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "hour",
                                "day",
                                "week",
                                "month"
                            ],
                            "default": "day"
                        }
                    },
                    {
                        "name": "actor_name",
                        "description": "The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rule_suite_result",
                        "description": "The rule results to filter on. When specified, only suites with this result will be returned.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pass",
                                "fail",
                                "bypass",
                                "all"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/rulesets/rule-suites/{rule_suite_id}": {
            "get": {
                "summary": "Get an organization rule suite",
                "description": "Gets information about a suite of rule evaluations from within an organization.\nFor more information, see \"[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-org-rule-suite",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rule_suite_id",
                        "description": "The unique identifier of the rule suite result.\nTo get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)\nfor repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)\nfor organizations.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/rulesets/{ruleset_id}": {
            "get": {
                "summary": "Get an organization repository ruleset",
                "description": "Get a repository ruleset for an organization.\n\n**Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user\nmaking the API request has write access to the ruleset.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-org-ruleset",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Update an organization repository ruleset",
                "description": "Update a ruleset for an organization.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-org-ruleset",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the ruleset."
                                    },
                                    "target": {
                                        "type": "string",
                                        "description": "The target of the ruleset",
                                        "enum": [
                                            "branch",
                                            "tag",
                                            "push",
                                            "repository"
                                        ]
                                    },
                                    "enforcement": {
                                        "type": "string",
                                        "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).",
                                        "enum": [
                                            "disabled",
                                            "active",
                                            "evaluate"
                                        ]
                                    },
                                    "bypass_actors": {
                                        "type": "array",
                                        "description": "The actors that can bypass the rules in this ruleset",
                                        "items": {
                                            "title": "Repository Ruleset Bypass Actor",
                                            "type": "object",
                                            "description": "An actor that can bypass rules in a ruleset",
                                            "required": [
                                                "actor_type"
                                            ],
                                            "properties": {
                                                "actor_id": {
                                                    "type": "integer",
                                                    "nullable": true,
                                                    "description": "The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories."
                                                },
                                                "actor_type": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Integration",
                                                        "OrganizationAdmin",
                                                        "RepositoryRole",
                                                        "Team",
                                                        "DeployKey"
                                                    ],
                                                    "description": "The type of actor that can bypass a ruleset."
                                                },
                                                "bypass_mode": {
                                                    "type": "string",
                                                    "description": "When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.",
                                                    "enum": [
                                                        "always",
                                                        "pull_request"
                                                    ],
                                                    "default": "always"
                                                }
                                            }
                                        }
                                    },
                                    "conditions": {
                                        "title": "Organization ruleset conditions",
                                        "type": "object",
                                        "description": "Conditions for an organization ruleset.\nThe branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.\nThe push rulesets conditions object does not require the `ref_name` property.\nFor repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.",
                                        "oneOf": [
                                            {
                                                "type": "object",
                                                "title": "repository_name_and_ref_name",
                                                "description": "Conditions to target repositories by name and refs by name",
                                                "allOf": [
                                                    {
                                                        "title": "Repository ruleset conditions for ref names",
                                                        "type": "object",
                                                        "description": "Parameters for a repository ruleset ref name condition",
                                                        "properties": {
                                                            "ref_name": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Repository ruleset conditions for repository names",
                                                        "type": "object",
                                                        "description": "Parameters for a repository name condition",
                                                        "properties": {
                                                            "repository_name": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "protected": {
                                                                        "type": "boolean",
                                                                        "description": "Whether renaming of target repositories is prevented."
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "required": [
                                                            "repository_name"
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "title": "repository_id_and_ref_name",
                                                "description": "Conditions to target repositories by id and refs by name",
                                                "allOf": [
                                                    {
                                                        "title": "Repository ruleset conditions for ref names",
                                                        "type": "object",
                                                        "description": "Parameters for a repository ruleset ref name condition",
                                                        "properties": {
                                                            "ref_name": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Repository ruleset conditions for repository IDs",
                                                        "type": "object",
                                                        "description": "Parameters for a repository ID condition",
                                                        "properties": {
                                                            "repository_id": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "repository_ids": {
                                                                        "type": "array",
                                                                        "description": "The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.",
                                                                        "items": {
                                                                            "type": "integer"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "required": [
                                                            "repository_id"
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "title": "repository_property_and_ref_name",
                                                "description": "Conditions to target repositories by property and refs by name",
                                                "allOf": [
                                                    {
                                                        "title": "Repository ruleset conditions for ref names",
                                                        "type": "object",
                                                        "description": "Parameters for a repository ruleset ref name condition",
                                                        "properties": {
                                                            "ref_name": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                                        "items": {
                                                                            "type": "string"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Repository ruleset conditions for repository properties",
                                                        "type": "object",
                                                        "description": "Parameters for a repository property condition",
                                                        "properties": {
                                                            "repository_property": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "include": {
                                                                        "type": "array",
                                                                        "description": "The repository properties and values to include. All of these properties must match for the condition to pass.",
                                                                        "items": {
                                                                            "title": "Repository ruleset property targeting definition",
                                                                            "type": "object",
                                                                            "description": "Parameters for a targeting a repository property",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string",
                                                                                    "description": "The name of the repository property to target"
                                                                                },
                                                                                "property_values": {
                                                                                    "type": "array",
                                                                                    "description": "The values to match for the repository property",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "source": {
                                                                                    "type": "string",
                                                                                    "description": "The source of the repository property. Defaults to 'custom' if not specified.",
                                                                                    "enum": [
                                                                                        "custom",
                                                                                        "system"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "property_values"
                                                                            ]
                                                                        }
                                                                    },
                                                                    "exclude": {
                                                                        "type": "array",
                                                                        "description": "The repository properties and values to exclude. The condition will not pass if any of these properties match.",
                                                                        "items": {
                                                                            "title": "Repository ruleset property targeting definition",
                                                                            "type": "object",
                                                                            "description": "Parameters for a targeting a repository property",
                                                                            "properties": {
                                                                                "name": {
                                                                                    "type": "string",
                                                                                    "description": "The name of the repository property to target"
                                                                                },
                                                                                "property_values": {
                                                                                    "type": "array",
                                                                                    "description": "The values to match for the repository property",
                                                                                    "items": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "source": {
                                                                                    "type": "string",
                                                                                    "description": "The source of the repository property. Defaults to 'custom' if not specified.",
                                                                                    "enum": [
                                                                                        "custom",
                                                                                        "system"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "name",
                                                                                "property_values"
                                                                            ]
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "required": [
                                                            "repository_property"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "rules": {
                                        "description": "An array of rules within the ruleset.",
                                        "type": "array",
                                        "items": {
                                            "title": "Repository Rule",
                                            "type": "object",
                                            "description": "A repository rule.",
                                            "oneOf": [
                                                {
                                                    "title": "creation",
                                                    "description": "Only allow users with bypass permission to create matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "creation"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "update",
                                                    "description": "Only allow users with bypass permission to update matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "update"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "update_allows_fetch_and_merge": {
                                                                    "type": "boolean",
                                                                    "description": "Branch can pull changes from its upstream repository"
                                                                }
                                                            },
                                                            "required": [
                                                                "update_allows_fetch_and_merge"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "deletion",
                                                    "description": "Only allow users with bypass permissions to delete matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "deletion"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_linear_history",
                                                    "description": "Prevent merge commits from being pushed to matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_linear_history"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "merge_queue",
                                                    "description": "Merges must be performed via a merge queue.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "merge_queue"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "check_response_timeout_minutes": {
                                                                    "type": "integer",
                                                                    "description": "Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed",
                                                                    "minimum": 1,
                                                                    "maximum": 360
                                                                },
                                                                "grouping_strategy": {
                                                                    "type": "string",
                                                                    "description": "When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.",
                                                                    "enum": [
                                                                        "ALLGREEN",
                                                                        "HEADGREEN"
                                                                    ]
                                                                },
                                                                "max_entries_to_build": {
                                                                    "type": "integer",
                                                                    "description": "Limit the number of queued pull requests requesting checks and workflow runs at the same time.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "max_entries_to_merge": {
                                                                    "type": "integer",
                                                                    "description": "The maximum number of PRs that will be merged together in a group.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "merge_method": {
                                                                    "type": "string",
                                                                    "description": "Method to use when merging changes from queued pull requests.",
                                                                    "enum": [
                                                                        "MERGE",
                                                                        "SQUASH",
                                                                        "REBASE"
                                                                    ]
                                                                },
                                                                "min_entries_to_merge": {
                                                                    "type": "integer",
                                                                    "description": "The minimum number of PRs that will be merged together in a group.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "min_entries_to_merge_wait_minutes": {
                                                                    "type": "integer",
                                                                    "description": "The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.",
                                                                    "minimum": 0,
                                                                    "maximum": 360
                                                                }
                                                            },
                                                            "required": [
                                                                "check_response_timeout_minutes",
                                                                "grouping_strategy",
                                                                "max_entries_to_build",
                                                                "max_entries_to_merge",
                                                                "merge_method",
                                                                "min_entries_to_merge",
                                                                "min_entries_to_merge_wait_minutes"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_deployments",
                                                    "description": "Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_deployments"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "required_deployment_environments": {
                                                                    "type": "array",
                                                                    "description": "The environments that must be successfully deployed to before branches can be merged.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "required_deployment_environments"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_signatures",
                                                    "description": "Commits pushed to matching refs must have verified signatures.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_signatures"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "pull_request",
                                                    "description": "Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "pull_request"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "allowed_merge_methods": {
                                                                    "type": "array",
                                                                    "description": "Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.",
                                                                    "items": {
                                                                        "type": "string",
                                                                        "enum": [
                                                                            "merge",
                                                                            "squash",
                                                                            "rebase"
                                                                        ]
                                                                    }
                                                                },
                                                                "automatic_copilot_code_review_enabled": {
                                                                    "type": "boolean",
                                                                    "description": "> [!NOTE]\n> `automatic_copilot_code_review_enabled` is in beta and subject to change.\n\nAutomatically request review from Copilot for new pull requests, if the author has access to Copilot code review."
                                                                },
                                                                "dismiss_stale_reviews_on_push": {
                                                                    "type": "boolean",
                                                                    "description": "New, reviewable commits pushed will dismiss previous pull request review approvals."
                                                                },
                                                                "require_code_owner_review": {
                                                                    "type": "boolean",
                                                                    "description": "Require an approving review in pull requests that modify files that have a designated code owner."
                                                                },
                                                                "require_last_push_approval": {
                                                                    "type": "boolean",
                                                                    "description": "Whether the most recent reviewable push must be approved by someone other than the person who pushed it."
                                                                },
                                                                "required_approving_review_count": {
                                                                    "type": "integer",
                                                                    "description": "The number of approving reviews that are required before a pull request can be merged.",
                                                                    "minimum": 0,
                                                                    "maximum": 10
                                                                },
                                                                "required_review_thread_resolution": {
                                                                    "type": "boolean",
                                                                    "description": "All conversations on code must be resolved before a pull request can be merged."
                                                                }
                                                            },
                                                            "required": [
                                                                "dismiss_stale_reviews_on_push",
                                                                "require_code_owner_review",
                                                                "require_last_push_approval",
                                                                "required_approving_review_count",
                                                                "required_review_thread_resolution"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_status_checks",
                                                    "description": "Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_status_checks"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "do_not_enforce_on_create": {
                                                                    "type": "boolean",
                                                                    "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                                                                },
                                                                "required_status_checks": {
                                                                    "type": "array",
                                                                    "description": "Status checks that are required.",
                                                                    "items": {
                                                                        "title": "StatusCheckConfiguration",
                                                                        "description": "Required status check",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "context": {
                                                                                "type": "string",
                                                                                "description": "The status check context name that must be present on the commit."
                                                                            },
                                                                            "integration_id": {
                                                                                "type": "integer",
                                                                                "description": "The optional integration ID that this status check must originate from."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "context"
                                                                        ]
                                                                    }
                                                                },
                                                                "strict_required_status_checks_policy": {
                                                                    "type": "boolean",
                                                                    "description": "Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled."
                                                                }
                                                            },
                                                            "required": [
                                                                "required_status_checks",
                                                                "strict_required_status_checks_policy"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "non_fast_forward",
                                                    "description": "Prevent users with push access from force pushing to refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "non_fast_forward"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "commit_message_pattern",
                                                    "description": "Parameters to be used for the commit_message_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "commit_message_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "commit_author_email_pattern",
                                                    "description": "Parameters to be used for the commit_author_email_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "commit_author_email_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "committer_email_pattern",
                                                    "description": "Parameters to be used for the committer_email_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "committer_email_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "branch_name_pattern",
                                                    "description": "Parameters to be used for the branch_name_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "branch_name_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "tag_name_pattern",
                                                    "description": "Parameters to be used for the tag_name_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "tag_name_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "file_path_restriction",
                                                    "description": "Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "file_path_restriction"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "restricted_file_paths": {
                                                                    "type": "array",
                                                                    "description": "The file paths that are restricted from being pushed to the commit graph.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "restricted_file_paths"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "max_file_path_length",
                                                    "description": "Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "max_file_path_length"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "max_file_path_length": {
                                                                    "type": "integer",
                                                                    "description": "The maximum amount of characters allowed in file paths.",
                                                                    "minimum": 1,
                                                                    "maximum": 256
                                                                }
                                                            },
                                                            "required": [
                                                                "max_file_path_length"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "file_extension_restriction",
                                                    "description": "Prevent commits that include files with specified file extensions from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "file_extension_restriction"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "restricted_file_extensions": {
                                                                    "type": "array",
                                                                    "description": "The file extensions that are restricted from being pushed to the commit graph.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "restricted_file_extensions"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "max_file_size",
                                                    "description": "Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "max_file_size"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "max_file_size": {
                                                                    "type": "integer",
                                                                    "description": "The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).",
                                                                    "minimum": 1,
                                                                    "maximum": 100
                                                                }
                                                            },
                                                            "required": [
                                                                "max_file_size"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "workflows",
                                                    "description": "Require all changes made to a targeted branch to pass the specified workflows before they can be merged.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "workflows"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "do_not_enforce_on_create": {
                                                                    "type": "boolean",
                                                                    "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                                                                },
                                                                "workflows": {
                                                                    "type": "array",
                                                                    "description": "Workflows that must pass for this rule to pass.",
                                                                    "items": {
                                                                        "title": "WorkflowFileReference",
                                                                        "description": "A workflow that must run for this rule to pass",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "path": {
                                                                                "type": "string",
                                                                                "description": "The path to the workflow file"
                                                                            },
                                                                            "ref": {
                                                                                "type": "string",
                                                                                "description": "The ref (branch or tag) of the workflow file to use"
                                                                            },
                                                                            "repository_id": {
                                                                                "type": "integer",
                                                                                "description": "The ID of the repository where the workflow is defined"
                                                                            },
                                                                            "sha": {
                                                                                "type": "string",
                                                                                "description": "The commit SHA of the workflow file to use"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "path",
                                                                            "repository_id"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "workflows"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "code_scanning",
                                                    "description": "Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "code_scanning"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "code_scanning_tools": {
                                                                    "type": "array",
                                                                    "description": "Tools that must provide code scanning results for this rule to pass.",
                                                                    "items": {
                                                                        "title": "CodeScanningTool",
                                                                        "description": "A tool that must provide code scanning results for this rule to pass.",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "alerts_threshold": {
                                                                                "type": "string",
                                                                                "description": "The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                                                                "enum": [
                                                                                    "none",
                                                                                    "errors",
                                                                                    "errors_and_warnings",
                                                                                    "all"
                                                                                ]
                                                                            },
                                                                            "security_alerts_threshold": {
                                                                                "type": "string",
                                                                                "description": "The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                                                                "enum": [
                                                                                    "none",
                                                                                    "critical",
                                                                                    "high_or_higher",
                                                                                    "medium_or_higher",
                                                                                    "all"
                                                                                ]
                                                                            },
                                                                            "tool": {
                                                                                "type": "string",
                                                                                "description": "The name of a code scanning tool"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "alerts_threshold",
                                                                            "security_alerts_threshold",
                                                                            "tool"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "code_scanning_tools"
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "super cool ruleset",
                                        "target": "branch",
                                        "enforcement": "active",
                                        "bypass_actors": [
                                            {
                                                "actor_id": 234,
                                                "actor_type": "Team",
                                                "bypass_mode": "always"
                                            }
                                        ],
                                        "conditions": {
                                            "ref_name": {
                                                "include": [
                                                    "refs/heads/main",
                                                    "refs/heads/master"
                                                ],
                                                "exclude": [
                                                    "refs/heads/dev*"
                                                ]
                                            },
                                            "repository_name": {
                                                "include": [
                                                    "important_repository",
                                                    "another_important_repository"
                                                ],
                                                "exclude": [
                                                    "unimportant_repository"
                                                ],
                                                "protected": true
                                            }
                                        },
                                        "rules": [
                                            {
                                                "type": "commit_author_email_pattern",
                                                "parameters": {
                                                    "operator": "contains",
                                                    "pattern": "github"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an organization repository ruleset",
                "description": "Delete a ruleset for an organization.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-org-ruleset",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/rulesets/{ruleset_id}/history": {
            "get": {
                "summary": "Get organization ruleset history",
                "description": "Get the history of an organization ruleset.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-org-ruleset-history",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/rulesets/{ruleset_id}/history/{version_id}": {
            "get": {
                "summary": "Get organization ruleset version",
                "description": "Get a version of an organization ruleset.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-org-ruleset-version",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "version_id",
                        "description": "The ID of the version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/secret-scanning/alerts": {
            "get": {
                "summary": "List secret scanning alerts for an organization",
                "description": "Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "tags": [
                    "secret-scanning"
                ],
                "operationId": "secret-scanning/list-alerts-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "resolved"
                            ]
                        }
                    },
                    {
                        "name": "secret_type",
                        "in": "query",
                        "description": "A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See \"[Supported secret scanning patterns](https://docs.github.com/enterprise-cloud@latest/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)\" for a complete list of secret types.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resolution",
                        "in": "query",
                        "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "description": "A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "is_publicly_leaked",
                        "in": "query",
                        "description": "A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "is_multi_repo",
                        "in": "query",
                        "description": "A boolean value representing whether or not to filter alerts by the multi-repo tag being present.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/security-advisories": {
            "get": {
                "summary": "List repository security advisories for an organization",
                "description": "Lists repository security advisories for an organization.\n\nThe authenticated user must be an owner or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/list-org-repository-advisories",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "published"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of advisories to return per page. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 30
                        }
                    },
                    {
                        "name": "state",
                        "description": "Filter by the state of the repository advisories. Only advisories of this state will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "triage",
                                "draft",
                                "published",
                                "closed"
                            ]
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/security-managers": {
            "get": {
                "summary": "List security manager teams",
                "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the \"[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)\" endpoints instead.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-security-manager-teams",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/orgs/{org}/security-managers/teams/{team_slug}": {
            "put": {
                "summary": "Add a security manager team",
                "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the \"[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)\" endpoints instead.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/add-security-manager-team",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            },
            "delete": {
                "summary": "Remove a security manager team",
                "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the \"[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)\" endpoints instead.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/remove-security-manager-team",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/orgs/{org}/settings/billing/actions": {
            "get": {
                "summary": "Get GitHub Actions billing for an organization",
                "description": "Gets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.",
                "operationId": "billing/get-github-actions-billing-org",
                "tags": [
                    "billing"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/settings/billing/packages": {
            "get": {
                "summary": "Get GitHub Packages billing for an organization",
                "description": "Gets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.",
                "operationId": "billing/get-github-packages-billing-org",
                "tags": [
                    "billing"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/settings/billing/shared-storage": {
            "get": {
                "summary": "Get shared storage billing for an organization",
                "description": "Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.",
                "operationId": "billing/get-shared-storage-billing-org",
                "tags": [
                    "billing"
                ],
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/settings/network-configurations": {
            "get": {
                "summary": "List hosted compute network configurations for an organization",
                "description": "Lists all hosted compute network configurations configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.",
                "tags": [
                    "hosted-compute"
                ],
                "operationId": "hosted-compute/list-network-configurations-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a hosted compute network configuration for an organization",
                "description": "Creates a hosted compute network configuration for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.",
                "tags": [
                    "hosted-compute"
                ],
                "operationId": "hosted-compute/create-network-configuration-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.",
                                        "type": "string"
                                    },
                                    "compute_service": {
                                        "description": "The hosted compute service to use for the network configuration.",
                                        "type": "string",
                                        "enum": [
                                            "none",
                                            "actions"
                                        ]
                                    },
                                    "network_settings_ids": {
                                        "type": "array",
                                        "minItems": 1,
                                        "maxItems": 1,
                                        "description": "The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "name",
                                    "network_settings_ids"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "my-network-configuration",
                                        "network_settings_ids": [
                                            "23456789ABDCEF1"
                                        ],
                                        "compute_service": "actions"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/settings/network-configurations/{network_configuration_id}": {
            "get": {
                "summary": "Get a hosted compute network configuration for an organization",
                "description": "Gets a hosted compute network configuration configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.",
                "tags": [
                    "hosted-compute"
                ],
                "operationId": "hosted-compute/get-network-configuration-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "network_configuration_id",
                        "description": "Unique identifier of the hosted compute network configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a hosted compute network configuration for an organization",
                "description": "Updates a hosted compute network configuration for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.",
                "tags": [
                    "hosted-compute"
                ],
                "operationId": "hosted-compute/update-network-configuration-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "network_configuration_id",
                        "description": "Unique identifier of the hosted compute network configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.",
                                        "type": "string"
                                    },
                                    "compute_service": {
                                        "description": "The hosted compute service to use for the network configuration.",
                                        "type": "string",
                                        "enum": [
                                            "none",
                                            "actions"
                                        ]
                                    },
                                    "network_settings_ids": {
                                        "type": "array",
                                        "minItems": 0,
                                        "maxItems": 1,
                                        "description": "The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "my-network-configuration",
                                        "network_settings_ids": [
                                            "23456789ABDCEF1"
                                        ],
                                        "compute_service": "actions"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a hosted compute network configuration from an organization",
                "description": "Deletes a hosted compute network configuration from an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.",
                "tags": [
                    "hosted-compute"
                ],
                "operationId": "hosted-compute/delete-network-configuration-from-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "network_configuration_id",
                        "description": "Unique identifier of the hosted compute network configuration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/settings/network-settings/{network_settings_id}": {
            "get": {
                "summary": "Get a hosted compute network settings resource for an organization",
                "description": "Gets a hosted compute network settings resource configured for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.",
                "tags": [
                    "hosted-compute"
                ],
                "operationId": "hosted-compute/get-network-settings-for-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "network_settings_id",
                        "description": "Unique identifier of the hosted compute network settings.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/team/{team_slug}/copilot/metrics": {
            "get": {
                "summary": "Get Copilot metrics for a team",
                "description": "Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.\n\n> [!NOTE]\n> This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.\n\nThe response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,\nand the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,\nthey must have telemetry enabled in their IDE.\n\nTo access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.\nOnly organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.\n\nOAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.",
                "tags": [
                    "copilot"
                ],
                "operationId": "copilot/copilot-metrics-for-team",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "since",
                        "description": "Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "until",
                        "description": "Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 28
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams": {
            "get": {
                "summary": "List teams",
                "description": "Lists all teams in an organization that are visible to the authenticated user.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a team",
                "description": "To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization).\"\n\nWhen you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)\".",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/create",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the team."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "The description of the team."
                                    },
                                    "maintainers": {
                                        "type": "array",
                                        "description": "List GitHub IDs for organization members who will become team maintainers.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "repo_names": {
                                        "type": "array",
                                        "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "privacy": {
                                        "type": "string",
                                        "description": "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.  \nDefault for child team: `closed`",
                                        "enum": [
                                            "secret",
                                            "closed"
                                        ]
                                    },
                                    "notification_setting": {
                                        "type": "string",
                                        "description": "The notification setting the team has chosen. The options are:  \n * `notifications_enabled` - team members receive notifications when the team is @mentioned.  \n * `notifications_disabled` - no one receives notifications.  \nDefault: `notifications_enabled`",
                                        "enum": [
                                            "notifications_enabled",
                                            "notifications_disabled"
                                        ]
                                    },
                                    "permission": {
                                        "type": "string",
                                        "description": "**Closing down notice**. The permission that new repositories will be added to the team with when none is specified.",
                                        "enum": [
                                            "pull",
                                            "push"
                                        ],
                                        "default": "pull"
                                    },
                                    "parent_team_id": {
                                        "type": "integer",
                                        "description": "The ID of a team to set as the parent team."
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Justice League",
                                        "description": "A great team",
                                        "permission": "push",
                                        "notification_setting": "notifications_enabled",
                                        "privacy": "closed"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/teams/{team_slug}": {
            "get": {
                "summary": "Get a team by name",
                "description": "Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `\"My TEam N\u00e4me\"` would become `my-team-name`.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/get-by-name",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a team",
                "description": "To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/update-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the team."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "The description of the team."
                                    },
                                    "privacy": {
                                        "type": "string",
                                        "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.",
                                        "enum": [
                                            "secret",
                                            "closed"
                                        ]
                                    },
                                    "notification_setting": {
                                        "type": "string",
                                        "description": "The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: \n * `notifications_enabled` - team members receive notifications when the team is @mentioned.  \n * `notifications_disabled` - no one receives notifications.",
                                        "enum": [
                                            "notifications_enabled",
                                            "notifications_disabled"
                                        ]
                                    },
                                    "permission": {
                                        "type": "string",
                                        "description": "**Closing down notice**. The permission that new repositories will be added to the team with when none is specified.",
                                        "enum": [
                                            "pull",
                                            "push",
                                            "admin"
                                        ],
                                        "default": "pull"
                                    },
                                    "parent_team_id": {
                                        "type": "integer",
                                        "description": "The ID of a team to set as the parent team.",
                                        "nullable": true
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "new team name",
                                        "description": "new team description",
                                        "privacy": "closed",
                                        "notification_setting": "notifications_enabled"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a team",
                "description": "To delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/delete-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/discussions": {
            "get": {
                "summary": "List discussions",
                "description": "List all discussions on a team's page.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-discussions-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "pinned",
                        "in": "query",
                        "required": false,
                        "description": "Pinned discussions only filter",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a discussion",
                "description": "Creates a new discussion post on a team's page.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/create-discussion-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "The discussion post's title."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The discussion post's body text."
                                    },
                                    "private": {
                                        "type": "boolean",
                                        "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
                                        "default": false
                                    }
                                },
                                "required": [
                                    "title",
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "Our first team post",
                                        "body": "Hi! This is an area for us to collaborate as a team."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
            "get": {
                "summary": "Get a discussion",
                "description": "Get a specific discussion on a team's page.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/get-discussion-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a discussion",
                "description": "Edits the title and body text of a discussion post. Only the parameters you provide are updated.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/update-discussion-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "The discussion post's title."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The discussion post's body text."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "Welcome to our first team post"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a discussion",
                "description": "Delete a discussion from a team's page.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/delete-discussion-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
            "get": {
                "summary": "List discussion comments",
                "description": "List all comments on a team discussion.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-discussion-comments-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a discussion comment",
                "description": "Creates a new comment on a team discussion.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/create-discussion-comment-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The discussion comment's body text."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Do you like apples?"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
            "get": {
                "summary": "Get a discussion comment",
                "description": "Get a specific comment on a team discussion.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/get-discussion-comment-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a discussion comment",
                "description": "Edits the body text of a discussion comment.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/update-discussion-comment-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The discussion comment's body text."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Do you like pineapples?"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a discussion comment",
                "description": "Deletes a comment on a team discussion.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/delete-discussion-comment-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
            "get": {
                "summary": "List reactions for a team discussion comment",
                "description": "List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/list-for-team-discussion-comment-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "content",
                        "description": "Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "+1",
                                "-1",
                                "laugh",
                                "confused",
                                "heart",
                                "hooray",
                                "rocket",
                                "eyes"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create reaction for a team discussion comment",
                "description": "Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/create-for-team-discussion-comment-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.",
                                        "enum": [
                                            "+1",
                                            "-1",
                                            "laugh",
                                            "confused",
                                            "heart",
                                            "hooray",
                                            "rocket",
                                            "eyes"
                                        ]
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "heart"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": {
            "delete": {
                "summary": "Delete team discussion comment reaction",
                "description": "> [!NOTE]\n> You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/delete-for-team-discussion-comment",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "reaction_id",
                        "description": "The unique identifier of the reaction.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
            "get": {
                "summary": "List reactions for a team discussion",
                "description": "List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/list-for-team-discussion-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "content",
                        "description": "Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "+1",
                                "-1",
                                "laugh",
                                "confused",
                                "heart",
                                "hooray",
                                "rocket",
                                "eyes"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create reaction for a team discussion",
                "description": "Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/create-for-team-discussion-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.",
                                        "enum": [
                                            "+1",
                                            "-1",
                                            "laugh",
                                            "confused",
                                            "heart",
                                            "hooray",
                                            "rocket",
                                            "eyes"
                                        ]
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "heart"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": {
            "delete": {
                "summary": "Delete team discussion reaction",
                "description": "> [!NOTE]\n> You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/delete-for-team-discussion",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "reaction_id",
                        "description": "The unique identifier of the reaction.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/invitations": {
            "get": {
                "summary": "List pending team invitations",
                "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-pending-invitations-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/members": {
            "get": {
                "summary": "List team members",
                "description": "Team members will include the members of child teams.\n\nTo list members in a team, the team must be visible to the authenticated user.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-members-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role",
                        "description": "Filters members returned by their role in the team.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "member",
                                "maintainer",
                                "all"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/memberships/{username}": {
            "get": {
                "summary": "Get team membership for a user",
                "description": "Team members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n\n> [!NOTE]\n> The response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/get-membership-for-user-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Add or update team membership for a user",
                "description": "Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\n> [!NOTE]\n> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\nAn organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/add-or-update-membership-for-user-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "description": "The role that this user should have in the team.",
                                        "enum": [
                                            "member",
                                            "maintainer"
                                        ],
                                        "default": "member"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Add or update team membership for an organization member",
                                    "value": {
                                        "role": "maintainer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove team membership for a user",
                "description": "To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\n> [!NOTE]\n> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/remove-membership-for-user-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/projects": {
            "get": {
                "summary": "List team projects",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-projects-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
            "get": {
                "summary": "Check team permissions for a project",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/check-permissions-for-project-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            },
            "put": {
                "summary": "Add or update team project permissions",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/add-or-update-project-permissions-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "permission": {
                                        "type": "string",
                                        "description": "The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
                                        "enum": [
                                            "read",
                                            "write",
                                            "admin"
                                        ]
                                    }
                                },
                                "nullable": true
                            },
                            "examples": {
                                "default": {
                                    "summary": "Updates the permissions for the team to write for the project",
                                    "value": {
                                        "permission": "write"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Remove a project from a team",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/remove-project-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/orgs/{org}/teams/{team_slug}/repos": {
            "get": {
                "summary": "List team repositories",
                "description": "Lists a team's repositories visible to the authenticated user.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-repos-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
            "get": {
                "summary": "Check team permissions for a repository",
                "description": "Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n\nIf a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n\nIf the repository is private, you must have at least `read` permission for that repository, and your token must have the `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/check-permissions-for-repo-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Add or update team repository permissions",
                "description": "To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n\nFor more information about the permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/add-or-update-repo-permissions-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "permission": {
                                        "type": "string",
                                        "description": "The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Adding a team to an organization repository with the write role",
                                    "value": {
                                        "permission": "push"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove a repository from a team",
                "description": "If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/remove-repo-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/teams/{team_slug}/teams": {
            "get": {
                "summary": "List child teams",
                "description": "Lists the child teams of the team specified by `{team_slug}`.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-child-in-org",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "team_slug",
                        "description": "The slug of the team name.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/orgs/{org}/{security_product}/{enablement}": {
            "post": {
                "summary": "Enable or disable a security feature for an organization",
                "description": "> [!WARNING]\n> **Closing down notice:** The ability to enable or disable a security feature for all eligible repositories in an organization is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead. For more information, see the [changelog](https://github.blog/changelog/2024-07-22-deprecation-of-api-endpoint-to-enable-or-disable-a-security-feature-for-an-organization/).\n\nEnables or disables the specified security feature for all eligible repositories in an organization. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nThe authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org`, `write:org`, or `repo` scopes to use this endpoint.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/enable-or-disable-security-product-on-all-org-repos",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "security_product",
                        "in": "path",
                        "description": "The security feature to enable or disable.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "dependency_graph",
                                "dependabot_alerts",
                                "dependabot_security_updates",
                                "advanced_security",
                                "code_scanning_default_setup",
                                "secret_scanning",
                                "secret_scanning_push_protection"
                            ]
                        }
                    },
                    {
                        "name": "enablement",
                        "in": "path",
                        "description": "The action to take.\n\n`enable_all` means to enable the specified security feature for all repositories in the organization.\n`disable_all` means to disable the specified security feature for all repositories in the organization.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "enable_all",
                                "disable_all"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "query_suite": {
                                        "description": "CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.\nIf you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.",
                                        "type": "string",
                                        "enum": [
                                            "default",
                                            "extended"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": null
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/projects/columns/cards/{card_id}": {
            "get": {
                "summary": "Get a project card",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/get-card",
                "parameters": [
                    {
                        "name": "card_id",
                        "description": "The unique identifier of the card.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            },
            "patch": {
                "summary": "Update an existing project card",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/update-card",
                "parameters": [
                    {
                        "name": "card_id",
                        "description": "The unique identifier of the card.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "note": {
                                        "description": "The project card's note",
                                        "example": "Update all gems",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "archived": {
                                        "description": "Whether or not the card is archived",
                                        "example": false,
                                        "type": "boolean"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Change the note on the card",
                                    "value": {
                                        "note": "Add payload for delete Project column"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Delete a project card",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/delete-card",
                "parameters": [
                    {
                        "name": "card_id",
                        "description": "The unique identifier of the card.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/projects/columns/cards/{card_id}/moves": {
            "post": {
                "summary": "Move a project card",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/move-card",
                "parameters": [
                    {
                        "name": "card_id",
                        "description": "The unique identifier of the card.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "position": {
                                        "description": "The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.",
                                        "example": "bottom",
                                        "type": "string",
                                        "pattern": "^(?:top|bottom|after:\\d+)$"
                                    },
                                    "column_id": {
                                        "description": "The unique identifier of the column the card should be moved to",
                                        "example": 42,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "position"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "summary": "Move the card to the bottom of the column",
                                    "value": {
                                        "column_id": 42,
                                        "position": "bottom"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/projects/columns/{column_id}": {
            "get": {
                "summary": "Get a project column",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/get-column",
                "parameters": [
                    {
                        "name": "column_id",
                        "description": "The unique identifier of the column.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            },
            "patch": {
                "summary": "Update an existing project column",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/update-column",
                "parameters": [
                    {
                        "name": "column_id",
                        "description": "The unique identifier of the column.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the project column",
                                        "example": "Remaining tasks",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "summary": "Rename the project column",
                                    "value": {
                                        "name": "To Do"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Delete a project column",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/delete-column",
                "parameters": [
                    {
                        "name": "column_id",
                        "description": "The unique identifier of the column.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/projects/columns/{column_id}/cards": {
            "get": {
                "summary": "List project cards",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/list-cards",
                "parameters": [
                    {
                        "name": "column_id",
                        "description": "The unique identifier of the column.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "archived_state",
                        "description": "Filters the project cards that are returned by the card's state.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "archived",
                                "not_archived"
                            ],
                            "default": "not_archived"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            },
            "post": {
                "summary": "Create a project card",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/create-card",
                "parameters": [
                    {
                        "name": "column_id",
                        "description": "The unique identifier of the column.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "note": {
                                                "description": "The project card's note",
                                                "example": "Update all gems",
                                                "type": "string",
                                                "nullable": true
                                            }
                                        },
                                        "required": [
                                            "note"
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "content_id": {
                                                "description": "The unique identifier of the content associated with the card",
                                                "example": 42,
                                                "type": "integer"
                                            },
                                            "content_type": {
                                                "description": "The piece of content associated with the card",
                                                "example": "PullRequest",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "content_id",
                                            "content_type"
                                        ]
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Create a new card",
                                    "value": {
                                        "note": "Add payload for delete Project column"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/projects/columns/{column_id}/moves": {
            "post": {
                "summary": "Move a project column",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/move-column",
                "parameters": [
                    {
                        "name": "column_id",
                        "description": "The unique identifier of the column.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "position": {
                                        "description": "The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.",
                                        "example": "last",
                                        "type": "string",
                                        "pattern": "^(?:first|last|after:\\d+)$"
                                    }
                                },
                                "required": [
                                    "position"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "summary": "Move the column to the end of the board",
                                    "value": {
                                        "position": "last"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/projects/{project_id}": {
            "get": {
                "summary": "Get a project",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/get",
                "parameters": [
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            },
            "patch": {
                "summary": "Update a project",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "operationId": "projects/update",
                "tags": [
                    "projects"
                ],
                "parameters": [
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the project",
                                        "example": "Week One Sprint",
                                        "type": "string"
                                    },
                                    "body": {
                                        "description": "Body of the project",
                                        "example": "This project represents the sprint of the first week in January",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "state": {
                                        "description": "State of the project; either 'open' or 'closed'",
                                        "example": "open",
                                        "type": "string"
                                    },
                                    "organization_permission": {
                                        "description": "The baseline permission that all organization members have on this project",
                                        "type": "string",
                                        "enum": [
                                            "read",
                                            "write",
                                            "admin",
                                            "none"
                                        ]
                                    },
                                    "private": {
                                        "description": "Whether or not this project can be seen by everyone.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "summary": "Change the name, state, and permissions for a project",
                                    "value": {
                                        "name": "Week One Sprint",
                                        "state": "open",
                                        "organization_permission": "write"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Delete a project",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "operationId": "projects/delete",
                "tags": [
                    "projects"
                ],
                "parameters": [
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/projects/{project_id}/collaborators": {
            "get": {
                "summary": "List project collaborators",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/list-collaborators",
                "parameters": [
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "affiliation",
                        "description": "Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "outside",
                                "direct",
                                "all"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/projects/{project_id}/collaborators/{username}": {
            "put": {
                "summary": "Add project collaborator",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/add-collaborator",
                "parameters": [
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "permission": {
                                        "description": "The permission to grant the collaborator.",
                                        "enum": [
                                            "read",
                                            "write",
                                            "admin"
                                        ],
                                        "default": "write",
                                        "example": "write",
                                        "type": "string"
                                    }
                                },
                                "nullable": true
                            },
                            "examples": {
                                "default": {
                                    "summary": "Applying write permissions for the new collaborator",
                                    "value": {
                                        "permission": "write"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Remove user as a collaborator",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/remove-collaborator",
                "parameters": [
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/projects/{project_id}/collaborators/{username}/permission": {
            "get": {
                "summary": "Get project permission for a user",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/get-permission-for-user",
                "parameters": [
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/projects/{project_id}/columns": {
            "get": {
                "summary": "List project columns",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/list-columns",
                "parameters": [
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            },
            "post": {
                "summary": "Create a project column",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/create-column",
                "parameters": [
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the project column",
                                        "example": "Remaining tasks",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Remaining tasks"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/rate_limit": {
            "get": {
                "summary": "Get rate limit status for the authenticated user",
                "description": "> [!NOTE]\n> Accessing this endpoint does not count against your REST API rate limit.\n\nSome categories of endpoints have custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the API response categorizes your rate limit. Under `resources`, you'll see objects relating to different categories:\n* The `core` object provides your rate limit status for all non-search-related resources in the REST API.\n* The `search` object provides your rate limit status for the REST API for searching (excluding code searches). For more information, see \"[Search](https://docs.github.com/rest/search/search).\"\n* The `code_search` object provides your rate limit status for the REST API for searching code. For more information, see \"[Search code](https://docs.github.com/rest/search/search#search-code).\"\n* The `graphql` object provides your rate limit status for the GraphQL API. For more information, see \"[Resource limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit).\"\n* The `integration_manifest` object provides your rate limit status for the `POST /app-manifests/{code}/conversions` operation. For more information, see \"[Creating a GitHub App from a manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration).\"\n* The `dependency_snapshots` object provides your rate limit status for submitting snapshots to the dependency graph. For more information, see \"[Dependency graph](https://docs.github.com/rest/dependency-graph).\"\n* The `code_scanning_upload` object provides your rate limit status for uploading SARIF results to code scanning. For more information, see \"[Uploading a SARIF file to GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github).\"\n* The `actions_runner_registration` object provides your rate limit status for registering self-hosted runners in GitHub Actions. For more information, see \"[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners).\"\n* The `source_import` object is no longer in use for any API endpoints, and it will be removed in the next API version. For more information about API versions, see \"[API Versions](https://docs.github.com/rest/about-the-rest-api/api-versions).\"\n\n> [!NOTE]\n> The `rate` object is closing down. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.",
                "tags": [
                    "rate-limit"
                ],
                "operationId": "rate-limit/get",
                "parameters": []
            }
        },
        "/repos/{owner}/{repo}": {
            "get": {
                "summary": "Get a repository",
                "description": "The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.\n\n> [!NOTE]\n> In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a repository",
                "description": "**Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the repository."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A short description of the repository."
                                    },
                                    "homepage": {
                                        "type": "string",
                                        "description": "A URL with more information about the repository."
                                    },
                                    "private": {
                                        "type": "boolean",
                                        "description": "Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
                                        "default": false
                                    },
                                    "visibility": {
                                        "type": "string",
                                        "description": "The visibility of the repository.",
                                        "enum": [
                                            "public",
                                            "private"
                                        ]
                                    },
                                    "security_and_analysis": {
                                        "type": "object",
                                        "description": "Specify which security and analysis features to enable or disable for the repository.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nFor example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:\n`{ \"security_and_analysis\": {\"advanced_security\": { \"status\": \"enabled\" } } }`.\n\nYou can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.",
                                        "nullable": true,
                                        "properties": {
                                            "advanced_security": {
                                                "type": "object",
                                                "description": "Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see \"[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).\"",
                                                "properties": {
                                                    "status": {
                                                        "type": "string",
                                                        "description": "Can be `enabled` or `disabled`."
                                                    }
                                                }
                                            },
                                            "secret_scanning": {
                                                "type": "object",
                                                "description": "Use the `status` property to enable or disable secret scanning for this repository. For more information, see \"[About secret scanning](/code-security/secret-security/about-secret-scanning).\"",
                                                "properties": {
                                                    "status": {
                                                        "type": "string",
                                                        "description": "Can be `enabled` or `disabled`."
                                                    }
                                                }
                                            },
                                            "secret_scanning_push_protection": {
                                                "type": "object",
                                                "description": "Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see \"[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\"",
                                                "properties": {
                                                    "status": {
                                                        "type": "string",
                                                        "description": "Can be `enabled` or `disabled`."
                                                    }
                                                }
                                            },
                                            "secret_scanning_ai_detection": {
                                                "type": "object",
                                                "description": "Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see \"[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets).\"",
                                                "properties": {
                                                    "status": {
                                                        "type": "string",
                                                        "description": "Can be `enabled` or `disabled`."
                                                    }
                                                }
                                            },
                                            "secret_scanning_non_provider_patterns": {
                                                "type": "object",
                                                "description": "Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see \"[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets).\"",
                                                "properties": {
                                                    "status": {
                                                        "type": "string",
                                                        "description": "Can be `enabled` or `disabled`."
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "has_issues": {
                                        "type": "boolean",
                                        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
                                        "default": true
                                    },
                                    "has_projects": {
                                        "type": "boolean",
                                        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                                        "default": true
                                    },
                                    "has_wiki": {
                                        "type": "boolean",
                                        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
                                        "default": true
                                    },
                                    "is_template": {
                                        "type": "boolean",
                                        "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
                                        "default": false
                                    },
                                    "default_branch": {
                                        "type": "string",
                                        "description": "Updates the default branch for this repository."
                                    },
                                    "allow_squash_merge": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
                                        "default": true
                                    },
                                    "allow_merge_commit": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
                                        "default": true
                                    },
                                    "allow_rebase_merge": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
                                        "default": true
                                    },
                                    "allow_auto_merge": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.",
                                        "default": false
                                    },
                                    "delete_branch_on_merge": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
                                        "default": false
                                    },
                                    "allow_update_branch": {
                                        "type": "boolean",
                                        "description": "Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.",
                                        "default": false
                                    },
                                    "use_squash_pr_title_as_default": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.",
                                        "default": false,
                                        "deprecated": true
                                    },
                                    "squash_merge_commit_title": {
                                        "type": "string",
                                        "enum": [
                                            "PR_TITLE",
                                            "COMMIT_OR_PR_TITLE"
                                        ],
                                        "description": "Required when using `squash_merge_commit_message`.\n\nThe default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
                                    },
                                    "squash_merge_commit_message": {
                                        "type": "string",
                                        "enum": [
                                            "PR_BODY",
                                            "COMMIT_MESSAGES",
                                            "BLANK"
                                        ],
                                        "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
                                    },
                                    "merge_commit_title": {
                                        "type": "string",
                                        "enum": [
                                            "PR_TITLE",
                                            "MERGE_MESSAGE"
                                        ],
                                        "description": "Required when using `merge_commit_message`.\n\nThe default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
                                    },
                                    "merge_commit_message": {
                                        "type": "string",
                                        "enum": [
                                            "PR_BODY",
                                            "PR_TITLE",
                                            "BLANK"
                                        ],
                                        "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
                                    },
                                    "archived": {
                                        "type": "boolean",
                                        "description": "Whether to archive this repository. `false` will unarchive a previously archived repository.",
                                        "default": false
                                    },
                                    "allow_forking": {
                                        "type": "boolean",
                                        "description": "Either `true` to allow private forks, or `false` to prevent private forks.",
                                        "default": false
                                    },
                                    "web_commit_signoff_required": {
                                        "type": "boolean",
                                        "description": "Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.",
                                        "default": false
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Hello-World",
                                        "description": "This is your first repository",
                                        "homepage": "https://github.com",
                                        "private": true,
                                        "has_issues": true,
                                        "has_projects": true,
                                        "has_wiki": true
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a repository",
                "description": "Deleting a repository requires admin access.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned\nrepositories, you will get a `403 Forbidden` response.\n\nOAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/artifacts": {
            "get": {
                "summary": "List artifacts for a repository",
                "description": "Lists all artifacts for a repository.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-artifacts-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name field of an artifact. When specified, only artifacts with this name will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
            "get": {
                "summary": "Get an artifact",
                "description": "Gets a specific artifact for a workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-artifact",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "artifact_id",
                        "description": "The unique identifier of the artifact.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete an artifact",
                "description": "Deletes an artifact for a workflow run.\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-artifact",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "artifact_id",
                        "description": "The unique identifier of the artifact.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": {
            "get": {
                "summary": "Download an artifact",
                "description": "Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\nthe response header to find the URL for the download. The `:archive_format` must be `zip`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/download-artifact",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "artifact_id",
                        "description": "The unique identifier of the artifact.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "archive_format",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/cache/usage": {
            "get": {
                "summary": "Get GitHub Actions cache usage for a repository",
                "description": "Gets GitHub Actions cache usage for a repository.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-actions-cache-usage",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/caches": {
            "get": {
                "summary": "List GitHub Actions caches for a repository",
                "description": "Lists the GitHub Actions caches for a repository.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-actions-cache-list",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "description": "An explicit key or prefix for identifying the cache",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "last_accessed_at",
                                "size_in_bytes"
                            ],
                            "default": "last_accessed_at"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete GitHub Actions caches for a repository (using a cache key)",
                "description": "Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-actions-cache-by-key",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "description": "A key for identifying the cache.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/caches/{cache_id}": {
            "delete": {
                "summary": "Delete a GitHub Actions cache for a repository (using a cache ID)",
                "description": "Deletes a GitHub Actions cache for a repository, using a cache ID.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-actions-cache-by-id",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cache_id",
                        "description": "The unique identifier of the GitHub Actions cache.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/jobs/{job_id}": {
            "get": {
                "summary": "Get a job for a workflow run",
                "description": "Gets a specific job in a workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-job-for-workflow-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "job_id",
                        "description": "The unique identifier of the job.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs": {
            "get": {
                "summary": "Download job logs for a workflow run",
                "description": "Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\nfor `Location:` in the response header to find the URL for the download.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/download-job-logs-for-workflow-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "job_id",
                        "description": "The unique identifier of the job.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun": {
            "post": {
                "summary": "Re-run a job from a workflow run",
                "description": "Re-run a job and its dependent jobs in a workflow run.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/re-run-job-for-workflow-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "job_id",
                        "description": "The unique identifier of the job.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "enable_debug_logging": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether to enable debug logging for the re-run."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": null
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/oidc/customization/sub": {
            "get": {
                "summary": "Get the customization template for an OIDC subject claim for a repository",
                "description": "Gets the customization template for an OpenID Connect (OIDC) subject claim.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-custom-oidc-sub-claim-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set the customization template for an OIDC subject claim for a repository",
                "description": "Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/set-custom-oidc-sub-claim-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Actions OIDC subject customization for a repository",
                                "description": "Actions OIDC subject customization for a repository",
                                "type": "object",
                                "required": [
                                    "use_default"
                                ],
                                "properties": {
                                    "use_default": {
                                        "description": "Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.",
                                        "type": "boolean"
                                    },
                                    "include_claim_keys": {
                                        "description": "Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "use_default": false,
                                        "include_claim_keys": [
                                            "repo",
                                            "context"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/organization-secrets": {
            "get": {
                "summary": "List repository organization secrets",
                "description": "Lists all organization secrets shared with a repository without revealing their encrypted\nvalues.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-repo-organization-secrets",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/organization-variables": {
            "get": {
                "summary": "List repository organization variables",
                "description": "Lists all organization variables shared with a repository.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-repo-organization-variables",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/permissions": {
            "get": {
                "summary": "Get GitHub Actions permissions for a repository",
                "description": "Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "operationId": "actions/get-github-actions-permissions-repository",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set GitHub Actions permissions for a repository",
                "description": "Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "operationId": "actions/set-github-actions-permissions-repository",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "enabled": {
                                        "type": "boolean",
                                        "description": "Whether GitHub Actions is enabled on the repository."
                                    },
                                    "allowed_actions": {
                                        "type": "string",
                                        "description": "The permissions policy that controls the actions and reusable workflows that are allowed to run.",
                                        "enum": [
                                            "all",
                                            "local_only",
                                            "selected"
                                        ]
                                    }
                                },
                                "required": [
                                    "enabled"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "enabled": true,
                                        "allowed_actions": "selected"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/permissions/access": {
            "get": {
                "summary": "Get the level of access for workflows outside of the repository",
                "description": "Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-workflow-access-to-repository",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set the level of access for workflows outside of the repository",
                "description": "Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\".\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/set-workflow-access-to-repository",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "access_level": {
                                        "type": "string",
                                        "description": "Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the\nrepository.\n\n`none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.",
                                        "enum": [
                                            "none",
                                            "user",
                                            "organization"
                                        ]
                                    }
                                },
                                "required": [
                                    "access_level"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "access_level": "organization"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/permissions/selected-actions": {
            "get": {
                "summary": "Get allowed actions and reusable workflows for a repository",
                "description": "Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "operationId": "actions/get-allowed-actions-repository",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set allowed actions and reusable workflows for a repository",
                "description": "Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "operationId": "actions/set-allowed-actions-repository",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "github_owned_allowed": {
                                        "type": "boolean",
                                        "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization."
                                    },
                                    "verified_allowed": {
                                        "type": "boolean",
                                        "description": "Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators."
                                    },
                                    "patterns_allowed": {
                                        "type": "array",
                                        "description": "Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\n\n> [!NOTE]\n> The `patterns_allowed` setting only applies to public repositories.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "selected_actions": {
                                    "value": {
                                        "github_owned_allowed": true,
                                        "verified_allowed": false,
                                        "patterns_allowed": [
                                            "monalisa/octocat@*",
                                            "docker/*"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/permissions/workflow": {
            "get": {
                "summary": "Get default workflow permissions for a repository",
                "description": "Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,\nas well as if GitHub Actions can submit approving pull request reviews.\nFor more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-github-actions-default-workflow-permissions-repository",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set default workflow permissions for a repository",
                "description": "Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions\ncan submit approving pull request reviews.\nFor more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/set-github-actions-default-workflow-permissions-repository",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "default_workflow_permissions": {
                                        "type": "string",
                                        "description": "The default workflow permissions granted to the GITHUB_TOKEN when running workflows.",
                                        "enum": [
                                            "read",
                                            "write"
                                        ]
                                    },
                                    "can_approve_pull_request_reviews": {
                                        "type": "boolean",
                                        "description": "Whether GitHub Actions can approve pull requests. Enabling this can be a security risk."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Give read-only permission, and allow approving PRs.",
                                    "value": {
                                        "default_workflow_permissions": "read",
                                        "can_approve_pull_request_reviews": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/runners": {
            "get": {
                "summary": "List self-hosted runners for a repository",
                "description": "Lists all self-hosted runners configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-self-hosted-runners-for-repo",
                "parameters": [
                    {
                        "name": "name",
                        "description": "The name of a self-hosted runner.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runners/downloads": {
            "get": {
                "summary": "List runner applications for a repository",
                "description": "Lists binaries for the runner application that you can download and run.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-runner-applications-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runners/generate-jitconfig": {
            "post": {
                "summary": "Create configuration for a just-in-time runner for a repository",
                "description": "Generates a configuration that can be passed to the runner application at startup.\n\nThe authenticated user must have admin access to the repository.\n\nOAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/generate-runner-jitconfig-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "runner_group_id",
                                    "labels"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the new runner."
                                    },
                                    "runner_group_id": {
                                        "type": "integer",
                                        "description": "The ID of the runner group to register the runner to."
                                    },
                                    "labels": {
                                        "type": "array",
                                        "minItems": 1,
                                        "maxItems": 100,
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100."
                                    },
                                    "work_folder": {
                                        "type": "string",
                                        "description": "The working directory to be used for job execution, relative to the runner install directory.",
                                        "default": "_work"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "New runner",
                                        "runner_group_id": 1,
                                        "labels": [
                                            "self-hosted",
                                            "X64",
                                            "macOS",
                                            "no-gpu"
                                        ],
                                        "work_folder": "_work"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/runners/registration-token": {
            "post": {
                "summary": "Create a registration token for a repository",
                "description": "Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-registration-token-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runners/remove-token": {
            "post": {
                "summary": "Create a remove token for a repository",
                "description": "Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:\n\n```\n./config.sh remove --token TOKEN\n```\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-remove-token-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runners/{runner_id}": {
            "get": {
                "summary": "Get a self-hosted runner for a repository",
                "description": "Gets a specific self-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-self-hosted-runner-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a self-hosted runner from a repository",
                "description": "Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-self-hosted-runner-from-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
            "get": {
                "summary": "List labels for a self-hosted runner for a repository",
                "description": "Lists all labels for a self-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-labels-for-self-hosted-runner-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Add custom labels to a self-hosted runner for a repository",
                "description": "Adds custom labels to a self-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/add-custom-labels-to-self-hosted-runner-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "labels"
                                ],
                                "properties": {
                                    "labels": {
                                        "type": "array",
                                        "minItems": 1,
                                        "maxItems": 100,
                                        "description": "The names of the custom labels to add to the runner.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "labels": [
                                            "gpu",
                                            "accelerated"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Set custom labels for a self-hosted runner for a repository",
                "description": "Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/set-custom-labels-for-self-hosted-runner-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "labels"
                                ],
                                "properties": {
                                    "labels": {
                                        "type": "array",
                                        "minItems": 0,
                                        "maxItems": 100,
                                        "description": "The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "labels": [
                                            "gpu",
                                            "accelerated"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove all custom labels from a self-hosted runner for a repository",
                "description": "Remove all custom labels from a self-hosted runner configured in a\nrepository. Returns the remaining read-only labels from the runner.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/remove-all-custom-labels-from-self-hosted-runner-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}": {
            "delete": {
                "summary": "Remove a custom label from a self-hosted runner for a repository",
                "description": "Remove a custom label from a self-hosted runner configured\nin a repository. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/remove-custom-label-from-self-hosted-runner-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runner_id",
                        "description": "Unique identifier of the self-hosted runner.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of a self-hosted runner's custom label.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs": {
            "get": {
                "summary": "List workflow runs for a repository",
                "description": "Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.\n\nThis endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-workflow-runs-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "actor",
                        "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "event",
                        "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "description": "Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "completed",
                                "action_required",
                                "cancelled",
                                "failure",
                                "neutral",
                                "skipped",
                                "stale",
                                "success",
                                "timed_out",
                                "in_progress",
                                "queued",
                                "requested",
                                "waiting",
                                "pending"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "created",
                        "description": "Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "exclude_pull_requests",
                        "description": "If `true` pull requests are omitted from the response (empty array).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "check_suite_id",
                        "description": "Returns workflow runs with the `check_suite_id` that you specify.",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "head_sha",
                        "description": "Only returns workflow runs that are associated with the specified `head_sha`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}": {
            "get": {
                "summary": "Get a workflow run",
                "description": "Gets a specific workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-workflow-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "exclude_pull_requests",
                        "description": "If `true` pull requests are omitted from the response (empty array).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a workflow run",
                "description": "Deletes a specific workflow run.\n\nAnyone with write access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "operationId": "actions/delete-workflow-run",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals": {
            "get": {
                "summary": "Get the review history for a workflow run",
                "description": "Anyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-reviews-for-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/approve": {
            "post": {
                "summary": "Approve a workflow run for a fork pull request",
                "description": "Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\"\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/approve-workflow-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": {
            "get": {
                "summary": "List workflow run artifacts",
                "description": "Lists artifacts for a workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-workflow-run-artifacts",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name field of an artifact. When specified, only artifacts with this name will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}": {
            "get": {
                "summary": "Get a workflow run attempt",
                "description": "Gets a specific workflow run attempt.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-workflow-run-attempt",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "attempt_number",
                        "description": "The attempt number of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "exclude_pull_requests",
                        "description": "If `true` pull requests are omitted from the response (empty array).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs": {
            "get": {
                "summary": "List jobs for a workflow run attempt",
                "description": "Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information\nabout using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-jobs-for-workflow-run-attempt",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "attempt_number",
                        "description": "The attempt number of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs": {
            "get": {
                "summary": "Download workflow run attempt logs",
                "description": "Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after\n1 minute. Look for `Location:` in the response header to find the URL for the download.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/download-workflow-run-attempt-logs",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "attempt_number",
                        "description": "The attempt number of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel": {
            "post": {
                "summary": "Cancel a workflow run",
                "description": "Cancels a workflow run using its `id`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/cancel-workflow-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule": {
            "post": {
                "summary": "Review custom deployment protection rules for a workflow run",
                "description": "Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"\n\n> [!NOTE]\n> GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/review-custom-gates-for-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "environment_name": {
                                                "type": "string",
                                                "description": "The name of the environment to approve or reject."
                                            },
                                            "comment": {
                                                "type": "string",
                                                "description": "Comment associated with the pending deployment protection rule. **Required when state is not provided.**"
                                            }
                                        },
                                        "required": [
                                            "environment_name",
                                            "comment"
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "environment_name": {
                                                "type": "string",
                                                "description": "The name of the environment to approve or reject."
                                            },
                                            "state": {
                                                "type": "string",
                                                "description": "Whether to approve or reject deployment to the specified environments.",
                                                "enum": [
                                                    "approved",
                                                    "rejected"
                                                ]
                                            },
                                            "comment": {
                                                "type": "string",
                                                "description": "Optional comment to include with the review."
                                            }
                                        },
                                        "required": [
                                            "environment_name",
                                            "state"
                                        ]
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "environment_name": "prod-eus",
                                        "state": "approved",
                                        "comment": "All health checks passed."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel": {
            "post": {
                "summary": "Force cancel a workflow run",
                "description": "Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.\nYou should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/force-cancel-workflow-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
            "get": {
                "summary": "List jobs for a workflow run",
                "description": "Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information\nabout using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-jobs-for-workflow-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filter",
                        "description": "Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "latest",
                                "all"
                            ],
                            "default": "latest"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
            "get": {
                "summary": "Download workflow run logs",
                "description": "Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n`Location:` in the response header to find the URL for the download.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/download-workflow-run-logs",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete workflow run logs",
                "description": "Deletes all logs for a workflow run.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-workflow-run-logs",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": {
            "get": {
                "summary": "Get pending deployments for a workflow run",
                "description": "Get all deployment environments for a workflow run that are waiting for protection rules to pass.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-pending-deployments-for-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Review pending deployments for a workflow run",
                "description": "Approve or reject pending deployments that are waiting on approval by a required reviewer.\n\nRequired reviewers with read access to the repository contents and deployments can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/review-pending-deployments-for-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "environment_ids": {
                                        "type": "array",
                                        "description": "The list of environment ids to approve or reject",
                                        "example": [
                                            161171787,
                                            161171795
                                        ],
                                        "items": {
                                            "type": "integer",
                                            "example": 161171787
                                        }
                                    },
                                    "state": {
                                        "type": "string",
                                        "description": "Whether to approve or reject deployment to the specified environments.",
                                        "enum": [
                                            "approved",
                                            "rejected"
                                        ],
                                        "example": "approved"
                                    },
                                    "comment": {
                                        "type": "string",
                                        "description": "A comment to accompany the deployment review",
                                        "example": "Ship it!"
                                    }
                                },
                                "required": [
                                    "environment_ids",
                                    "state",
                                    "comment"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "environment_ids": [
                                            161171787
                                        ],
                                        "state": "approved",
                                        "comment": "Ship it!"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
            "post": {
                "summary": "Re-run a workflow",
                "description": "Re-runs your workflow run using its `id`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/re-run-workflow",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "enable_debug_logging": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether to enable debug logging for the re-run."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": null
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs": {
            "post": {
                "summary": "Re-run failed jobs from a workflow run",
                "description": "Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/re-run-workflow-failed-jobs",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "enable_debug_logging": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Whether to enable debug logging for the re-run."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": null
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/runs/{run_id}/timing": {
            "get": {
                "summary": "Get workflow run usage",
                "description": "> [!WARNING]  \n> This endpoint is in the process of closing down. Refer to \"[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)\" for more information.\n\nGets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-workflow-run-usage",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "description": "The unique identifier of the workflow run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/secrets": {
            "get": {
                "summary": "List repository secrets",
                "description": "Lists all secrets available in a repository without revealing their encrypted\nvalues.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-repo-secrets",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/secrets/public-key": {
            "get": {
                "summary": "Get a repository public key",
                "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-repo-public-key",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
            "get": {
                "summary": "Get a repository secret",
                "description": "Gets a single repository secret without revealing its encrypted value.\n\nThe authenticated user must have collaborator access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-repo-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update a repository secret",
                "description": "Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-or-update-repo-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "encrypted_value": {
                                        "type": "string",
                                        "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "type": "string",
                                        "description": "ID of the key you used to encrypt the secret."
                                    }
                                },
                                "required": [
                                    "encrypted_value",
                                    "key_id"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a repository secret",
                "description": "Deletes a secret in a repository using the secret name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-repo-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/variables": {
            "get": {
                "summary": "List repository variables",
                "description": "Lists all repository variables.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-repo-variables",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a repository variable",
                "description": "Creates a repository variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-repo-variable",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the variable."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "The value of the variable."
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "USERNAME",
                                        "value": "octocat"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/variables/{name}": {
            "get": {
                "summary": "Get a repository variable",
                "description": "Gets a specific variable in a repository.\n\nThe authenticated user must have collaborator access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-repo-variable",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a repository variable",
                "description": "Updates a repository variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/update-repo-variable",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the variable."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "The value of the variable."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "USERNAME",
                                        "value": "octocat"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a repository variable",
                "description": "Deletes a repository variable using the variable name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-repo-variable",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/workflows": {
            "get": {
                "summary": "List repository workflows",
                "description": "Lists the workflows in a repository.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-repo-workflows",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}": {
            "get": {
                "summary": "Get a workflow",
                "description": "Gets a specific workflow. You can replace `workflow_id` with the workflow\nfile name. For example, you could use `main.yaml`.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-workflow",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workflow_id",
                        "in": "path",
                        "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable": {
            "put": {
                "summary": "Disable a workflow",
                "description": "Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/disable-workflow",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workflow_id",
                        "in": "path",
                        "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": {
            "post": {
                "summary": "Create a workflow dispatch event",
                "description": "You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nYou must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "operationId": "actions/create-workflow-dispatch",
                "tags": [
                    "actions"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workflow_id",
                        "in": "path",
                        "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ref": {
                                        "type": "string",
                                        "description": "The git reference for the workflow. The reference can be a branch or tag name."
                                    },
                                    "inputs": {
                                        "type": "object",
                                        "description": "Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.",
                                        "additionalProperties": true,
                                        "maxProperties": 10
                                    }
                                },
                                "required": [
                                    "ref"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "ref": "topic-branch",
                                        "inputs": {
                                            "name": "Mona the Octocat",
                                            "home": "San Francisco, CA"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable": {
            "put": {
                "summary": "Enable a workflow",
                "description": "Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/enable-workflow",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workflow_id",
                        "in": "path",
                        "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
            "get": {
                "summary": "List workflow runs for a workflow",
                "description": "List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.\n\nThis endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-workflow-runs",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workflow_id",
                        "in": "path",
                        "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    {
                        "name": "actor",
                        "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "event",
                        "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "description": "Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "completed",
                                "action_required",
                                "cancelled",
                                "failure",
                                "neutral",
                                "skipped",
                                "stale",
                                "success",
                                "timed_out",
                                "in_progress",
                                "queued",
                                "requested",
                                "waiting",
                                "pending"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "created",
                        "description": "Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "exclude_pull_requests",
                        "description": "If `true` pull requests are omitted from the response (empty array).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "check_suite_id",
                        "description": "Returns workflow runs with the `check_suite_id` that you specify.",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "head_sha",
                        "description": "Only returns workflow runs that are associated with the specified `head_sha`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing": {
            "get": {
                "summary": "Get workflow usage",
                "description": "> [!WARNING]  \n> This endpoint is in the process of closing down. Refer to \"[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)\" for more information.\n\nGets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nYou can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-workflow-usage",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workflow_id",
                        "in": "path",
                        "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/activity": {
            "get": {
                "summary": "List repository activities",
                "description": "Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.\n\nFor more information about viewing repository activity,\nsee \"[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-activities",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The Git reference for the activities you want to list.\n\nThe `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "actor",
                        "description": "The GitHub username to use to filter by the actor who performed the activity.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "time_period",
                        "description": "The time period to filter by.\n\nFor example, `day` will filter for activity that occurred in the past 24 hours, and `week` will filter for activity that occurred in the past 7 days (168 hours).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "day",
                                "week",
                                "month",
                                "quarter",
                                "year"
                            ]
                        }
                    },
                    {
                        "name": "activity_type",
                        "description": "The activity type to filter by.\n\nFor example, you can choose to filter by \"force_push\", to see all force pushes to the repository.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "push",
                                "force_push",
                                "branch_creation",
                                "branch_deletion",
                                "pr_merge",
                                "merge_queue_merge"
                            ]
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/assignees": {
            "get": {
                "summary": "List assignees",
                "description": "Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-assignees",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/assignees/{assignee}": {
            "get": {
                "summary": "Check if a user can be assigned",
                "description": "Checks if a user has permission to be assigned to an issue in this repository.\n\nIf the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n\nOtherwise a `404` status code is returned.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/check-user-can-be-assigned",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "assignee",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/attestations": {
            "post": {
                "summary": "Create an attestation",
                "description": "Store an artifact attestation and associate it with a repository.\n\nThe authenticated user must have write permission to the repository and, if using a fine-grained access token, the `attestations:write` permission is required.\n\nArtifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For more information, see our guide on [using artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-attestation",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "bundle": {
                                        "type": "object",
                                        "properties": {
                                            "mediaType": {
                                                "type": "string"
                                            },
                                            "verificationMaterial": {
                                                "type": "object",
                                                "properties": {},
                                                "additionalProperties": true
                                            },
                                            "dsseEnvelope": {
                                                "type": "object",
                                                "properties": {},
                                                "additionalProperties": true
                                            }
                                        },
                                        "description": "The attestation's Sigstore Bundle.\nRefer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information."
                                    }
                                },
                                "required": [
                                    "bundle"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example of a request body",
                                    "value": {
                                        "value": {
                                            "bundle": {
                                                "mediaType": "application/vnd.dev.sigstore.bundle.v0.3+json",
                                                "verificationMaterial": {
                                                    "tlogEntries": [
                                                        {
                                                            "logIndex": "97913980",
                                                            "logId": {
                                                                "keyId": "wNI9atQGlz+VWfO6LRygH4QUfY/8W4RFwiT5i5WRgB0="
                                                            },
                                                            "kindVersion": {
                                                                "kind": "dsse",
                                                                "version": "0.0.1"
                                                            },
                                                            "integratedTime": "1716998992",
                                                            "inclusionPromise": {
                                                                "signedEntryTimestamp": "MEYCIQCeEsQAy+qXtULkh52wbnHrkt2R2JQ05P9STK/xmdpQ2AIhANiG5Gw6cQiMnwvUz1+9UKtG/vlC8dduq07wsFOViwSL"
                                                            },
                                                            "inclusionProof": {
                                                                "logIndex": "93750549",
                                                                "rootHash": "KgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=",
                                                                "treeSize": "93750551",
                                                                "hashes": [
                                                                    "8LI21mzwxnUSo0fuZeFsUrz2ujZ4QAL+oGeTG+5toZg=",
                                                                    "nCb369rcIytNhGwWoqBv+eV49X3ZKpo/HJGKm9V+dck=",
                                                                    "hnNQ9mUdSwYCfdV21pd87NucrdRRNZATowlaRR1hJ4A=",
                                                                    "MBhhK33vlD4Tq/JKgAaXUI4VjmosWKe6+7RNpQ2ncNM=",
                                                                    "XKWUE3stvGV1OHsIGiCGfn047Ok6uD4mFkh7BaicaEc=",
                                                                    "Tgve40VPFfuei+0nhupdGpfPPR+hPpZjxgTiDT8WNoY=",
                                                                    "wV+S/7tLtYGzkLaSb6UDqexNyhMvumHK/RpTNvEZuLU=",
                                                                    "uwaWufty6sn6XqO1Tb9M3Vz6sBKPu0HT36mStxJNd7s=",
                                                                    "jUfeMOXQP0XF1JAnCEETVbfRKMUwCzrVUzYi8vnDMVs=",
                                                                    "xQKjzJAwwdlQG/YUYBKPXxbCmhMYKo1wnv+6vDuKWhQ=",
                                                                    "cX3Agx+hP66t1ZLbX/yHbfjU46/3m/VAmWyG/fhxAVc=",
                                                                    "sjohk/3DQIfXTgf/5XpwtdF7yNbrf8YykOMHr1CyBYQ=",
                                                                    "98enzMaC+x5oCMvIZQA5z8vu2apDMCFvE/935NfuPw8="
                                                                ],
                                                                "checkpoint": {
                                                                    "envelope": "rekor.sigstore.dev - 2605736670972794746\\n93750551\\nKgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=\\n\\n\u2014 rekor.sigstore.dev wNI9ajBEAiBkLzdjY8A9HReU7rmtjwZ+JpSuYtEr9SmvSwUIW7FBjgIgKo+vhkW3tqc+gc8fw9gza3xLoncA8a+MTaJYCaLGA9c=\\n"
                                                                }
                                                            },
                                                            "canonicalizedBody": "eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiZHNzZSIsInNwZWMiOnsiZW52ZWxvcGVIYXNoIjp7ImFsZ29yaXRobSI6InNoYTI1NiIsInZhbHVlIjoiM2I1YzkwNDk5MGFiYzE4NjI1ZWE3Njg4MzE1OGEwZmI4MTEwMjM4MGJkNjQwZjI5OWJlMzYwZWVkOTMxNjYwYiJ9LCJwYXlsb2FkSGFzaCI6eyJhbGdvcml0aG0iOiJzaGEyNTYiLCJ2YWx1ZSI6IjM4ZGNlZDJjMzE1MGU2OTQxMDViYjZiNDNjYjY3NzBiZTYzZDdhNGM4NjNiMTc2YTkwMmU1MGQ5ZTAyN2ZiMjMifSwic2lnbmF0dXJlcyI6W3sic2lnbmF0dXJlIjoiTUVRQ0lFR0lHQW03Z1pWTExwc3JQY2puZEVqaXVjdEUyL2M5K2o5S0d2YXp6M3JsQWlBZDZPMTZUNWhrelJNM0liUlB6bSt4VDQwbU5RWnhlZmQ3bGFEUDZ4MlhMUT09IiwidmVyaWZpZXIiOiJMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VkcVZFTkRRbWhUWjBGM1NVSkJaMGxWVjFsNGNVdHpjazFUTTFOMmJEVkphalZQUkdaQ1owMUtUeTlKZDBObldVbExiMXBKZW1vd1JVRjNUWGNLVG5wRlZrMUNUVWRCTVZWRlEyaE5UV015Ykc1ak0xSjJZMjFWZFZwSFZqSk5ValIzU0VGWlJGWlJVVVJGZUZaNllWZGtlbVJIT1hsYVV6RndZbTVTYkFwamJURnNXa2RzYUdSSFZYZElhR05PVFdwUmQwNVVTVFZOVkZsM1QxUlZlVmRvWTA1TmFsRjNUbFJKTlUxVVdYaFBWRlY1VjJwQlFVMUdhM2RGZDFsSUNrdHZXa2w2YWpCRFFWRlpTVXR2V2tsNmFqQkVRVkZqUkZGblFVVmtiV2RvVGs1M00yNVZMMHQxWlZGbmMzQkhTRmMzWjJnNVdFeEVMMWRrU1RoWlRVSUtLekJ3TUZZMGJ6RnJTRzgyWTAweGMwUktaM0pEWjFCUlZYcDRjSFZaZFc4cmVIZFFTSGxzTDJ0RWVXWXpSVXhxYTJGUFEwSlVUWGRuWjFWMlRVRTBSd3BCTVZWa1JIZEZRaTkzVVVWQmQwbElaMFJCVkVKblRsWklVMVZGUkVSQlMwSm5aM0pDWjBWR1FsRmpSRUY2UVdSQ1owNVdTRkUwUlVablVWVnhaa05RQ25aWVMwRjJVelJEWkdoUk1taGlXbGRLVTA5RmRsWnZkMGgzV1VSV1VqQnFRa0puZDBadlFWVXpPVkJ3ZWpGWmEwVmFZalZ4VG1wd1MwWlhhWGhwTkZrS1drUTRkMWRuV1VSV1VqQlNRVkZJTDBKR1FYZFViMXBOWVVoU01HTklUVFpNZVRsdVlWaFNiMlJYU1hWWk1qbDBUREpPYzJGVE9XcGlSMnQyVEcxa2NBcGtSMmd4V1drNU0ySXpTbkphYlhoMlpETk5kbHBIVm5kaVJ6azFZbGRXZFdSRE5UVmlWM2hCWTIxV2JXTjVPVzlhVjBaclkzazVNR051Vm5WaGVrRTFDa0puYjNKQ1owVkZRVmxQTDAxQlJVSkNRM1J2WkVoU2QyTjZiM1pNTTFKMllUSldkVXh0Um1wa1IyeDJZbTVOZFZveWJEQmhTRlpwWkZoT2JHTnRUbllLWW01U2JHSnVVWFZaTWpsMFRVSTRSME5wYzBkQlVWRkNaemM0ZDBGUlNVVkZXR1IyWTIxMGJXSkhPVE5ZTWxKd1l6TkNhR1JIVG05TlJGbEhRMmx6UndwQlVWRkNaemM0ZDBGUlRVVkxSMXBvV2xkWmVWcEhVbXRQUkVacFRVUmplazVxWXpCUFJGRjRUVEpGTTFsNldUQk9iVTVyVFVkS2JWbDZTVEpaZWtGM0NsbFVRWGRIUVZsTFMzZFpRa0pCUjBSMmVrRkNRa0ZSUzFKSFZuZGlSemsxWWxkV2RXUkVRVlpDWjI5eVFtZEZSVUZaVHk5TlFVVkdRa0ZrYW1KSGEzWUtXVEo0Y0UxQ05FZERhWE5IUVZGUlFtYzNPSGRCVVZsRlJVaEtiRnB1VFhaaFIxWm9Xa2hOZG1SSVNqRmliWE4zVDNkWlMwdDNXVUpDUVVkRWRucEJRZ3BEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVk1iVVpxWkVkc2RtSnVUWFZhTW13d1lVaFdhV1JZVG14amJVNTJZbTVTYkdKdVVYVlpNamwwQ2sxR2QwZERhWE5IUVZGUlFtYzNPSGRCVVd0RlZHZDRUV0ZJVWpCalNFMDJUSGs1Ym1GWVVtOWtWMGwxV1RJNWRFd3lUbk5oVXpscVlrZHJka3h0WkhBS1pFZG9NVmxwT1ROaU0wcHlXbTE0ZG1RelRYWmFSMVozWWtjNU5XSlhWblZrUXpVMVlsZDRRV050Vm0xamVUbHZXbGRHYTJONU9UQmpibFoxWVhwQk5BcENaMjl5UW1kRlJVRlpUeTlOUVVWTFFrTnZUVXRIV21oYVYxbDVXa2RTYTA5RVJtbE5SR042VG1wak1FOUVVWGhOTWtVeldYcFpNRTV0VG10TlIwcHRDbGw2U1RKWmVrRjNXVlJCZDBoUldVdExkMWxDUWtGSFJIWjZRVUpEZDFGUVJFRXhibUZZVW05a1YwbDBZVWM1ZW1SSFZtdE5RMjlIUTJselIwRlJVVUlLWnpjNGQwRlJkMFZJUVhkaFlVaFNNR05JVFRaTWVUbHVZVmhTYjJSWFNYVlpNamwwVERKT2MyRlRPV3BpUjJ0M1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWdwRVVWRnhSRU5vYlZsWFZtMU5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBGSENrTnBjMGRCVVZGQ1p6YzRkMEZSTkVWRlozZFJZMjFXYldONU9XOWFWMFpyWTNrNU1HTnVWblZoZWtGYVFtZHZja0puUlVWQldVOHZUVUZGVUVKQmMwMEtRMVJKZUUxcVdYaE5la0V3VDFSQmJVSm5iM0pDWjBWRlFWbFBMMDFCUlZGQ1FtZE5SbTFvTUdSSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhZ3BpUjJ0M1IwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWUlVVdEVRV2N4VDFSamQwNUVZM2hOVkVKalFtZHZja0puUlVWQldVOHZUVUZGVTBKRk5FMVVSMmd3Q21SSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhbUpIYTNaWk1uaHdUSGsxYm1GWVVtOWtWMGwyWkRJNWVXRXlXbk5pTTJSNlRESlNiR05IZUhZS1pWY3hiR0p1VVhWbFZ6RnpVVWhLYkZwdVRYWmhSMVpvV2toTmRtUklTakZpYlhOM1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWM1VYRkVRMmh0V1ZkV2JRcE5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBWSFEybHpSMEZSVVVKbk56aDNDa0ZTVVVWRmQzZFNaREk1ZVdFeVduTmlNMlJtV2tkc2VtTkhSakJaTW1kM1ZGRlpTMHQzV1VKQ1FVZEVkbnBCUWtaUlVTOUVSREZ2WkVoU2QyTjZiM1lLVERKa2NHUkhhREZaYVRWcVlqSXdkbGt5ZUhCTU1rNXpZVk01YUZrelVuQmlNalY2VEROS01XSnVUWFpQVkVrMFQxUkJNMDVVWXpGTmFUbG9aRWhTYkFwaVdFSXdZM2s0ZUUxQ1dVZERhWE5IUVZGUlFtYzNPSGRCVWxsRlEwRjNSMk5JVm1saVIyeHFUVWxIVEVKbmIzSkNaMFZGUVdSYU5VRm5VVU5DU0RCRkNtVjNRalZCU0dOQk0xUXdkMkZ6WWtoRlZFcHFSMUkwWTIxWFl6TkJjVXBMV0hKcVpWQkxNeTlvTkhCNVowTTRjRGR2TkVGQlFVZFFlRkl4ZW1KblFVRUtRa0ZOUVZORVFrZEJhVVZCS3pobmJGRkplRTlCYUZoQ1FVOVRObE1yT0ZweGQwcGpaSGQzVTNJdlZGZHBhSE16WkV4eFZrRjJiME5KVVVSaWVUbG9NUXBKWTNWRVJYSXJlbk5YYVV3NFVIYzFRMU5VZEd0c2RFbzBNakZ6UlRneFZuWjFOa0Z3VkVGTFFtZG5jV2hyYWs5UVVWRkVRWGRPYmtGRVFtdEJha0VyQ2tSSU4xQXJhR2cwVmtoWFprTlhXSFJ5UzFSdlFrdDFZa0pyUzNCbVYwTlpVWGhxV0UweWRsWXZibEJ4WWxwR1dVOVdXazlpWlRaQlRuSm5lV1J2V1VNS1RVWlZUV0l6ZUhwelJrNVJXWFp6UlZsUGFUSkxibkoyUmpCMFoyOXdiVmhIVm05NmJsb3JjUzh5UVVsRVZ6bEdNVVUzV1RaWk1EWXhaVzkxUVZsa1NBcFhkejA5Q2kwdExTMHRSVTVFSUVORlVsUkpSa2xEUVZSRkxTMHRMUzBLIn1dfX0="
                                                        }
                                                    ],
                                                    "timestampVerificationData": {},
                                                    "certificate": {
                                                        "rawBytes": "MIIGjTCCBhSgAwIBAgIUWYxqKsrMS3Svl5Ij5ODfBgMJO/IwCgYIKoZIzj0EAwMwNzEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MR4wHAYDVQQDExVzaWdzdG9yZS1pbnRlcm1lZGlhdGUwHhcNMjQwNTI5MTYwOTUyWhcNMjQwNTI5MTYxOTUyWjAAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEdmghNNw3nU/KueQgspGHW7gh9XLD/WdI8YMB+0p0V4o1kHo6cM1sDJgrCgPQUzxpuYuo+xwPHyl/kDyf3ELjkaOCBTMwggUvMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUqfCPvXKAvS4CdhQ2hbZWJSOEvVowHwYDVR0jBBgwFoAU39Ppz1YkEZb5qNjpKFWixi4YZD8wWgYDVR0RAQH/BFAwToZMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA5BgorBgEEAYO/MAEBBCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMB8GCisGAQQBg78wAQIEEXdvcmtmbG93X2Rpc3BhdGNoMDYGCisGAQQBg78wAQMEKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwGAYKKwYBBAGDvzABBAQKRGVwbG95bWVudDAVBgorBgEEAYO/MAEFBAdjbGkvY2xpMB4GCisGAQQBg78wAQYEEHJlZnMvaGVhZHMvdHJ1bmswOwYKKwYBBAGDvzABCAQtDCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMFwGCisGAQQBg78wAQkETgxMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA4BgorBgEEAYO/MAEKBCoMKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwHQYKKwYBBAGDvzABCwQPDA1naXRodWItaG9zdGVkMCoGCisGAQQBg78wAQwEHAwaaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkwOAYKKwYBBAGDvzABDQQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCAGCisGAQQBg78wAQ4EEgwQcmVmcy9oZWFkcy90cnVuazAZBgorBgEEAYO/MAEPBAsMCTIxMjYxMzA0OTAmBgorBgEEAYO/MAEQBBgMFmh0dHBzOi8vZ2l0aHViLmNvbS9jbGkwGAYKKwYBBAGDvzABEQQKDAg1OTcwNDcxMTBcBgorBgEEAYO/MAESBE4MTGh0dHBzOi8vZ2l0aHViLmNvbS9jbGkvY2xpLy5naXRodWIvd29ya2Zsb3dzL2RlcGxveW1lbnQueW1sQHJlZnMvaGVhZHMvdHJ1bmswOAYKKwYBBAGDvzABEwQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCEGCisGAQQBg78wARQEEwwRd29ya2Zsb3dfZGlzcGF0Y2gwTQYKKwYBBAGDvzABFQQ/DD1odHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaS9hY3Rpb25zL3J1bnMvOTI4OTA3NTc1Mi9hdHRlbXB0cy8xMBYGCisGAQQBg78wARYECAwGcHVibGljMIGLBgorBgEEAdZ5AgQCBH0EewB5AHcA3T0wasbHETJjGR4cmWc3AqJKXrjePK3/h4pygC8p7o4AAAGPxR1zbgAABAMASDBGAiEA+8glQIxOAhXBAOS6S+8ZqwJcdwwSr/TWihs3dLqVAvoCIQDby9h1IcuDEr+zsWiL8Pw5CSTtkltJ421sE81Vvu6ApTAKBggqhkjOPQQDAwNnADBkAjA+DH7P+hh4VHWfCWXtrKToBKubBkKpfWCYQxjXM2vV/nPqbZFYOVZObe6ANrgydoYCMFUMb3xzsFNQYvsEYOi2KnrvF0tgopmXGVoznZ+q/2AIDW9F1E7Y6Y061eouAYdHWw=="
                                                    }
                                                },
                                                "dsseEnvelope": {
                                                    "payload": "eyJfdHlwZSI6Imh0dHBzOi8vaW4tdG90by5pby9TdGF0ZW1lbnQvdjEiLCJzdWJqZWN0IjpbeyJuYW1lIjoiZ2hfMi41MC4wX3dpbmRvd3NfYXJtNjQuemlwIiwiZGlnZXN0Ijp7InNoYTI1NiI6IjhhYWQxMjBiNDE2Mzg2YjQyNjllZjYyYzhmZGViY2FkMzFhNzA4NDcyOTc4MTdhMTQ5ZGFmOTI3ZWRjODU1NDgifX1dLCJwcmVkaWNhdGVUeXBlIjoiaHR0cHM6Ly9zbHNhLmRldi9wcm92ZW5hbmNlL3YxIiwicHJlZGljYXRlIjp7ImJ1aWxkRGVmaW5pdGlvbiI6eyJidWlsZFR5cGUiOiJodHRwczovL3Nsc2EtZnJhbWV3b3JrLmdpdGh1Yi5pby9naXRodWItYWN0aW9ucy1idWlsZHR5cGVzL3dvcmtmbG93L3YxIiwiZXh0ZXJuYWxQYXJhbWV0ZXJzIjp7IndvcmtmbG93Ijp7InJlZiI6InJlZnMvaGVhZHMvdHJ1bmsiLCJyZXBvc2l0b3J5IjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkiLCJwYXRoIjoiLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWwifX0sImludGVybmFsUGFyYW1ldGVycyI6eyJnaXRodWIiOnsiZXZlbnRfbmFtZSI6IndvcmtmbG93X2Rpc3BhdGNoIiwicmVwb3NpdG9yeV9pZCI6IjIxMjYxMzA0OSIsInJlcG9zaXRvcnlfb3duZXJfaWQiOiI1OTcwNDcxMSJ9fSwicmVzb2x2ZWREZXBlbmRlbmNpZXMiOlt7InVyaSI6ImdpdCtodHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaUByZWZzL2hlYWRzL3RydW5rIiwiZGlnZXN0Ijp7ImdpdENvbW1pdCI6ImZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAifX1dfSwicnVuRGV0YWlscyI6eyJidWlsZGVyIjp7ImlkIjoiaHR0cHM6Ly9naXRodWIuY29tL2FjdGlvbnMvcnVubmVyL2dpdGh1Yi1ob3N0ZWQifSwibWV0YWRhdGEiOnsiaW52b2NhdGlvbklkIjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvYWN0aW9ucy9ydW5zLzkyODkwNzU3NTIvYXR0ZW1wdHMvMSJ9fX19",
                                                    "payloadType": "application/vnd.in-toto+json",
                                                    "signatures": [
                                                        {
                                                            "sig": "MEQCIEGIGAm7gZVLLpsrPcjndEjiuctE2/c9+j9KGvazz3rlAiAd6O16T5hkzRM3IbRPzm+xT40mNQZxefd7laDP6x2XLQ=="
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/attestations/{subject_digest}": {
            "get": {
                "summary": "List attestations",
                "description": "List a collection of artifact attestations with a given subject digest that are associated with a repository.\n\nThe authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-attestations",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subject_digest",
                        "description": "The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "predicate_type",
                        "description": "Optional filter for fetching attestations with a given predicate type.\nThis option accepts `provenance`, `sbom`, or freeform text for custom predicate types.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/autolinks": {
            "get": {
                "summary": "Get all autolinks of a repository",
                "description": "Gets all autolinks that are configured for a repository.\n\nInformation about autolinks are only available to repository administrators.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-autolinks",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an autolink reference for a repository",
                "description": "Users with admin access to the repository can create an autolink.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-autolink",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "key_prefix": {
                                        "type": "string",
                                        "description": "This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit."
                                    },
                                    "url_template": {
                                        "type": "string",
                                        "description": "The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`."
                                    },
                                    "is_alphanumeric": {
                                        "type": "boolean",
                                        "default": true,
                                        "description": "Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters."
                                    }
                                },
                                "required": [
                                    "key_prefix",
                                    "url_template"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "key_prefix": "TICKET-",
                                        "url_template": "https://example.com/TICKET?query=<num>",
                                        "is_alphanumeric": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/autolinks/{autolink_id}": {
            "get": {
                "summary": "Get an autolink reference of a repository",
                "description": "This returns a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-autolink",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "autolink_id",
                        "description": "The unique identifier of the autolink.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete an autolink reference from a repository",
                "description": "This deletes a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-autolink",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "autolink_id",
                        "description": "The unique identifier of the autolink.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/automated-security-fixes": {
            "get": {
                "summary": "Check if Dependabot security updates are enabled for a repository",
                "description": "Shows whether Dependabot security updates are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see \"[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)\".",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/check-automated-security-fixes",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Enable Dependabot security updates",
                "description": "Enables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)\".",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/enable-automated-security-fixes",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Disable Dependabot security updates",
                "description": "Disables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)\".",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/disable-automated-security-fixes",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/branches": {
            "get": {
                "summary": "List branches",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-branches",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "protected",
                        "description": "Setting to `true` returns only branches protected by branch protections or rulesets. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}": {
            "get": {
                "summary": "Get a branch",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-branch",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection": {
            "get": {
                "summary": "Get branch protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-branch-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "put": {
                "summary": "Update branch protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nProtecting a branch requires admin or owner permissions to the repository.\n\n> [!NOTE]\n> Passing new arrays of `users` and `teams` replaces their previous values.\n\n> [!NOTE]\n> The list of users, apps, and teams in total is limited to 100 items.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-branch-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "required_status_checks": {
                                        "type": "object",
                                        "description": "Require status checks to pass before merging. Set to `null` to disable.",
                                        "nullable": true,
                                        "properties": {
                                            "strict": {
                                                "type": "boolean",
                                                "description": "Require branches to be up to date before merging."
                                            },
                                            "contexts": {
                                                "type": "array",
                                                "deprecated": true,
                                                "description": "**Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "checks": {
                                                "type": "array",
                                                "description": "The list of status checks to require in order to merge into this branch.",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "context"
                                                    ],
                                                    "properties": {
                                                        "context": {
                                                            "type": "string",
                                                            "description": "The name of the required check"
                                                        },
                                                        "app_id": {
                                                            "type": "integer",
                                                            "description": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status."
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "required": [
                                            "strict",
                                            "contexts"
                                        ]
                                    },
                                    "enforce_admins": {
                                        "type": "boolean",
                                        "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
                                        "nullable": true
                                    },
                                    "required_pull_request_reviews": {
                                        "type": "object",
                                        "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
                                        "nullable": true,
                                        "properties": {
                                            "dismissal_restrictions": {
                                                "type": "object",
                                                "description": "Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                                                "properties": {
                                                    "users": {
                                                        "type": "array",
                                                        "description": "The list of user `login`s with dismissal access",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "teams": {
                                                        "type": "array",
                                                        "description": "The list of team `slug`s with dismissal access",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "apps": {
                                                        "type": "array",
                                                        "description": "The list of app `slug`s with dismissal access",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            },
                                            "dismiss_stale_reviews": {
                                                "type": "boolean",
                                                "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit."
                                            },
                                            "require_code_owner_reviews": {
                                                "type": "boolean",
                                                "description": "Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them."
                                            },
                                            "required_approving_review_count": {
                                                "type": "integer",
                                                "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers."
                                            },
                                            "require_last_push_approval": {
                                                "type": "boolean",
                                                "description": "Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.",
                                                "default": false
                                            },
                                            "bypass_pull_request_allowances": {
                                                "type": "object",
                                                "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
                                                "properties": {
                                                    "users": {
                                                        "type": "array",
                                                        "description": "The list of user `login`s allowed to bypass pull request requirements.",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "teams": {
                                                        "type": "array",
                                                        "description": "The list of team `slug`s allowed to bypass pull request requirements.",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "apps": {
                                                        "type": "array",
                                                        "description": "The list of app `slug`s allowed to bypass pull request requirements.",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "restrictions": {
                                        "type": "object",
                                        "description": "Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
                                        "nullable": true,
                                        "properties": {
                                            "users": {
                                                "type": "array",
                                                "description": "The list of user `login`s with push access",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "teams": {
                                                "type": "array",
                                                "description": "The list of team `slug`s with push access",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "apps": {
                                                "type": "array",
                                                "description": "The list of app `slug`s with push access",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "required": [
                                            "users",
                                            "teams"
                                        ]
                                    },
                                    "required_linear_history": {
                                        "type": "boolean",
                                        "description": "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation."
                                    },
                                    "allow_force_pushes": {
                                        "type": "boolean",
                                        "description": "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\"",
                                        "nullable": true
                                    },
                                    "allow_deletions": {
                                        "type": "boolean",
                                        "description": "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation."
                                    },
                                    "block_creations": {
                                        "type": "boolean",
                                        "description": "If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`."
                                    },
                                    "required_conversation_resolution": {
                                        "type": "boolean",
                                        "description": "Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`."
                                    },
                                    "lock_branch": {
                                        "type": "boolean",
                                        "description": "Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.",
                                        "default": false
                                    },
                                    "allow_fork_syncing": {
                                        "type": "boolean",
                                        "description": "Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.",
                                        "default": false
                                    }
                                },
                                "required": [
                                    "required_status_checks",
                                    "enforce_admins",
                                    "required_pull_request_reviews",
                                    "restrictions"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "required_status_checks": {
                                            "strict": true,
                                            "contexts": [
                                                "continuous-integration/travis-ci"
                                            ]
                                        },
                                        "enforce_admins": true,
                                        "required_pull_request_reviews": {
                                            "dismissal_restrictions": {
                                                "users": [
                                                    "octocat"
                                                ],
                                                "teams": [
                                                    "justice-league"
                                                ]
                                            },
                                            "dismiss_stale_reviews": true,
                                            "require_code_owner_reviews": true,
                                            "required_approving_review_count": 2,
                                            "require_last_push_approval": true,
                                            "bypass_pull_request_allowances": {
                                                "users": [
                                                    "octocat"
                                                ],
                                                "teams": [
                                                    "justice-league"
                                                ]
                                            }
                                        },
                                        "restrictions": {
                                            "users": [
                                                "octocat"
                                            ],
                                            "teams": [
                                                "justice-league"
                                            ],
                                            "apps": [
                                                "super-ci"
                                            ]
                                        },
                                        "required_linear_history": true,
                                        "allow_force_pushes": true,
                                        "allow_deletions": true,
                                        "block_creations": true,
                                        "required_conversation_resolution": true,
                                        "lock_branch": true,
                                        "allow_fork_syncing": true
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete branch protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-branch-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
            "get": {
                "summary": "Get admin branch protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-admin-branch-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "post": {
                "summary": "Set admin branch protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nAdding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/set-admin-branch-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "delete": {
                "summary": "Delete admin branch protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoving admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-admin-branch-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
            "get": {
                "summary": "Get pull request review protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-pull-request-review-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "patch": {
                "summary": "Update pull request review protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n> [!NOTE]\n> Passing new arrays of `users` and `teams` replaces their previous values.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-pull-request-review-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "dismissal_restrictions": {
                                        "type": "object",
                                        "description": "Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                                        "properties": {
                                            "users": {
                                                "type": "array",
                                                "description": "The list of user `login`s with dismissal access",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "teams": {
                                                "type": "array",
                                                "description": "The list of team `slug`s with dismissal access",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "apps": {
                                                "type": "array",
                                                "description": "The list of app `slug`s with dismissal access",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "dismiss_stale_reviews": {
                                        "type": "boolean",
                                        "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit."
                                    },
                                    "require_code_owner_reviews": {
                                        "type": "boolean",
                                        "description": "Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed."
                                    },
                                    "required_approving_review_count": {
                                        "type": "integer",
                                        "description": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers."
                                    },
                                    "require_last_push_approval": {
                                        "type": "boolean",
                                        "description": "Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`",
                                        "default": false
                                    },
                                    "bypass_pull_request_allowances": {
                                        "type": "object",
                                        "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
                                        "properties": {
                                            "users": {
                                                "type": "array",
                                                "description": "The list of user `login`s allowed to bypass pull request requirements.",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "teams": {
                                                "type": "array",
                                                "description": "The list of team `slug`s allowed to bypass pull request requirements.",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "apps": {
                                                "type": "array",
                                                "description": "The list of app `slug`s allowed to bypass pull request requirements.",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "dismissal_restrictions": {
                                            "users": [
                                                "octocat"
                                            ],
                                            "teams": [
                                                "justice-league"
                                            ],
                                            "apps": [
                                                "octoapp"
                                            ]
                                        },
                                        "bypass_pull_request_allowances": {
                                            "users": [
                                                "octocat"
                                            ],
                                            "teams": [
                                                "justice-league"
                                            ],
                                            "apps": [
                                                "octoapp"
                                            ]
                                        },
                                        "dismiss_stale_reviews": true,
                                        "require_code_owner_reviews": true,
                                        "required_approving_review_count": 2,
                                        "require_last_push_approval": true
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete pull request review protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-pull-request-review-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
            "get": {
                "summary": "Get commit signature protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n\n> [!NOTE]\n> You must enable branch protection to require signed commits.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-commit-signature-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "post": {
                "summary": "Create commit signature protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-commit-signature-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "delete": {
                "summary": "Delete commit signature protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-commit-signature-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
            "get": {
                "summary": "Get status checks protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-status-checks-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "patch": {
                "summary": "Update status check protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-status-check-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "strict": {
                                        "type": "boolean",
                                        "description": "Require branches to be up to date before merging."
                                    },
                                    "contexts": {
                                        "type": "array",
                                        "deprecated": true,
                                        "description": "**Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "checks": {
                                        "type": "array",
                                        "description": "The list of status checks to require in order to merge into this branch.",
                                        "items": {
                                            "type": "object",
                                            "required": [
                                                "context"
                                            ],
                                            "properties": {
                                                "context": {
                                                    "type": "string",
                                                    "description": "The name of the required check"
                                                },
                                                "app_id": {
                                                    "type": "integer",
                                                    "description": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status."
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "strict": true,
                                        "contexts": [
                                            "continuous-integration/travis-ci"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove status check protection",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/remove-status-check-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
            "get": {
                "summary": "Get all status check contexts",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-all-status-check-contexts",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "post": {
                "summary": "Add status check contexts",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/add-status-check-contexts",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "contexts": {
                                                "type": "array",
                                                "description": "The name of the status checks",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "required": [
                                            "contexts"
                                        ],
                                        "example": {
                                            "contexts": [
                                                "contexts"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "description": "The name of the status checks",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example adding status checks to a branch protection rule",
                                    "value": {
                                        "contexts": [
                                            "continuous-integration/travis-ci",
                                            "continuous-integration/jenkins"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Set status check contexts",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/set-status-check-contexts",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "contexts": {
                                                "type": "array",
                                                "description": "The name of the status checks",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "required": [
                                            "contexts"
                                        ],
                                        "example": {
                                            "contexts": [
                                                "contexts"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "description": "The name of the status checks",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example updating status checks for a branch protection rule",
                                    "value": {
                                        "contexts": [
                                            "continuous-integration/travis-ci"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove status check contexts",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/remove-status-check-contexts",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "contexts": {
                                                "type": "array",
                                                "description": "The name of the status checks",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "required": [
                                            "contexts"
                                        ],
                                        "example": {
                                            "contexts": [
                                                "contexts"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "description": "The name of the status checks",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example removing status checks from a branch protection rule",
                                    "value": {
                                        "contexts": [
                                            "continuous-integration/jenkins"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
            "get": {
                "summary": "Get access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists who has access to this protected branch.\n\n> [!NOTE]\n> Users, apps, and teams `restrictions` are only available for organization-owned repositories.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "delete": {
                "summary": "Delete access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nDisables the ability to restrict who can push to this branch.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
            "get": {
                "summary": "Get apps with access to the protected branch",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-apps-with-access-to-protected-branch",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "post": {
                "summary": "Add app access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/add-app-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "apps": {
                                        "type": "array",
                                        "description": "The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "apps"
                                ],
                                "example": {
                                    "apps": [
                                        "my-app"
                                    ]
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "apps": [
                                            "octoapp"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Set app access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/set-app-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "apps": {
                                        "type": "array",
                                        "description": "The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "apps"
                                ],
                                "example": {
                                    "apps": [
                                        "my-app"
                                    ]
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "apps": [
                                            "octoapp"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove app access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/remove-app-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "apps": {
                                        "type": "array",
                                        "description": "The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "apps"
                                ],
                                "example": {
                                    "apps": [
                                        "my-app"
                                    ]
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "apps": [
                                            "my-app"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
            "get": {
                "summary": "Get teams with access to the protected branch",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the teams who have push access to this branch. The list includes child teams.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-teams-with-access-to-protected-branch",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "post": {
                "summary": "Add team access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified teams push access for this branch. You can also give push access to child teams.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/add-team-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "teams": {
                                                "type": "array",
                                                "description": "The slug values for teams",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "required": [
                                            "teams"
                                        ],
                                        "example": {
                                            "teams": [
                                                "my-team"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "description": "The slug values for teams",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example adding a team in a branch protection rule",
                                    "value": {
                                        "teams": [
                                            "justice-league"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Set team access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/set-team-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "teams": {
                                                "type": "array",
                                                "description": "The slug values for teams",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "required": [
                                            "teams"
                                        ],
                                        "example": {
                                            "teams": [
                                                "justice-league"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "description": "The slug values for teams",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example replacing a team in a branch protection rule",
                                    "value": {
                                        "teams": [
                                            "justice-league"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove team access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a team to push to this branch. You can also remove push access for child teams.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/remove-team-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "teams": {
                                                "type": "array",
                                                "description": "The slug values for teams",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "required": [
                                            "teams"
                                        ],
                                        "example": {
                                            "teams": [
                                                "my-team"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "description": "The slug values for teams",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example removing a team in a branch protection rule",
                                    "value": {
                                        "teams": [
                                            "octocats"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
            "get": {
                "summary": "Get users with access to the protected branch",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the people who have push access to this branch.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-users-with-access-to-protected-branch",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            },
            "post": {
                "summary": "Add user access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified people push access for this branch.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/add-user-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "users": {
                                        "type": "array",
                                        "description": "The username for users",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "users"
                                ],
                                "example": {
                                    "users": [
                                        "mona"
                                    ]
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example adding a user in a branch protection rule",
                                    "value": {
                                        "users": [
                                            "octocat"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Set user access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/set-user-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "users": {
                                        "type": "array",
                                        "description": "The username for users",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "users"
                                ],
                                "example": {
                                    "users": [
                                        "mona"
                                    ]
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example replacing a user in a branch protection rule",
                                    "value": {
                                        "users": [
                                            "octocat"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove user access restrictions",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a user to push to this branch.\n\n| Type    | Description                                                                                                                                   |\n| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/remove-user-access-restrictions",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "users": {
                                        "type": "array",
                                        "description": "The username for users",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "users"
                                ],
                                "example": {
                                    "users": [
                                        "mona"
                                    ]
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example removing a user in a branch protection rule",
                                    "value": {
                                        "users": [
                                            "octocat"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/branches/{branch}/rename": {
            "post": {
                "summary": "Rename a branch",
                "description": "Renames a branch in a repository.\n\n> [!NOTE]\n> Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \"[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\".\n\nThe authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.\n\nIn order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/rename-branch",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "new_name": {
                                        "type": "string",
                                        "description": "The new name of the branch."
                                    }
                                },
                                "required": [
                                    "new_name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "new_name": "my_renamed_branch"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/check-runs": {
            "post": {
                "summary": "Create a check run",
                "description": "Creates a new check run for a specific commit in a repository.\n\nTo create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite.\n\nIn a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.\n\n> [!NOTE]\n> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/create",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the check. For example, \"code-coverage\"."
                                    },
                                    "head_sha": {
                                        "type": "string",
                                        "description": "The SHA of the commit."
                                    },
                                    "details_url": {
                                        "type": "string",
                                        "description": "The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used."
                                    },
                                    "external_id": {
                                        "type": "string",
                                        "description": "A reference for the run on the integrator's system."
                                    },
                                    "status": {
                                        "type": "string",
                                        "description": "The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.",
                                        "enum": [
                                            "queued",
                                            "in_progress",
                                            "completed",
                                            "waiting",
                                            "requested",
                                            "pending"
                                        ],
                                        "default": "queued"
                                    },
                                    "started_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                                    },
                                    "conclusion": {
                                        "type": "string",
                                        "description": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.",
                                        "enum": [
                                            "action_required",
                                            "cancelled",
                                            "failure",
                                            "neutral",
                                            "success",
                                            "skipped",
                                            "stale",
                                            "timed_out"
                                        ]
                                    },
                                    "completed_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                                    },
                                    "output": {
                                        "type": "object",
                                        "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.",
                                        "properties": {
                                            "title": {
                                                "type": "string",
                                                "description": "The title of the check run."
                                            },
                                            "summary": {
                                                "type": "string",
                                                "maxLength": 65535,
                                                "description": "The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters."
                                            },
                                            "text": {
                                                "type": "string",
                                                "maxLength": 65535,
                                                "description": "The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters."
                                            },
                                            "annotations": {
                                                "type": "array",
                                                "description": "Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\".",
                                                "maxItems": 50,
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "path": {
                                                            "type": "string",
                                                            "description": "The path of the file to add an annotation to. For example, `assets/css/main.css`."
                                                        },
                                                        "start_line": {
                                                            "type": "integer",
                                                            "description": "The start line of the annotation. Line numbers start at 1."
                                                        },
                                                        "end_line": {
                                                            "type": "integer",
                                                            "description": "The end line of the annotation."
                                                        },
                                                        "start_column": {
                                                            "type": "integer",
                                                            "description": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1."
                                                        },
                                                        "end_column": {
                                                            "type": "integer",
                                                            "description": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values."
                                                        },
                                                        "annotation_level": {
                                                            "type": "string",
                                                            "description": "The level of the annotation.",
                                                            "enum": [
                                                                "notice",
                                                                "warning",
                                                                "failure"
                                                            ]
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB."
                                                        },
                                                        "title": {
                                                            "type": "string",
                                                            "description": "The title that represents the annotation. The maximum size is 255 characters."
                                                        },
                                                        "raw_details": {
                                                            "type": "string",
                                                            "description": "Details about this annotation. The maximum size is 64 KB."
                                                        }
                                                    },
                                                    "required": [
                                                        "path",
                                                        "start_line",
                                                        "end_line",
                                                        "annotation_level",
                                                        "message"
                                                    ]
                                                }
                                            },
                                            "images": {
                                                "type": "array",
                                                "description": "Adds images to the output displayed in the GitHub pull request UI.",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "alt": {
                                                            "type": "string",
                                                            "description": "The alternative text for the image."
                                                        },
                                                        "image_url": {
                                                            "type": "string",
                                                            "description": "The full URL of the image."
                                                        },
                                                        "caption": {
                                                            "type": "string",
                                                            "description": "A short image description."
                                                        }
                                                    },
                                                    "required": [
                                                        "alt",
                                                        "image_url"
                                                    ]
                                                }
                                            }
                                        },
                                        "required": [
                                            "title",
                                            "summary"
                                        ]
                                    },
                                    "actions": {
                                        "type": "array",
                                        "description": "Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions).\"",
                                        "maxItems": 3,
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "label": {
                                                    "type": "string",
                                                    "maxLength": 20,
                                                    "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters."
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "maxLength": 40,
                                                    "description": "A short explanation of what this action would do. The maximum size is 40 characters."
                                                },
                                                "identifier": {
                                                    "type": "string",
                                                    "maxLength": 20,
                                                    "description": "A reference for the action on the integrator's system. The maximum size is 20 characters."
                                                }
                                            },
                                            "required": [
                                                "label",
                                                "description",
                                                "identifier"
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "name",
                                    "head_sha"
                                ],
                                "discriminator": {
                                    "propertyName": "status"
                                },
                                "oneOf": [
                                    {
                                        "properties": {
                                            "status": {
                                                "enum": [
                                                    "completed"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "status",
                                            "conclusion"
                                        ],
                                        "additionalProperties": true
                                    },
                                    {
                                        "properties": {
                                            "status": {
                                                "enum": [
                                                    "queued",
                                                    "in_progress"
                                                ]
                                            }
                                        },
                                        "additionalProperties": true
                                    }
                                ]
                            },
                            "examples": {
                                "example-of-in-progress-conclusion": {
                                    "summary": "Example of an in_progress conclusion",
                                    "value": {
                                        "name": "mighty_readme",
                                        "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                                        "status": "in_progress",
                                        "external_id": "42",
                                        "started_at": "2018-05-04T01:14:52Z",
                                        "output": {
                                            "title": "Mighty Readme report",
                                            "summary": "",
                                            "text": ""
                                        }
                                    }
                                },
                                "example-of-completed-conclusion": {
                                    "summary": "Example of a completed conclusion",
                                    "value": {
                                        "name": "mighty_readme",
                                        "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                                        "status": "completed",
                                        "started_at": "2017-11-30T19:39:10Z",
                                        "conclusion": "success",
                                        "completed_at": "2017-11-30T19:49:10Z",
                                        "output": {
                                            "title": "Mighty Readme report",
                                            "summary": "There are 0 failures, 2 warnings, and 1 notices.",
                                            "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                                            "annotations": [
                                                {
                                                    "path": "README.md",
                                                    "annotation_level": "warning",
                                                    "title": "Spell Checker",
                                                    "message": "Check your spelling for 'banaas'.",
                                                    "raw_details": "Do you mean 'bananas' or 'banana'?",
                                                    "start_line": 2,
                                                    "end_line": 2
                                                },
                                                {
                                                    "path": "README.md",
                                                    "annotation_level": "warning",
                                                    "title": "Spell Checker",
                                                    "message": "Check your spelling for 'aples'",
                                                    "raw_details": "Do you mean 'apples' or 'Naples'",
                                                    "start_line": 4,
                                                    "end_line": 4
                                                }
                                            ],
                                            "images": [
                                                {
                                                    "alt": "Super bananas",
                                                    "image_url": "http://example.com/images/42"
                                                }
                                            ]
                                        },
                                        "actions": [
                                            {
                                                "label": "Fix",
                                                "identifier": "fix_errors",
                                                "description": "Allow us to fix these errors for you"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/check-runs/{check_run_id}": {
            "get": {
                "summary": "Get a check run",
                "description": "Gets a single check run using its `id`.\n\n> [!NOTE]\n> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/get",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "check_run_id",
                        "description": "The unique identifier of the check run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a check run",
                "description": "Updates a check run for a specific commit in a repository.\n\n> [!NOTE]\n> The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nOAuth apps and personal access tokens (classic) cannot use this endpoint.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/update",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "check_run_id",
                        "description": "The unique identifier of the check run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the check. For example, \"code-coverage\"."
                                    },
                                    "details_url": {
                                        "type": "string",
                                        "description": "The URL of the integrator's site that has the full details of the check."
                                    },
                                    "external_id": {
                                        "type": "string",
                                        "description": "A reference for the run on the integrator's system."
                                    },
                                    "started_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                                    },
                                    "status": {
                                        "type": "string",
                                        "description": "The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.",
                                        "enum": [
                                            "queued",
                                            "in_progress",
                                            "completed",
                                            "waiting",
                                            "requested",
                                            "pending"
                                        ]
                                    },
                                    "conclusion": {
                                        "type": "string",
                                        "description": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.",
                                        "enum": [
                                            "action_required",
                                            "cancelled",
                                            "failure",
                                            "neutral",
                                            "success",
                                            "skipped",
                                            "stale",
                                            "timed_out"
                                        ]
                                    },
                                    "completed_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                                    },
                                    "output": {
                                        "type": "object",
                                        "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.",
                                        "properties": {
                                            "title": {
                                                "type": "string",
                                                "description": "**Required**."
                                            },
                                            "summary": {
                                                "type": "string",
                                                "description": "Can contain Markdown.",
                                                "maxLength": 65535
                                            },
                                            "text": {
                                                "type": "string",
                                                "description": "Can contain Markdown.",
                                                "maxLength": 65535
                                            },
                                            "annotations": {
                                                "type": "array",
                                                "description": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about annotations in the UI, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\".",
                                                "maxItems": 50,
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "path": {
                                                            "type": "string",
                                                            "description": "The path of the file to add an annotation to. For example, `assets/css/main.css`."
                                                        },
                                                        "start_line": {
                                                            "type": "integer",
                                                            "description": "The start line of the annotation. Line numbers start at 1."
                                                        },
                                                        "end_line": {
                                                            "type": "integer",
                                                            "description": "The end line of the annotation."
                                                        },
                                                        "start_column": {
                                                            "type": "integer",
                                                            "description": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1."
                                                        },
                                                        "end_column": {
                                                            "type": "integer",
                                                            "description": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values."
                                                        },
                                                        "annotation_level": {
                                                            "type": "string",
                                                            "description": "The level of the annotation.",
                                                            "enum": [
                                                                "notice",
                                                                "warning",
                                                                "failure"
                                                            ]
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB."
                                                        },
                                                        "title": {
                                                            "type": "string",
                                                            "description": "The title that represents the annotation. The maximum size is 255 characters."
                                                        },
                                                        "raw_details": {
                                                            "type": "string",
                                                            "description": "Details about this annotation. The maximum size is 64 KB."
                                                        }
                                                    },
                                                    "required": [
                                                        "path",
                                                        "start_line",
                                                        "end_line",
                                                        "annotation_level",
                                                        "message"
                                                    ]
                                                }
                                            },
                                            "images": {
                                                "type": "array",
                                                "description": "Adds images to the output displayed in the GitHub pull request UI.",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "alt": {
                                                            "type": "string",
                                                            "description": "The alternative text for the image."
                                                        },
                                                        "image_url": {
                                                            "type": "string",
                                                            "description": "The full URL of the image."
                                                        },
                                                        "caption": {
                                                            "type": "string",
                                                            "description": "A short image description."
                                                        }
                                                    },
                                                    "required": [
                                                        "alt",
                                                        "image_url"
                                                    ]
                                                }
                                            }
                                        },
                                        "required": [
                                            "summary"
                                        ]
                                    },
                                    "actions": {
                                        "type": "array",
                                        "description": "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions).\"",
                                        "maxItems": 3,
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "label": {
                                                    "type": "string",
                                                    "maxLength": 20,
                                                    "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters."
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "maxLength": 40,
                                                    "description": "A short explanation of what this action would do. The maximum size is 40 characters."
                                                },
                                                "identifier": {
                                                    "type": "string",
                                                    "maxLength": 20,
                                                    "description": "A reference for the action on the integrator's system. The maximum size is 20 characters."
                                                }
                                            },
                                            "required": [
                                                "label",
                                                "description",
                                                "identifier"
                                            ]
                                        }
                                    }
                                },
                                "anyOf": [
                                    {
                                        "properties": {
                                            "status": {
                                                "enum": [
                                                    "completed"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "conclusion"
                                        ],
                                        "additionalProperties": true
                                    },
                                    {
                                        "properties": {
                                            "status": {
                                                "enum": [
                                                    "queued",
                                                    "in_progress"
                                                ]
                                            }
                                        },
                                        "additionalProperties": true
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "mighty_readme",
                                        "started_at": "2018-05-04T01:14:52Z",
                                        "status": "completed",
                                        "conclusion": "success",
                                        "completed_at": "2018-05-04T01:14:52Z",
                                        "output": {
                                            "title": "Mighty Readme report",
                                            "summary": "There are 0 failures, 2 warnings, and 1 notices.",
                                            "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                                            "annotations": [
                                                {
                                                    "path": "README.md",
                                                    "annotation_level": "warning",
                                                    "title": "Spell Checker",
                                                    "message": "Check your spelling for 'banaas'.",
                                                    "raw_details": "Do you mean 'bananas' or 'banana'?",
                                                    "start_line": 2,
                                                    "end_line": 2
                                                },
                                                {
                                                    "path": "README.md",
                                                    "annotation_level": "warning",
                                                    "title": "Spell Checker",
                                                    "message": "Check your spelling for 'aples'",
                                                    "raw_details": "Do you mean 'apples' or 'Naples'",
                                                    "start_line": 4,
                                                    "end_line": 4
                                                }
                                            ],
                                            "images": [
                                                {
                                                    "alt": "Super bananas",
                                                    "image_url": "http://example.com/images/42"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": {
            "get": {
                "summary": "List check run annotations",
                "description": "Lists annotations for a check run using the annotation `id`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/list-annotations",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "check_run_id",
                        "description": "The unique identifier of the check run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest": {
            "post": {
                "summary": "Rerequest a check run",
                "description": "Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nFor more information about how to re-run GitHub Actions jobs, see \"[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)\".\n\nOAuth apps and personal access tokens (classic) cannot use this endpoint.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/rerequest-run",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "check_run_id",
                        "description": "The unique identifier of the check run.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/check-suites": {
            "post": {
                "summary": "Create a check suite",
                "description": "Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)\".\n\n> [!NOTE]\n> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nOAuth apps and personal access tokens (classic) cannot use this endpoint.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/create-suite",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "head_sha": {
                                        "type": "string",
                                        "description": "The sha of the head commit."
                                    }
                                },
                                "required": [
                                    "head_sha"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/check-suites/preferences": {
            "patch": {
                "summary": "Update repository preferences for check suites",
                "description": "Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).\nYou must have admin permissions in the repository to set preferences for check suites.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/set-suites-preferences",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "auto_trigger_checks": {
                                        "type": "array",
                                        "description": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "app_id": {
                                                    "type": "integer",
                                                    "description": "The `id` of the GitHub App."
                                                },
                                                "setting": {
                                                    "type": "boolean",
                                                    "description": "Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
                                                    "default": true
                                                }
                                            },
                                            "required": [
                                                "app_id",
                                                "setting"
                                            ]
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "auto_trigger_checks": [
                                            {
                                                "app_id": 4,
                                                "setting": false
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/check-suites/{check_suite_id}": {
            "get": {
                "summary": "Get a check suite",
                "description": "Gets a single check suite using its `id`.\n\n> [!NOTE]\n> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/get-suite",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "check_suite_id",
                        "description": "The unique identifier of the check suite.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": {
            "get": {
                "summary": "List check runs in a check suite",
                "description": "Lists check runs for a check suite using its `id`.\n\n> [!NOTE]\n> The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/list-for-suite",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "check_suite_id",
                        "description": "The unique identifier of the check suite.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "check_name",
                        "description": "Returns check runs with the specified `name`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "description": "Returns check runs with the specified `status`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "queued",
                                "in_progress",
                                "completed"
                            ]
                        }
                    },
                    {
                        "name": "filter",
                        "description": "Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "latest",
                                "all"
                            ],
                            "default": "latest"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": {
            "post": {
                "summary": "Rerequest a check suite",
                "description": "Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nOAuth apps and personal access tokens (classic) cannot use this endpoint.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/rerequest-suite",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "check_suite_id",
                        "description": "The unique identifier of the check suite.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/alerts": {
            "get": {
                "summary": "List code scanning alerts for a repository",
                "description": "Lists code scanning alerts.\n\nThe response includes a `most_recent_instance` object.\nThis provides details of the most recent instance of this alert\nfor the default branch (or for the specified Git reference if you used `ref` in the request).\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/list-alerts-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tool_name",
                        "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The name of the tool used to generate the code scanning analysis."
                        }
                    },
                    {
                        "name": "tool_guid",
                        "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "nullable": true,
                            "type": "string",
                            "description": "The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data."
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,\n`refs/heads/<branch name>` or simply `<branch name>`."
                        }
                    },
                    {
                        "name": "pr",
                        "description": "The number of the pull request for the results you want to list.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property by which to sort the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "state",
                        "description": "If specified, only code scanning alerts with this state will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "State of a code scanning alert.",
                            "enum": [
                                "open",
                                "closed",
                                "dismissed",
                                "fixed"
                            ]
                        }
                    },
                    {
                        "name": "severity",
                        "description": "If specified, only code scanning alerts with this severity will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Severity of a code scanning alert.",
                            "enum": [
                                "critical",
                                "high",
                                "medium",
                                "low",
                                "warning",
                                "note",
                                "error"
                            ]
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
            "get": {
                "summary": "Get a code scanning alert",
                "description": "Gets a single code scanning alert.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/get-alert",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a code scanning alert",
                "description": "Updates the status of a single code scanning alert.\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "operationId": "code-scanning/update-alert",
                "tags": [
                    "code-scanning"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "description": "Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.",
                                        "type": "string",
                                        "enum": [
                                            "open",
                                            "dismissed"
                                        ]
                                    },
                                    "dismissed_reason": {
                                        "type": "string",
                                        "description": "**Required when the state is dismissed.** The reason for dismissing or closing the alert.",
                                        "nullable": true,
                                        "enum": [
                                            "false positive",
                                            "won't fix",
                                            "used in tests"
                                        ]
                                    },
                                    "dismissed_comment": {
                                        "type": "string",
                                        "description": "The dismissal comment associated with the dismissal of the alert.",
                                        "nullable": true,
                                        "maxLength": 280
                                    },
                                    "create_request": {
                                        "type": "boolean",
                                        "description": "If `true`, attempt to create an alert dismissal request."
                                    }
                                },
                                "required": [
                                    "state"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "state": "dismissed",
                                        "dismissed_reason": "false positive",
                                        "dismissed_comment": "This alert is not actually correct, because there's a sanitizer included in the library.",
                                        "create_request": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix": {
            "get": {
                "summary": "Get the status of an autofix for a code scanning alert",
                "description": "Gets the status and description of an autofix for a code scanning alert.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/get-autofix",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an autofix for a code scanning alert",
                "description": "Creates an autofix for a code scanning alert.\n\nIf a new autofix is to be created as a result of this request or is currently being generated, then this endpoint will return a 202 Accepted response.\n\nIf an autofix already exists for a given alert, then this endpoint will return a 200 OK response.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/create-autofix",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits": {
            "post": {
                "summary": "Commit an autofix for a code scanning alert",
                "description": "Commits an autofix for a code scanning alert.\n\nIf an autofix is committed as a result of this request, then this endpoint will return a 201 Created response.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/commit-autofix",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Commit an autofix for a code scanning alert",
                                "type": "object",
                                "properties": {
                                    "target_ref": {
                                        "description": "The Git reference of target branch for the commit. Branch needs to already exist.  For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "Commit message to be used.",
                                        "type": "string"
                                    }
                                },
                                "nullable": true
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "target_ref": "refs/heads/fix-bug",
                                        "message": "Let's fix this \ud83e\udeb2!"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances": {
            "get": {
                "summary": "List instances of a code scanning alert",
                "description": "Lists all instances of the specified code scanning alert.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/list-alert-instances",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,\n`refs/heads/<branch name>` or simply `<branch name>`."
                        }
                    },
                    {
                        "name": "pr",
                        "description": "The number of the pull request for the results you want to list.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/analyses": {
            "get": {
                "summary": "List code scanning analyses for a repository",
                "description": "Lists the details of all code scanning analyses for a repository,\nstarting with the most recent.\nThe response is paginated and you can use the `page` and `per_page` parameters\nto list the analyses you're interested in.\nBy default 30 analyses are listed per page.\n\nThe `rules_count` field in the response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\n> [!WARNING]\n> **Closing down notice:** The `tool_name` field is closing down and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "operationId": "code-scanning/list-recent-analyses",
                "tags": [
                    "code-scanning"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tool_name",
                        "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The name of the tool used to generate the code scanning analysis."
                        }
                    },
                    {
                        "name": "tool_guid",
                        "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "nullable": true,
                            "type": "string",
                            "description": "The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data."
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "pr",
                        "description": "The number of the pull request for the results you want to list.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "query",
                        "description": "The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,\n`refs/heads/<branch name>` or simply `<branch name>`."
                        }
                    },
                    {
                        "name": "sarif_id",
                        "in": "query",
                        "description": "Filter analyses belonging to the same SARIF upload.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "An identifier for the upload.",
                            "example": "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property by which to sort the results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created"
                            ],
                            "default": "created"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": {
            "get": {
                "summary": "Get a code scanning analysis for a repository",
                "description": "Gets a specified code scanning analysis for a repository.\n\nThe default JSON response contains fields that describe the analysis.\nThis includes the Git reference and commit SHA to which the analysis relates,\nthe datetime of the analysis, the name of the code scanning tool,\nand the number of alerts.\n\nThe `rules_count` field in the default response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "operationId": "code-scanning/get-analysis",
                "tags": [
                    "code-scanning"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "analysis_id",
                        "in": "path",
                        "description": "The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a code scanning analysis from a repository",
                "description": "Deletes a specified code scanning analysis from a repository.\n\nYou can delete one analysis at a time.\nTo delete a series of analyses, start with the most recent analysis and work backwards.\nConceptually, the process is similar to the undo function in a text editor.\n\nWhen you list the analyses for a repository,\none or more will be identified as deletable in the response:\n\n```\n\"deletable\": true\n```\n\nAn analysis is deletable when it's the most recent in a set of analyses.\nTypically, a repository will have multiple sets of analyses\nfor each enabled code scanning tool,\nwhere a set is determined by a unique combination of analysis values:\n\n* `ref`\n* `tool`\n* `category`\n\nIf you attempt to delete an analysis that is not the most recent in a set,\nyou'll get a 400 response with the message:\n\n```\nAnalysis specified is not deletable.\n```\n\nThe response from a successful `DELETE` operation provides you with\ntwo alternative URLs for deleting the next analysis in the set:\n`next_analysis_url` and `confirm_delete_url`.\nUse the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis\nin a set. This is a useful option if you want to preserve at least one analysis\nfor the specified tool in your repository.\nUse the `confirm_delete_url` URL if you are content to remove all analyses for a tool.\nWhen you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`\nin the 200 response is `null`.\n\nAs an example of the deletion process,\nlet's imagine that you added a workflow that configured a particular code scanning tool\nto analyze the code in a repository. This tool has added 15 analyses:\n10 on the default branch, and another 5 on a topic branch.\nYou therefore have two separate sets of analyses for this tool.\nYou've now decided that you want to remove all of the analyses for the tool.\nTo do this you must make 15 separate deletion requests.\nTo start, you must find an analysis that's identified as deletable.\nEach set of analyses always has one that's identified as deletable.\nHaving found the deletable analysis for one of the two sets,\ndelete this analysis and then continue deleting the next analysis in the set until they're all deleted.\nThen repeat the process for the second set.\nThe procedure therefore consists of a nested loop:\n\n**Outer loop**:\n* List the analyses for the repository, filtered by tool.\n* Parse this list to find a deletable analysis. If found:\n\n  **Inner loop**:\n  * Delete the identified analysis.\n  * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.\n\nThe above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "operationId": "code-scanning/delete-analysis",
                "tags": [
                    "code-scanning"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "analysis_id",
                        "in": "path",
                        "description": "The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "confirm_delete",
                        "in": "query",
                        "description": "Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/codeql/databases": {
            "get": {
                "summary": "List CodeQL databases for a repository",
                "description": "Lists the CodeQL databases that are available in a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/list-codeql-databases",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}": {
            "get": {
                "summary": "Get a CodeQL database for a repository",
                "description": "Gets a CodeQL database for a language in a repository.\n\nBy default this endpoint returns JSON metadata about the CodeQL database. To\ndownload the CodeQL database binary content, set the `Accept` header of the request\nto [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure\nyour HTTP client is configured to follow redirects or use the `Location` header\nto make a second request to get the redirect URL.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/get-codeql-database",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "in": "path",
                        "description": "The language of the CodeQL database.",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "summary": "Delete a CodeQL database",
                "description": "Deletes a CodeQL database for a language in a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/delete-codeql-database",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "in": "path",
                        "description": "The language of the CodeQL database.",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses": {
            "post": {
                "summary": "Create a CodeQL variant analysis",
                "description": "Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.\n\nGet started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).\n\nUse the `owner` and `repo` parameters in the URL to specify the controller repository that\nwill be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/create-variant-analysis",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "language": {
                                        "type": "string",
                                        "description": "The language targeted by the CodeQL query",
                                        "enum": [
                                            "cpp",
                                            "csharp",
                                            "go",
                                            "java",
                                            "javascript",
                                            "python",
                                            "ruby",
                                            "rust",
                                            "swift"
                                        ]
                                    },
                                    "query_pack": {
                                        "description": "A Base64-encoded tarball containing a CodeQL query and all its dependencies",
                                        "type": "string"
                                    },
                                    "repositories": {
                                        "type": "array",
                                        "description": "List of repository names (in the form `owner/repo-name`) to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "repository_lists": {
                                        "description": "List of repository lists to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.",
                                        "type": "array",
                                        "maxItems": 1,
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "repository_owners": {
                                        "description": "List of organization or user names whose repositories the query should be run against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.",
                                        "type": "array",
                                        "maxItems": 1,
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "language",
                                    "query_pack"
                                ],
                                "oneOf": [
                                    {
                                        "required": [
                                            "repositories"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "repository_lists"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "repository_owners"
                                        ]
                                    }
                                ]
                            },
                            "examples": {
                                "repositories_parameter": {
                                    "summary": "Using the \"repositories\" field. \"query_pack\" is abridged for brevity.",
                                    "value": {
                                        "language": "csharp",
                                        "query_pack": "aGVsbG8=",
                                        "repositories": [
                                            "octocat/Hello-World",
                                            "octocat/example"
                                        ]
                                    }
                                },
                                "repository_owners": {
                                    "summary": "Using the \"repository_owners\" field. \"query_pack\" is abridged.",
                                    "value": {
                                        "language": "csharp",
                                        "query_pack": "aGVsbG8=",
                                        "repository_owners": [
                                            "octocat"
                                        ]
                                    }
                                },
                                "repository_lists": {
                                    "summary": "Using the \"repository_lists\" field. \"query_pack\" is abridged.",
                                    "value": {
                                        "language": "csharp",
                                        "query_pack": "aGVsbG8=",
                                        "repository_lists": [
                                            "top-100-csharp"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}": {
            "get": {
                "summary": "Get the summary of a CodeQL variant analysis",
                "description": "Gets the summary of a CodeQL variant analysis.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/get-variant-analysis",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "codeql_variant_analysis_id",
                        "in": "path",
                        "description": "The unique identifier of the variant analysis.",
                        "schema": {
                            "type": "integer"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}": {
            "get": {
                "summary": "Get the analysis status of a repository in a CodeQL variant analysis",
                "description": "Gets the analysis status of a repository in a CodeQL variant analysis.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/get-variant-analysis-repo-task",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "in": "path",
                        "description": "The name of the controller repository.",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "codeql_variant_analysis_id",
                        "in": "path",
                        "description": "The ID of the variant analysis.",
                        "schema": {
                            "type": "integer"
                        },
                        "required": true
                    },
                    {
                        "name": "repo_owner",
                        "in": "path",
                        "description": "The account owner of the variant analysis repository. The name is not case sensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "repo_name",
                        "in": "path",
                        "description": "The name of the variant analysis repository.",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-scanning/default-setup": {
            "get": {
                "summary": "Get a code scanning default setup configuration",
                "description": "Gets a code scanning default setup configuration.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/get-default-setup",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a code scanning default setup configuration",
                "description": "Updates a code scanning default setup configuration.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "tags": [
                    "code-scanning"
                ],
                "operationId": "code-scanning/update-default-setup",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Configuration for code scanning default setup.",
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "description": "The desired state of code scanning default setup.",
                                        "type": "string",
                                        "enum": [
                                            "configured",
                                            "not-configured"
                                        ]
                                    },
                                    "runner_type": {
                                        "description": "Runner type to be used.",
                                        "type": "string",
                                        "enum": [
                                            "standard",
                                            "labeled"
                                        ]
                                    },
                                    "runner_label": {
                                        "nullable": true,
                                        "description": "Runner label to be used if the runner type is labeled.",
                                        "type": "string",
                                        "example": "code-scanning"
                                    },
                                    "query_suite": {
                                        "description": "CodeQL query suite to be used.",
                                        "type": "string",
                                        "enum": [
                                            "default",
                                            "extended"
                                        ]
                                    },
                                    "languages": {
                                        "description": "CodeQL languages to be analyzed.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "actions",
                                                "c-cpp",
                                                "csharp",
                                                "go",
                                                "java-kotlin",
                                                "javascript-typescript",
                                                "python",
                                                "ruby",
                                                "swift"
                                            ]
                                        }
                                    }
                                },
                                "additionalProperties": false
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "state": "configured"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/code-scanning/sarifs": {
            "post": {
                "summary": "Upload an analysis as SARIF data",
                "description": "Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see \"[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif).\"\n\nThere are two places where you can upload code scanning results.\n - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see \"[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\"\n - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see \"[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\"\n\nYou must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:\n\n```\ngzip -c analysis-data.sarif | base64 -w0\n```\n\nSARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.\nTo get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see \"[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit).\"\n\n\n| **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |\n|----------------------------------|:------------------:|----------------------------------------------------------------------------------|\n| Runs per file                    |         20         |                                                                                  |\n| Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |\n| Rules per run                    |       25,000       |                                                                                  |\n| Tool extensions per run          |        100         |                                                                                  |\n| Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |\n| Location per result\t             |       1,000        | Only 100 locations will be included.                                             |\n| Tags per rule\t                   |         20         | Only 10 tags will be included.                                                   |\n\n\nThe `202 Accepted` response includes an `id` value.\nYou can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.\nFor more information, see \"[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload).\"\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.\n\nThis endpoint is limited to 1,000 requests per hour for each user or app installation calling it.",
                "operationId": "code-scanning/upload-sarif",
                "tags": [
                    "code-scanning"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "commit_sha": {
                                        "description": "The SHA of the commit to which the analysis you are uploading relates.",
                                        "type": "string",
                                        "minLength": 40,
                                        "maxLength": 40,
                                        "pattern": "^[0-9a-fA-F]+$"
                                    },
                                    "ref": {
                                        "type": "string",
                                        "description": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.",
                                        "pattern": "^refs/(heads|tags|pull)/.*$",
                                        "example": "refs/heads/main"
                                    },
                                    "sarif": {
                                        "description": "A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning).\"",
                                        "type": "string"
                                    },
                                    "checkout_uri": {
                                        "description": "The base directory used in the analysis, as it appears in the SARIF file.\nThis property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.",
                                        "example": "file:///github/workspace/",
                                        "type": "string",
                                        "format": "uri"
                                    },
                                    "started_at": {
                                        "description": "The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "tool_name": {
                                        "description": "The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.",
                                        "type": "string"
                                    },
                                    "validate": {
                                        "description": "Whether the SARIF file will be validated according to the code scanning specifications.\nThis parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.",
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "commit_sha",
                                    "ref",
                                    "sarif"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "commit_sha": "4b6472266afd7b471e86085a6659e8c7f2b119da",
                                        "ref": "refs/heads/master",
                                        "sarif": "H4sICMLGdF4AA2V4YW1wbGUuc2FyaWYAvVjdbts2FL7PUxDCijaA/CM7iRNfLkPXYgHSNstumlzQ0pHFVCI1korjFgH2ONtr7Ul2KFmy/mOn6QIkjsjDw0/nfN85NL8dEGL9pNwAImqRObECrWM1H40kXQ2XTAfJIlEgXcE1cD10RTQSVDE10K4aKSqZP1AxuKOIKg1ydJU60jSfSh8Hk6EzHA/vlOCWbfa7B6kYPpj90rlsWCZcmbHP5Bs+4oAWIjQD2SMOeJLh2vIQDnIaQerqXHjw8YIgxohybxAyDsS4cAPKsp03K4RcUs6+Up2D+JXpd8mibKIQN9fM/aMCdbyBujGSSQgVxJtx5qX2d2qUcIweQhEuDQf3GBO6CKHkogx/N3MVCKl/AeVKFuf4y5ubsMGDTj1ep+5I7sgmLIpxtU38hLtmMRGSuCFVyip5eKzs5ydh+LztVL6f2m6oih1BkYiuyQIIJWodxVpERPj4sEiWBNNH8EWT0DMG8EAjzKVHXCrB4FkPu/F64NMk1OeC+2yZSNoBOoR7CC0EzYWGbm+xFDFIzbI011+cLjfZtyJkmMZfumAh02uL3NpV2y+MZ6RAjxibyKrNxxJcVjANSb4eBGwZ1M0KsuyR2poLr5rMl8vaDSeVn6eTWEO2j2xIEcmhwlTKNOi4GMOI8gfuZYkvJ7b4v5Tiumyz7RnHeodFzpS8ASIZCH/AYdWi2z3sG8JtFxJ6fF9yR9CdifBr9Pd6d5V2+zbJKjjCFGGmsHuYFy2ytJq9tUxcLSRSQecppOGKrpUxYfxefMEFK+wOGa4hudQByBVT0L+EKtyACxnRsABhEx1QjVDs1KNI9MbpnhqfE45B6FJvu3hRu5VRU9MhZLmK7fqkKyQSTHNoyMqUFMqXCV3CwAeqEwmVokraK8IuBaGvHjQ0gMYrKjnjyw7uk9uD8tgmsBbFMPnU1bV2ZhkJNkuolUiWys3UPWzs5aaIUz9TBe8zMb+6+nT+6fLy91dlE3xzeDDT4zYszb0bW6NjJd0Rvn2EnLvWLFSdKPpBzInzfRgu8ETyMcH8nIfMnJCeC2PyfTA+UKngcnGH7Hw2hGkVQs5YlIRCtdWZYQ4/73es2JlxkfViOEIhoWJq5Oo6UBBfiKIqFBWhiE3jJGbFwVoxBHTRSuIS67sMeplei24X20shLjG+8gqbKC/bESiNMC+wd5q5id0yeS7CJEqXzmrTWNq3k05l84P6f4/bEmXFJjI0fIt1BGQssUnUDkBYeVhE5TqPnMH3jqogDcP0zKcTgLPTMSzOjhbjuVOmW23l1fYNStulfo6sXlFsGLhbDy5RECPRYGCTgOj2bd4nUQEivEd0H7KKYxqnEhFohuur3a3UPskbH/+Yg0+M5P2MHRJu3ziHh3Z2NCrWt3XF1rWTw8Ne/pfbWYXnDSE0SNZQQt1i18q7te2vOhu7ehWuvVyeu0wbLZi24mhoo6aOOTltzG/lgdVvVoXQq5V+pewkFIzL8fjEcadT55jOjpzFzHuOTtDNrMkJPMVQDd7F09RID72O/UPZ0tmctqZ7kWX6EmSZnDpP8GU67SXM8XE3YSrxbKsx6UReZ4y6n/FVZfJjs9Z7stma75W5yQtkzjk5eSJxk1lv4o7+j8TlhaJ2lsKWZO6lruDPBLib3x5ZN/KGWzZ+pn///evv7OOf4iIBv3oY9L/l1wiJ9p0Tc+F1zZnOE9NxXWEus6IQhr5pMfoqxi8WPsuu0azsns4UC6WzNzHIzbeEx4P/AJ3SefgcFAAA"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}": {
            "get": {
                "summary": "Get information about a SARIF upload",
                "description": "Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \"[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository).\"\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.",
                "operationId": "code-scanning/get-sarif",
                "tags": [
                    "code-scanning"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sarif_id",
                        "description": "The SARIF ID obtained after uploading.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/code-security-configuration": {
            "get": {
                "summary": "Get the code security configuration associated with a repository",
                "description": "Get the code security configuration that manages a repository's code security settings.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "code-security"
                ],
                "operationId": "code-security/get-configuration-for-repository",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/codeowners/errors": {
            "get": {
                "summary": "List CODEOWNERS errors",
                "description": "List any syntax errors that are detected in the CODEOWNERS\nfile.\n\nFor more information about the correct CODEOWNERS syntax,\nsee \"[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/codeowners-errors",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/codespaces": {
            "get": {
                "summary": "List codespaces in a repository for the authenticated user",
                "description": "Lists the codespaces associated to a specified repository and the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/list-in-repository-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a codespace in a repository",
                "description": "Creates a codespace owned by the authenticated user in the specified repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/create-with-repo-for-authenticated-user",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "ref": {
                                        "description": "Git ref (typically a branch name) for this codespace",
                                        "type": "string"
                                    },
                                    "location": {
                                        "description": "The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.",
                                        "type": "string"
                                    },
                                    "geo": {
                                        "description": "The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.",
                                        "type": "string",
                                        "enum": [
                                            "EuropeWest",
                                            "SoutheastAsia",
                                            "UsEast",
                                            "UsWest"
                                        ]
                                    },
                                    "client_ip": {
                                        "description": "IP for location auto-detection when proxying a request",
                                        "type": "string"
                                    },
                                    "machine": {
                                        "description": "Machine type to use for this codespace",
                                        "type": "string"
                                    },
                                    "devcontainer_path": {
                                        "description": "Path to devcontainer.json config to use for this codespace",
                                        "type": "string"
                                    },
                                    "multi_repo_permissions_opt_out": {
                                        "description": "Whether to authorize requested permissions from devcontainer.json",
                                        "type": "boolean"
                                    },
                                    "working_directory": {
                                        "description": "Working directory for this codespace",
                                        "type": "string"
                                    },
                                    "idle_timeout_minutes": {
                                        "description": "Time in minutes before codespace stops from inactivity",
                                        "type": "integer"
                                    },
                                    "display_name": {
                                        "description": "Display name for this codespace",
                                        "type": "string"
                                    },
                                    "retention_period_minutes": {
                                        "description": "Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
                                        "type": "integer"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "ref": "main",
                                        "machine": "standardLinux32gb"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/codespaces/devcontainers": {
            "get": {
                "summary": "List devcontainer configurations in a repository for the authenticated user",
                "description": "Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files\nspecify launchpoint configurations for codespaces created within the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/list-devcontainers-in-repository-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/codespaces/machines": {
            "get": {
                "summary": "List available machine types for a repository",
                "description": "List the machine types available for a given repository based on its configuration.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/repo-machines-for-authenticated-user",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "location",
                        "description": "The location to check for available machines. Assigned by IP if not provided.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "example": "WestUs2"
                        }
                    },
                    {
                        "name": "client_ip",
                        "description": "IP for location auto-detection when proxying a request",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The branch or commit to check for prebuild availability and devcontainer restrictions.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "example": "main"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/codespaces/new": {
            "get": {
                "summary": "Get default attributes for a codespace",
                "description": "Gets the default attributes for codespaces created by the user with the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/pre-flight-with-repo-for-authenticated-user",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "example": "main"
                        }
                    },
                    {
                        "name": "client_ip",
                        "description": "An alternative IP for default location auto-detection, such as when proxying a request.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "example": "1.2.3.4"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/codespaces/permissions_check": {
            "get": {
                "summary": "Check if permissions defined by a devcontainer have been accepted by the authenticated user",
                "description": "Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/check-permissions-for-devcontainer",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "master"
                        }
                    },
                    {
                        "name": "devcontainer_path",
                        "description": "Path to the devcontainer.json configuration to use for the permission check.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": ".devcontainer/example/devcontainer.json"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/codespaces/secrets": {
            "get": {
                "summary": "List repository secrets",
                "description": "Lists all development environment secrets available in a repository without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/list-repo-secrets",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/codespaces/secrets/public-key": {
            "get": {
                "summary": "Get a repository public key",
                "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nIf the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/get-repo-public-key",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
            "get": {
                "summary": "Get a repository secret",
                "description": "Gets a single repository development environment secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/get-repo-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update a repository secret",
                "description": "Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/create-or-update-repo-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "encrypted_value": {
                                        "type": "string",
                                        "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "type": "string",
                                        "description": "ID of the key you used to encrypt the secret."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a repository secret",
                "description": "Deletes a development environment secret in a repository using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/delete-repo-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/collaborators": {
            "get": {
                "summary": "List repository collaborators",
                "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\nOrganization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.\n\nTeam members will include the members of child teams.\n\nThe authenticated user must have push access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-collaborators",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "affiliation",
                        "description": "Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "outside",
                                "direct",
                                "all"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "permission",
                        "description": "Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pull",
                                "triage",
                                "push",
                                "maintain",
                                "admin"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/collaborators/{username}": {
            "get": {
                "summary": "Check if a user is a repository collaborator",
                "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nTeam members will include the members of child teams.\n\nThe authenticated user must have push access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/check-collaborator",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Add a repository collaborator",
                "description": "This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nAdding an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"\n\nFor more information on permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:\n\n```\nCannot assign {member} permission of {role name}\n```\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).\n\n**Updating an existing collaborator's permission level**\n\nThe endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.\n\n**Rate limits**\n\nYou are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/add-collaborator",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "permission": {
                                        "type": "string",
                                        "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.",
                                        "default": "push"
                                    }
                                }
                            },
                            "examples": {
                                "new-invitation-is-created": {
                                    "summary": "Add a collaborator with triage permissions",
                                    "value": {
                                        "permission": "triage"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove a repository collaborator",
                "description": "Removes a collaborator from a repository.\n\nTo use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.\n\nThis endpoint also:\n- Cancels any outstanding invitations\n- Unasigns the user from any issues\n- Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.\n- Unstars the repository\n- Updates access permissions to packages\n\nRemoving a user as a collaborator has the following effects on forks:\n - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.\n - If the user had their own fork of the repository, the fork will be deleted.\n - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.\n\n> [!NOTE]\n> A user can still have access to the repository through organization permissions like base repository permissions.\n\nAlthough the API responds immediately, the additional permission updates might take some extra time to complete in the background.\n\nFor more information on fork permissions, see \"[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)\".",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/remove-collaborator",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/collaborators/{username}/permission": {
            "get": {
                "summary": "Get repository permissions for a user",
                "description": "Checks the repository permission of a collaborator. The possible repository\npermissions are `admin`, `write`, `read`, and `none`.\n\n*Note*: The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the\n`maintain` role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role assigned to the\ncollaborator, see the `role_name` attribute, which will provide the full role name, including custom roles. The\n`permissions` hash can also be used to determine which base level of access the collaborator has to the repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-collaborator-permission-level",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/comments": {
            "get": {
                "summary": "List commit comments for a repository",
                "description": "Lists the commit comments for a specified repository. Comments are ordered by ascending ID.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-commit-comments-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/comments/{comment_id}": {
            "get": {
                "summary": "Get a commit comment",
                "description": "Gets a specified commit comment.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-commit-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a commit comment",
                "description": "Updates the contents of a specified commit comment.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-commit-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The contents of the comment"
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Nice change"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a commit comment",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-commit-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
            "get": {
                "summary": "List reactions for a commit comment",
                "description": "List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/list-for-commit-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "content",
                        "description": "Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a commit comment.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "+1",
                                "-1",
                                "laugh",
                                "confused",
                                "heart",
                                "hooray",
                                "rocket",
                                "eyes"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create reaction for a commit comment",
                "description": "Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/create-for-commit-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.",
                                        "enum": [
                                            "+1",
                                            "-1",
                                            "laugh",
                                            "confused",
                                            "heart",
                                            "hooray",
                                            "rocket",
                                            "eyes"
                                        ]
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "heart"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": {
            "delete": {
                "summary": "Delete a commit comment reaction",
                "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/delete-for-commit-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "reaction_id",
                        "description": "The unique identifier of the reaction.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/commits": {
            "get": {
                "summary": "List commits",
                "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-commits",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sha",
                        "description": "SHA or branch to start listing commits from. Default: the repository\u2019s default branch (usually `main`).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "path",
                        "description": "Only commits containing this file path will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "author",
                        "description": "GitHub username or email address to use to filter by commit author.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "committer",
                        "description": "GitHub username or email address to use to filter by commit committer.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "until",
                        "description": "Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": {
            "get": {
                "summary": "List branches for HEAD commit",
                "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReturns all branches where the given commit SHA is the HEAD, or latest commit for the branch.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-branches-for-head-commit",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commit_sha",
                        "description": "The SHA of the commit.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
            "get": {
                "summary": "List commit comments",
                "description": "Lists the comments for a specified commit.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-comments-for-commit",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commit_sha",
                        "description": "The SHA of the commit.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a commit comment",
                "description": "Create a comment for a commit using its `:commit_sha`.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-commit-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commit_sha",
                        "description": "The SHA of the commit.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The contents of the comment."
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "Relative path of the file to comment on."
                                    },
                                    "position": {
                                        "type": "integer",
                                        "description": "Line index in the diff to comment on."
                                    },
                                    "line": {
                                        "type": "integer",
                                        "description": "**Closing down notice**. Use **position** parameter instead. Line number in the file to comment on."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Great stuff",
                                        "path": "file1.txt",
                                        "position": 4,
                                        "line": 1
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
            "get": {
                "summary": "List pull requests associated with a commit",
                "description": "Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, it will return merged and open pull requests associated with the commit.\n\nTo list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-pull-requests-associated-with-commit",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commit_sha",
                        "description": "The SHA of the commit.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/commits/{ref}": {
            "get": {
                "summary": "Get a commit",
                "description": "Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n\n> [!NOTE]\n> If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\" Pagination query parameters are not supported for these media types.\n\n- **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.\n- **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code.\n- **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-commit",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/commits/{ref}/check-runs": {
            "get": {
                "summary": "List check runs for a Git reference",
                "description": "Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.\n\n> [!NOTE]\n> The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nIf there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the `check_suite_id` parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/list-for-ref",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "check_name",
                        "description": "Returns check runs with the specified `name`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "description": "Returns check runs with the specified `status`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "queued",
                                "in_progress",
                                "completed"
                            ]
                        }
                    },
                    {
                        "name": "filter",
                        "description": "Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "latest",
                                "all"
                            ],
                            "default": "latest"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "app_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/commits/{ref}/check-suites": {
            "get": {
                "summary": "List check suites for a Git reference",
                "description": "Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name.\n\n> [!NOTE]\n> The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.",
                "tags": [
                    "checks"
                ],
                "operationId": "checks/list-suites-for-ref",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "app_id",
                        "description": "Filters check suites by GitHub App `id`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "check_name",
                        "description": "Returns check runs with the specified `name`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/commits/{ref}/status": {
            "get": {
                "summary": "Get the combined status for a specific reference",
                "description": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-combined-status-for-ref",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/commits/{ref}/statuses": {
            "get": {
                "summary": "List commit statuses for a reference",
                "description": "Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n\nThis resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-commit-statuses-for-ref",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/community/profile": {
            "get": {
                "summary": "Get community profile metrics",
                "description": "Returns all community profile metrics for a repository. The repository cannot be a fork.\n\nThe returned metrics include an overall health score, the repository description, the presence of documentation, the\ndetected code of conduct, the detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE,\nREADME, and CONTRIBUTING files.\n\nThe `health_percentage` score is defined as a percentage of how many of\nthe recommended community health files are present. For more information, see\n\"[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories).\"\n\n`content_reports_enabled` is only returned for organization-owned repositories.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-community-profile-metrics",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/compare/{basehead}": {
            "get": {
                "summary": "Compare two commits",
                "description": "Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see \"[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories).\"\n\nThis endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.diff`**: Returns the diff of the commit.\n- **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.\n\nThe API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n\nWhen calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.\n\n**Working with large comparisons**\n\nTo process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:\n\n- The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.\n- The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.\n\nFor more information on working with pagination, see \"[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\"\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/compare-commits",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "basehead",
                        "description": "The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.",
                        "in": "path",
                        "required": true,
                        "x-multi-segment": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/contents/{path}": {
            "get": {
                "summary": "Get repository content",
                "description": "Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.\n- **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).\n- **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.\n\nIf the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value _should_ be \"submodule\". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \"submodule\".\n\nIf the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.\n\nIf the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.\n\n**Notes**:\n\n- To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).\n- This API has an upper limit of 1,000 files for a directory. If you need to retrieve\nmore files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).\n- Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.\n- If the requested file's size is:\n  - 1 MB or smaller: All features of this endpoint are supported.\n  - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty\nstring and the `encoding` field will be `\"none\"`. To get the contents of these larger files, use the `raw` media type.\n  - Greater than 100 MB: This endpoint is not supported.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-content",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "path",
                        "description": "path parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "ref",
                        "description": "The name of the commit/branch/tag. Default: the repository\u2019s default branch.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update file contents",
                "description": "Creates a new file or replaces an existing file in a repository.\n\n> [!NOTE]\n> If you use this endpoint and the \"[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)\" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-or-update-file-contents",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "path",
                        "description": "path parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "The commit message."
                                    },
                                    "content": {
                                        "type": "string",
                                        "description": "The new file content, using Base64 encoding."
                                    },
                                    "sha": {
                                        "type": "string",
                                        "description": "**Required if you are updating a file**. The blob SHA of the file being replaced."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "The branch name. Default: the repository\u2019s default branch."
                                    },
                                    "committer": {
                                        "type": "object",
                                        "description": "The person that committed the file. Default: the authenticated user.",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted."
                                            },
                                            "email": {
                                                "type": "string",
                                                "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted."
                                            },
                                            "date": {
                                                "type": "string",
                                                "example": "\"2013-01-05T13:13:22+05:00\""
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "email"
                                        ]
                                    },
                                    "author": {
                                        "type": "object",
                                        "description": "The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted."
                                            },
                                            "email": {
                                                "type": "string",
                                                "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted."
                                            },
                                            "date": {
                                                "type": "string",
                                                "example": "\"2013-01-15T17:13:22+05:00\""
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "email"
                                        ]
                                    }
                                },
                                "required": [
                                    "message",
                                    "content"
                                ]
                            },
                            "examples": {
                                "example-for-creating-a-file": {
                                    "summary": "Example for creating a file",
                                    "value": {
                                        "message": "my commit message",
                                        "committer": {
                                            "name": "Monalisa Octocat",
                                            "email": "octocat@github.com"
                                        },
                                        "content": "bXkgbmV3IGZpbGUgY29udGVudHM="
                                    }
                                },
                                "example-for-updating-a-file": {
                                    "summary": "Example for updating a file",
                                    "value": {
                                        "message": "a new commit message",
                                        "committer": {
                                            "name": "Monalisa Octocat",
                                            "email": "octocat@github.com"
                                        },
                                        "content": "bXkgdXBkYXRlZCBmaWxlIGNvbnRlbnRz",
                                        "sha": "95b966ae1c166bd92f8ae7d1c313e738c731dfc3"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a file",
                "description": "Deletes a file in a repository.\n\nYou can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\n> [!NOTE]\n> If you use this endpoint and the \"[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)\" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-file",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "path",
                        "description": "path parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "The commit message."
                                    },
                                    "sha": {
                                        "type": "string",
                                        "description": "The blob SHA of the file being deleted."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "The branch name. Default: the repository\u2019s default branch"
                                    },
                                    "committer": {
                                        "type": "object",
                                        "description": "object containing information about the committer.",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the author (or committer) of the commit"
                                            },
                                            "email": {
                                                "type": "string",
                                                "description": "The email of the author (or committer) of the commit"
                                            }
                                        }
                                    },
                                    "author": {
                                        "type": "object",
                                        "description": "object containing information about the author.",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the author (or committer) of the commit"
                                            },
                                            "email": {
                                                "type": "string",
                                                "description": "The email of the author (or committer) of the commit"
                                            }
                                        }
                                    }
                                },
                                "required": [
                                    "message",
                                    "sha"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "message": "my commit message",
                                        "committer": {
                                            "name": "Monalisa Octocat",
                                            "email": "octocat@github.com"
                                        },
                                        "sha": "329688480d39049927147c162b9d2deaf885005f"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/contributors": {
            "get": {
                "summary": "List repository contributors",
                "description": "Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-contributors",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "anon",
                        "description": "Set to `1` or `true` to include anonymous contributors in results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/dependabot/alerts": {
            "get": {
                "summary": "List Dependabot alerts for a repository",
                "description": "OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/list-alerts-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `auto_dismissed`, `dismissed`, `fixed`, `open`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "description": "A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ecosystem",
                        "in": "query",
                        "description": "A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package",
                        "in": "query",
                        "description": "A comma-separated list of package names. If specified, only alerts for these packages will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "manifest",
                        "in": "query",
                        "description": "A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "epss_percentage",
                        "in": "query",
                        "description": "CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:\n- An exact number (`n`)\n- Comparators such as `>n`, `<n`, `>=n`, `<=n`\n- A range like `n..n`, where `n` is a number from 0.0 to 1.0\n\nFilters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "description": "The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "development",
                                "runtime"
                            ]
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed.\n`epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "epss_percentage"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "page",
                        "description": "**Closing down notice**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.",
                        "deprecated": true,
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "deprecated": true,
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "first",
                        "description": "**Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 30
                        }
                    },
                    {
                        "name": "last",
                        "description": "**Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}": {
            "get": {
                "summary": "Get a Dependabot alert",
                "description": "OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/get-alert",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies a Dependabot alert in its repository.\nYou can find this at the end of the URL for a Dependabot alert within GitHub,\nor in `number` fields in the response from the\n`GET /repos/{owner}/{repo}/dependabot/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a Dependabot alert",
                "description": "The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see \"[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts).\"\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/update-alert",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies a Dependabot alert in its repository.\nYou can find this at the end of the URL for a Dependabot alert within GitHub,\nor in `number` fields in the response from the\n`GET /repos/{owner}/{repo}/dependabot/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "type": "string",
                                        "description": "The state of the Dependabot alert.\nA `dismissed_reason` must be provided when setting the state to `dismissed`.",
                                        "enum": [
                                            "dismissed",
                                            "open"
                                        ]
                                    },
                                    "dismissed_reason": {
                                        "type": "string",
                                        "description": "**Required when `state` is `dismissed`.** A reason for dismissing the alert.",
                                        "enum": [
                                            "fix_started",
                                            "inaccurate",
                                            "no_bandwidth",
                                            "not_used",
                                            "tolerable_risk"
                                        ]
                                    },
                                    "dismissed_comment": {
                                        "type": "string",
                                        "description": "An optional comment associated with dismissing the alert.",
                                        "maxLength": 280
                                    }
                                },
                                "required": [
                                    "state"
                                ],
                                "additionalProperties": false
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "state": "dismissed",
                                        "dismissed_reason": "tolerable_risk",
                                        "dismissed_comment": "This alert is accurate but we use a sanitizer."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/dependabot/secrets": {
            "get": {
                "summary": "List repository secrets",
                "description": "Lists all secrets available in a repository without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/list-repo-secrets",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/dependabot/secrets/public-key": {
            "get": {
                "summary": "Get a repository public key",
                "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets. Anyone with read access\nto the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/get-repo-public-key",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
            "get": {
                "summary": "Get a repository secret",
                "description": "Gets a single repository secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/get-repo-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update a repository secret",
                "description": "Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/create-or-update-repo-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "encrypted_value": {
                                        "type": "string",
                                        "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "type": "string",
                                        "description": "ID of the key you used to encrypt the secret."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a repository secret",
                "description": "Deletes a secret in a repository using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "dependabot"
                ],
                "operationId": "dependabot/delete-repo-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}": {
            "get": {
                "summary": "Get a diff of the dependencies between commits",
                "description": "Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.",
                "tags": [
                    "dependency-graph"
                ],
                "operationId": "dependency-graph/diff-range",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "basehead",
                        "description": "The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The full path, relative to the repository root, of the dependency manifest file.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/dependency-graph/sbom": {
            "get": {
                "summary": "Export a software bill of materials (SBOM) for a repository.",
                "description": "Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.",
                "tags": [
                    "dependency-graph"
                ],
                "operationId": "dependency-graph/export-sbom",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/dependency-graph/snapshots": {
            "post": {
                "summary": "Create a snapshot of dependencies for a repository",
                "description": "Create a new snapshot of a repository's dependencies.\n\nThe authenticated user must have access to the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "dependency-graph"
                ],
                "operationId": "dependency-graph/create-repository-snapshot",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "snapshot",
                                "description": "Create a new snapshot of a repository's dependencies.",
                                "type": "object",
                                "properties": {
                                    "version": {
                                        "description": "The version of the repository snapshot submission.",
                                        "type": "integer"
                                    },
                                    "job": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "description": "The external ID of the job.",
                                                "example": "5622a2b0-63f6-4732-8c34-a1ab27e102a11"
                                            },
                                            "correlator": {
                                                "type": "string",
                                                "description": "Correlator provides a key that is used to group snapshots submitted over time. Only the \"latest\" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given \"wave\" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.",
                                                "example": "yourworkflowname_yourjobname"
                                            },
                                            "html_url": {
                                                "type": "string",
                                                "description": "The url for the job.",
                                                "example": "http://example.com/build"
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "correlator"
                                        ],
                                        "additionalProperties": false
                                    },
                                    "sha": {
                                        "description": "The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.",
                                        "type": "string",
                                        "example": "ddc951f4b1293222421f2c8df679786153acf689",
                                        "minLength": 40,
                                        "maxLength": 40
                                    },
                                    "ref": {
                                        "description": "The repository branch that triggered this snapshot.",
                                        "type": "string",
                                        "pattern": "^refs/",
                                        "example": "refs/heads/main"
                                    },
                                    "detector": {
                                        "type": "object",
                                        "description": "A description of the detector used.",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the detector used.",
                                                "example": "docker buildtime detector"
                                            },
                                            "version": {
                                                "type": "string",
                                                "description": "The version of the detector used.",
                                                "example": "1.0.0"
                                            },
                                            "url": {
                                                "type": "string",
                                                "description": "The url of the detector used.",
                                                "example": "http://example.com/docker-buildtimer-detector"
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "version",
                                            "url"
                                        ],
                                        "additionalProperties": false
                                    },
                                    "metadata": {
                                        "title": "metadata",
                                        "description": "User-defined metadata to store domain-specific information limited to 8 keys with scalar values.",
                                        "type": "object",
                                        "maxProperties": 8,
                                        "additionalProperties": {
                                            "nullable": true,
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "number"
                                                },
                                                {
                                                    "type": "boolean"
                                                }
                                            ]
                                        }
                                    },
                                    "manifests": {
                                        "type": "object",
                                        "description": "A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.",
                                        "additionalProperties": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "The name of the manifest.",
                                                    "example": "package-lock.json"
                                                },
                                                "file": {
                                                    "type": "object",
                                                    "properties": {
                                                        "source_location": {
                                                            "type": "string",
                                                            "description": "The path of the manifest file relative to the root of the Git repository.",
                                                            "example": "/src/build/package-lock.json"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                },
                                                "metadata": {
                                                    "title": "metadata",
                                                    "description": "User-defined metadata to store domain-specific information limited to 8 keys with scalar values.",
                                                    "type": "object",
                                                    "maxProperties": 8,
                                                    "additionalProperties": {
                                                        "nullable": true,
                                                        "anyOf": [
                                                            {
                                                                "type": "string"
                                                            },
                                                            {
                                                                "type": "number"
                                                            },
                                                            {
                                                                "type": "boolean"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "resolved": {
                                                    "type": "object",
                                                    "description": "A collection of resolved package dependencies.",
                                                    "additionalProperties": {
                                                        "type": "object",
                                                        "properties": {
                                                            "package_url": {
                                                                "type": "string",
                                                                "description": "Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.",
                                                                "example": "pkg:/npm/%40actions/http-client@1.0.11",
                                                                "pattern": "^pkg"
                                                            },
                                                            "metadata": {
                                                                "title": "metadata",
                                                                "description": "User-defined metadata to store domain-specific information limited to 8 keys with scalar values.",
                                                                "type": "object",
                                                                "maxProperties": 8,
                                                                "additionalProperties": {
                                                                    "nullable": true,
                                                                    "anyOf": [
                                                                        {
                                                                            "type": "string"
                                                                        },
                                                                        {
                                                                            "type": "number"
                                                                        },
                                                                        {
                                                                            "type": "boolean"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            "relationship": {
                                                                "type": "string",
                                                                "description": "A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.",
                                                                "example": "direct",
                                                                "enum": [
                                                                    "direct",
                                                                    "indirect"
                                                                ]
                                                            },
                                                            "scope": {
                                                                "type": "string",
                                                                "description": "A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.",
                                                                "example": "runtime",
                                                                "enum": [
                                                                    "runtime",
                                                                    "development"
                                                                ]
                                                            },
                                                            "dependencies": {
                                                                "type": "array",
                                                                "description": "Array of package-url (PURLs) of direct child dependencies.",
                                                                "example": "@actions/http-client",
                                                                "items": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    }
                                                }
                                            },
                                            "required": [
                                                "name"
                                            ],
                                            "additionalProperties": false
                                        }
                                    },
                                    "scanned": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "The time at which the snapshot was scanned.",
                                        "example": "2020-06-13T14:52:50-05:00"
                                    }
                                },
                                "required": [
                                    "detector",
                                    "version",
                                    "ref",
                                    "sha",
                                    "job",
                                    "scanned"
                                ],
                                "additionalProperties": false
                            },
                            "examples": {
                                "example-of-a-dependency-submission": {
                                    "value": {
                                        "version": 0,
                                        "sha": "ce587453ced02b1526dfb4cb910479d431683101",
                                        "ref": "refs/heads/main",
                                        "job": {
                                            "correlator": "yourworkflowname_youractionname",
                                            "id": "yourrunid"
                                        },
                                        "detector": {
                                            "name": "octo-detector",
                                            "version": "0.0.1",
                                            "url": "https://github.com/octo-org/octo-repo"
                                        },
                                        "scanned": "2022-06-14T20:25:00Z",
                                        "manifests": {
                                            "package-lock.json": {
                                                "name": "package-lock.json",
                                                "file": {
                                                    "source_location": "src/package-lock.json"
                                                },
                                                "resolved": {
                                                    "@actions/core": {
                                                        "package_url": "pkg:/npm/%40actions/core@1.1.9",
                                                        "dependencies": [
                                                            "@actions/http-client"
                                                        ]
                                                    },
                                                    "@actions/http-client": {
                                                        "package_url": "pkg:/npm/%40actions/http-client@1.0.7",
                                                        "dependencies": [
                                                            "tunnel"
                                                        ]
                                                    },
                                                    "tunnel": {
                                                        "package_url": "pkg:/npm/tunnel@0.0.6"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/deployments": {
            "get": {
                "summary": "List deployments",
                "description": "Simple filtering of deployments is available via query parameters:",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-deployments",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sha",
                        "description": "The SHA recorded at creation time.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "none"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The name of the ref. This can be a branch, tag, or SHA.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "none"
                        }
                    },
                    {
                        "name": "task",
                        "description": "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "none"
                        }
                    },
                    {
                        "name": "environment",
                        "description": "The name of the environment that was deployed to (e.g., `staging` or `production`).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "none",
                            "nullable": true
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a deployment",
                "description": "Deployments offer a few configurable parameters with certain defaults.\n\nThe `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\nbefore we merge a pull request.\n\nThe `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\nmultiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\nmakes it easier to track which environments have requested deployments. The default environment is `production`.\n\nThe `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If\nthe ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\nthe API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\nreturn a failure response.\n\nBy default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`\nstate. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\nspecify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\nnot require any contexts or create any commit statuses, the deployment will always succeed.\n\nThe `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\nfield that will be passed on when a deployment event is dispatched.\n\nThe `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\nbe `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\napplication with debugging enabled.\n\nMerged branch response:\n\nYou will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\na deployment. This auto-merge happens when:\n*   Auto-merge option is enabled in the repository\n*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n*   There are no merge conflicts\n\nIf there are no new commits in the base branch, a new request to create a deployment should give a successful\nresponse.\n\nMerge conflict response:\n\nThis error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't\nbe merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n\nFailed commit status checks:\n\nThis error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\nstatus for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-deployment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ref": {
                                        "type": "string",
                                        "description": "The ref to deploy. This can be a branch, tag, or SHA."
                                    },
                                    "task": {
                                        "type": "string",
                                        "description": "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
                                        "default": "deploy"
                                    },
                                    "auto_merge": {
                                        "type": "boolean",
                                        "description": "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
                                        "default": true
                                    },
                                    "required_contexts": {
                                        "type": "array",
                                        "description": "The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "payload": {
                                        "oneOf": [
                                            {
                                                "type": "object",
                                                "additionalProperties": true
                                            },
                                            {
                                                "type": "string",
                                                "description": "JSON payload with extra information about the deployment.",
                                                "default": ""
                                            }
                                        ]
                                    },
                                    "environment": {
                                        "type": "string",
                                        "description": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
                                        "default": "production"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Short description of the deployment.",
                                        "default": "",
                                        "nullable": true
                                    },
                                    "transient_environment": {
                                        "type": "boolean",
                                        "description": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`",
                                        "default": false
                                    },
                                    "production_environment": {
                                        "type": "boolean",
                                        "description": "Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise."
                                    }
                                },
                                "required": [
                                    "ref"
                                ]
                            },
                            "examples": {
                                "simple-example": {
                                    "summary": "Simple example",
                                    "value": {
                                        "ref": "topic-branch",
                                        "payload": "{ \"deploy\": \"migrate\" }",
                                        "description": "Deploy request from hubot"
                                    }
                                },
                                "advanced-example": {
                                    "summary": "Advanced example",
                                    "value": {
                                        "ref": "topic-branch",
                                        "auto_merge": false,
                                        "payload": "{ \"deploy\": \"migrate\" }",
                                        "description": "Deploy request from hubot",
                                        "required_contexts": [
                                            "ci/janky",
                                            "security/brakeman"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/deployments/{deployment_id}": {
            "get": {
                "summary": "Get a deployment",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-deployment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deployment_id",
                        "description": "deployment_id parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a deployment",
                "description": "If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.\n\nTo set a deployment as inactive, you must:\n\n*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n*   Mark the active deployment as inactive by adding any non-successful deployment status.\n\nFor more information, see \"[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)\" and \"[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-deployment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deployment_id",
                        "description": "deployment_id parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
            "get": {
                "summary": "List deployment statuses",
                "description": "Users with pull access can view deployment statuses for a deployment:",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-deployment-statuses",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deployment_id",
                        "description": "deployment_id parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a deployment status",
                "description": "Users with `push` access can create deployment statuses for a given deployment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-deployment-status",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deployment_id",
                        "description": "deployment_id parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "type": "string",
                                        "description": "The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.",
                                        "enum": [
                                            "error",
                                            "failure",
                                            "inactive",
                                            "in_progress",
                                            "queued",
                                            "pending",
                                            "success"
                                        ]
                                    },
                                    "target_url": {
                                        "type": "string",
                                        "description": "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.\n\n> [!NOTE]\n> It's recommended to use the `log_url` parameter, which replaces `target_url`.",
                                        "default": ""
                                    },
                                    "log_url": {
                                        "type": "string",
                                        "description": "The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`",
                                        "default": ""
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A short description of the status. The maximum description length is 140 characters.",
                                        "default": ""
                                    },
                                    "environment": {
                                        "type": "string",
                                        "description": "Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used."
                                    },
                                    "environment_url": {
                                        "type": "string",
                                        "description": "Sets the URL for accessing your environment. Default: `\"\"`",
                                        "default": ""
                                    },
                                    "auto_inactive": {
                                        "type": "boolean",
                                        "description": "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`"
                                    }
                                },
                                "required": [
                                    "state"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "environment": "production",
                                        "state": "success",
                                        "log_url": "https://example.com/deployment/42/output",
                                        "description": "Deployment finished successfully."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": {
            "get": {
                "summary": "Get a deployment status",
                "description": "Users with pull access can view a deployment status for a deployment:",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-deployment-status",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deployment_id",
                        "description": "deployment_id parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/dispatches": {
            "post": {
                "summary": "Create a repository dispatch event",
                "description": "You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see \"[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).\"\n\nThe `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.\n\nThis input example shows how you can use the `client_payload` as a test to debug your workflow.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-dispatch-event",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "event_type"
                                ],
                                "properties": {
                                    "event_type": {
                                        "type": "string",
                                        "description": "A custom webhook event name. Must be 100 characters or fewer.",
                                        "minLength": 1,
                                        "maxLength": 100
                                    },
                                    "client_payload": {
                                        "type": "object",
                                        "description": "JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB.",
                                        "additionalProperties": true,
                                        "maxProperties": 10
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "event_type": "on-demand-test",
                                        "client_payload": {
                                            "unit": false,
                                            "integration": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/environments": {
            "get": {
                "summary": "List environments",
                "description": "Lists the environments for a repository.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-all-environments",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}": {
            "get": {
                "summary": "Get an environment",
                "description": "> [!NOTE]\n> To get information about name patterns that branches must match in order to deploy to this environment, see \"[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy).\"\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-environment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update an environment",
                "description": "Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see \"[Environments](/actions/reference/environments#environment-protection-rules).\"\n\n> [!NOTE]\n> To create or update name patterns that branches must match in order to deploy to this environment, see \"[Deployment branch policies](/rest/deployments/branch-policies).\"\n\n> [!NOTE]\n> To create or update secrets for an environment, see \"[GitHub Actions secrets](/rest/actions/secrets).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-or-update-environment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "wait_timer": {
                                        "type": "integer",
                                        "example": 30,
                                        "description": "The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days)."
                                    },
                                    "prevent_self_review": {
                                        "type": "boolean",
                                        "example": false,
                                        "description": "Whether or not a user who created the job is prevented from approving their own job."
                                    },
                                    "reviewers": {
                                        "type": "array",
                                        "nullable": true,
                                        "description": "The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "description": "The type of reviewer.",
                                                    "enum": [
                                                        "User",
                                                        "Team"
                                                    ],
                                                    "example": "User"
                                                },
                                                "id": {
                                                    "type": "integer",
                                                    "description": "The id of the user or team who can review the deployment",
                                                    "example": 4532992
                                                }
                                            }
                                        }
                                    },
                                    "deployment_branch_policy": {
                                        "type": "object",
                                        "description": "The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.",
                                        "properties": {
                                            "protected_branches": {
                                                "type": "boolean",
                                                "description": "Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`."
                                            },
                                            "custom_branch_policies": {
                                                "type": "boolean",
                                                "description": "Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`."
                                            }
                                        },
                                        "nullable": true,
                                        "required": [
                                            "protected_branches",
                                            "custom_branch_policies"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "wait_timer": 30,
                                        "prevent_self_review": false,
                                        "reviewers": [
                                            {
                                                "type": "User",
                                                "id": 1
                                            },
                                            {
                                                "type": "Team",
                                                "id": 1
                                            }
                                        ],
                                        "deployment_branch_policy": {
                                            "protected_branches": false,
                                            "custom_branch_policies": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an environment",
                "description": "OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-an-environment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies": {
            "get": {
                "summary": "List deployment branch policies",
                "description": "Lists the deployment branch policies for an environment.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-deployment-branch-policies",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a deployment branch policy",
                "description": "Creates a deployment branch or tag policy for an environment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-deployment-branch-policy",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Deployment branch and tag policy name pattern",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name pattern that branches or tags must match in order to deploy to the environment.\n\nWildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.\nFor more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).",
                                        "type": "string",
                                        "example": "release/*"
                                    },
                                    "type": {
                                        "description": "Whether this rule targets a branch or tag",
                                        "type": "string",
                                        "example": "branch",
                                        "enum": [
                                            "branch",
                                            "tag"
                                        ]
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "example-wildcard": {
                                    "summary": "Example of a wildcard name pattern",
                                    "value": {
                                        "name": "release/*"
                                    }
                                },
                                "example-single-branch": {
                                    "summary": "Example of a single branch name pattern",
                                    "value": {
                                        "name": "main",
                                        "type": "branch"
                                    }
                                },
                                "example-single-tag": {
                                    "summary": "Example of a single tag name pattern",
                                    "value": {
                                        "name": "v1",
                                        "type": "tag"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
            "get": {
                "summary": "Get a deployment branch policy",
                "description": "Gets a deployment branch or tag policy for an environment.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-deployment-branch-policy",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch_policy_id",
                        "in": "path",
                        "required": true,
                        "description": "The unique identifier of the branch policy.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Update a deployment branch policy",
                "description": "Updates a deployment branch or tag policy for an environment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-deployment-branch-policy",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch_policy_id",
                        "in": "path",
                        "required": true,
                        "description": "The unique identifier of the branch policy.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Deployment branch policy name pattern",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name pattern that branches must match in order to deploy to the environment.\n\nWildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.\nFor more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).",
                                        "type": "string",
                                        "example": "release/*"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "release/*"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a deployment branch policy",
                "description": "Deletes a deployment branch or tag policy for an environment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-deployment-branch-policy",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch_policy_id",
                        "in": "path",
                        "required": true,
                        "description": "The unique identifier of the branch policy.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules": {
            "get": {
                "summary": "Get all deployment protection rules for an environment",
                "description": "Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"\n\nFor more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-all-deployment-protection-rules",
                "parameters": [
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a custom deployment protection rule on an environment",
                "description": "Enable a custom deployment protection rule for an environment.\n\nThe authenticated user must have admin or owner permissions to the repository to use this endpoint.\n\nFor more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app), as well as the [guide to creating custom deployment protection rules](https://docs.github.com/actions/managing-workflow-runs-and-deployments/managing-deployments/creating-custom-deployment-protection-rules).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-deployment-protection-rule",
                "parameters": [
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "integration_id": {
                                        "type": "integer",
                                        "description": "The ID of the custom app that will be enabled on the environment."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "integration_id": 5
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps": {
            "get": {
                "summary": "List custom deployment rule integrations available for an environment",
                "description": "Gets all custom deployment protection rule integrations that are available for an environment.\n\nThe authenticated user must have admin or owner permissions to the repository to use this endpoint.\n\nFor more information about environments, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"\n\nFor more information about the app that is providing this custom deployment rule, see \"[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)\".\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-custom-deployment-rule-integrations",
                "parameters": [
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}": {
            "get": {
                "summary": "Get a custom deployment protection rule",
                "description": "Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"\n\nFor more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-custom-deployment-protection-rule",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "protection_rule_id",
                        "description": "The unique identifier of the protection rule.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Disable a custom protection rule for an environment",
                "description": "Disables a custom deployment protection rule for an environment.\n\nThe authenticated user must have admin or owner permissions to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/disable-deployment-protection-rule",
                "parameters": [
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "protection_rule_id",
                        "description": "The unique identifier of the protection rule.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/secrets": {
            "get": {
                "summary": "List environment secrets",
                "description": "Lists all secrets available in an environment without revealing their\nencrypted values.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-environment-secrets",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key": {
            "get": {
                "summary": "Get an environment public key",
                "description": "Get the public key for an environment, which you need to encrypt environment\nsecrets. You need to encrypt a secret before you can create or update secrets.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-environment-public-key",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}": {
            "get": {
                "summary": "Get an environment secret",
                "description": "Gets a single environment secret without revealing its encrypted value.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-environment-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update an environment secret",
                "description": "Creates or updates an environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-or-update-environment-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "encrypted_value": {
                                        "type": "string",
                                        "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "type": "string",
                                        "description": "ID of the key you used to encrypt the secret."
                                    }
                                },
                                "required": [
                                    "encrypted_value",
                                    "key_id"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an environment secret",
                "description": "Deletes a secret in an environment using the secret name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-environment-secret",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/variables": {
            "get": {
                "summary": "List environment variables",
                "description": "Lists all environment variables.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/list-environment-variables",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an environment variable",
                "description": "Create an environment variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/create-environment-variable",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the variable."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "The value of the variable."
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "USERNAME",
                                        "value": "octocat"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}": {
            "get": {
                "summary": "Get an environment variable",
                "description": "Gets a specific variable in an environment.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/get-environment-variable",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update an environment variable",
                "description": "Updates an environment variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/update-environment-variable",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the variable."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "The value of the variable."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "USERNAME",
                                        "value": "octocat"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an environment variable",
                "description": "Deletes an environment variable using the variable name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "actions"
                ],
                "operationId": "actions/delete-environment-variable",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "description": "The name of the variable.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environment_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/events": {
            "get": {
                "summary": "List repository events",
                "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-repo-events",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/forks": {
            "get": {
                "summary": "List forks",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-forks",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The sort order. `stargazers` will sort by star count.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "newest",
                                "oldest",
                                "stargazers",
                                "watchers"
                            ],
                            "default": "newest"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a fork",
                "description": "Create a fork for the authenticated user.\n\n> [!NOTE]\n> Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).\n\n> [!NOTE]\n> Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-fork",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "organization": {
                                        "type": "string",
                                        "description": "Optional parameter to specify the organization name if forking into an organization."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "When forking from an existing repository, a new name for the fork."
                                    },
                                    "default_branch_only": {
                                        "type": "boolean",
                                        "description": "When forking from an existing repository, fork with only the default branch."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "organization": "octocat",
                                        "name": "Hello-World",
                                        "default_branch_only": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/git/blobs": {
            "post": {
                "summary": "Create a blob",
                "description": "",
                "tags": [
                    "git"
                ],
                "operationId": "git/create-blob",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The new blob's content."
                                    },
                                    "encoding": {
                                        "type": "string",
                                        "description": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
                                        "default": "utf-8"
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "Content of the blob",
                                        "encoding": "utf-8"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/git/blobs/{file_sha}": {
            "get": {
                "summary": "Get a blob",
                "description": "The `content` in the response will always be Base64 encoded.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw blob data.\n- **`application/vnd.github+json`**: Returns a JSON representation of the blob with `content` as a base64 encoded string. This is the default if no media type is specified.\n\n**Note** This endpoint supports blobs up to 100 megabytes in size.",
                "tags": [
                    "git"
                ],
                "operationId": "git/get-blob",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "file_sha",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/git/commits": {
            "post": {
                "summary": "Create a commit",
                "description": "Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
                "tags": [
                    "git"
                ],
                "operationId": "git/create-commit",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "The commit message"
                                    },
                                    "tree": {
                                        "type": "string",
                                        "description": "The SHA of the tree object this commit points to"
                                    },
                                    "parents": {
                                        "type": "array",
                                        "description": "The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "author": {
                                        "type": "object",
                                        "description": "Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the author (or committer) of the commit"
                                            },
                                            "email": {
                                                "type": "string",
                                                "description": "The email of the author (or committer) of the commit"
                                            },
                                            "date": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "email"
                                        ]
                                    },
                                    "committer": {
                                        "type": "object",
                                        "description": "Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the author (or committer) of the commit"
                                            },
                                            "email": {
                                                "type": "string",
                                                "description": "The email of the author (or committer) of the commit"
                                            },
                                            "date": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                                            }
                                        }
                                    },
                                    "signature": {
                                        "type": "string",
                                        "description": "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits."
                                    }
                                },
                                "required": [
                                    "message",
                                    "tree"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "message": "my commit message",
                                        "author": {
                                            "name": "Mona Octocat",
                                            "email": "octocat@github.com",
                                            "date": "2008-07-09T16:13:30+12:00"
                                        },
                                        "parents": [
                                            "7d1b31e74ee336d15cbd21741bc88a537ed063a0"
                                        ],
                                        "tree": "827efc6d56897b048c772eb4087f854f46256132",
                                        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv\n7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI\nDkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n\n2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA\nOQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k\nnrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU\n+NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB\njHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ\n3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+\nUpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr\nX11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp\neSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=\n=5Io4\n-----END PGP SIGNATURE-----\n"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/git/commits/{commit_sha}": {
            "get": {
                "summary": "Get a commit object",
                "description": "Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).\n\nTo get the contents of a commit, see \"[Get a commit](/rest/commits/commits#get-a-commit).\"\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
                "tags": [
                    "git"
                ],
                "operationId": "git/get-commit",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commit_sha",
                        "description": "The SHA of the commit.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/git/matching-refs/{ref}": {
            "get": {
                "summary": "List matching references",
                "description": "Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\nWhen you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n> [!NOTE]\n> You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n\nIf you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.",
                "tags": [
                    "git"
                ],
                "operationId": "git/list-matching-refs",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "path",
                        "required": true,
                        "example": "heads/feature-a",
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/git/ref/{ref}": {
            "get": {
                "summary": "Get a reference",
                "description": "Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n\n> [!NOTE]\n> You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".",
                "tags": [
                    "git"
                ],
                "operationId": "git/get-ref",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "path",
                        "required": true,
                        "example": "heads/feature-a",
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/git/refs": {
            "post": {
                "summary": "Create a reference",
                "description": "Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.",
                "tags": [
                    "git"
                ],
                "operationId": "git/create-ref",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ref": {
                                        "type": "string",
                                        "description": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected."
                                    },
                                    "sha": {
                                        "type": "string",
                                        "description": "The SHA1 value for this reference."
                                    }
                                },
                                "required": [
                                    "ref",
                                    "sha"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "ref": "refs/heads/featureA",
                                        "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/git/refs/{ref}": {
            "patch": {
                "summary": "Update a reference",
                "description": "Updates the provided reference to point to a new SHA. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                "tags": [
                    "git"
                ],
                "operationId": "git/update-ref",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "path",
                        "required": true,
                        "example": "heads/feature-a",
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sha": {
                                        "type": "string",
                                        "description": "The SHA1 value to set this reference to"
                                    },
                                    "force": {
                                        "type": "boolean",
                                        "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
                                        "default": false
                                    }
                                },
                                "required": [
                                    "sha"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
                                        "force": true
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a reference",
                "description": "Deletes the provided reference.",
                "tags": [
                    "git"
                ],
                "operationId": "git/delete-ref",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
                        "in": "path",
                        "required": true,
                        "example": "heads/feature-a",
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/git/tags": {
            "post": {
                "summary": "Create a tag object",
                "description": "Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/git/refs#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag reference - this call would be unnecessary.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
                "tags": [
                    "git"
                ],
                "operationId": "git/create-tag",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "tag": {
                                        "type": "string",
                                        "description": "The tag's name. This is typically a version (e.g., \"v0.0.1\")."
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "The tag message."
                                    },
                                    "object": {
                                        "type": "string",
                                        "description": "The SHA of the git object this is tagging."
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
                                        "enum": [
                                            "commit",
                                            "tree",
                                            "blob"
                                        ]
                                    },
                                    "tagger": {
                                        "type": "object",
                                        "description": "An object with information about the individual creating the tag.",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the author of the tag"
                                            },
                                            "email": {
                                                "type": "string",
                                                "description": "The email of the author of the tag"
                                            },
                                            "date": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "email"
                                        ]
                                    }
                                },
                                "required": [
                                    "tag",
                                    "message",
                                    "object",
                                    "type"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "tag": "v0.0.1",
                                        "message": "initial version",
                                        "object": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
                                        "type": "commit",
                                        "tagger": {
                                            "name": "Monalisa Octocat",
                                            "email": "octocat@github.com",
                                            "date": "2011-06-17T14:53:35-07:00"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/git/tags/{tag_sha}": {
            "get": {
                "summary": "Get a tag",
                "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
                "tags": [
                    "git"
                ],
                "operationId": "git/get-tag",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tag_sha",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/git/trees": {
            "post": {
                "summary": "Create a tree",
                "description": "The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n\nIf you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)\" and \"[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference).\"\n\nReturns an error if you try to delete a file that does not exist.",
                "tags": [
                    "git"
                ],
                "operationId": "git/create-tree",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "tree": {
                                        "type": "array",
                                        "description": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "path": {
                                                    "type": "string",
                                                    "description": "The file referenced in the tree."
                                                },
                                                "mode": {
                                                    "type": "string",
                                                    "description": "The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.",
                                                    "enum": [
                                                        "100644",
                                                        "100755",
                                                        "040000",
                                                        "160000",
                                                        "120000"
                                                    ]
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "description": "Either `blob`, `tree`, or `commit`.",
                                                    "enum": [
                                                        "blob",
                                                        "tree",
                                                        "commit"
                                                    ]
                                                },
                                                "sha": {
                                                    "type": "string",
                                                    "description": "The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
                                                    "nullable": true
                                                },
                                                "content": {
                                                    "type": "string",
                                                    "description": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error."
                                                }
                                            }
                                        }
                                    },
                                    "base_tree": {
                                        "type": "string",
                                        "description": "The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\nIf not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit."
                                    }
                                },
                                "required": [
                                    "tree"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "base_tree": "9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
                                        "tree": [
                                            {
                                                "path": "file.rb",
                                                "mode": "100644",
                                                "type": "blob",
                                                "sha": "44b4fc6d56897b048c772eb4087f854f46256132"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/git/trees/{tree_sha}": {
            "get": {
                "summary": "Get a tree",
                "description": "Returns a single tree using the SHA1 value or ref name for that tree.\n\nIf `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.\n\n> [!NOTE]\n> The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.",
                "tags": [
                    "git"
                ],
                "operationId": "git/get-tree",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tree_sha",
                        "description": "The SHA1 value or ref (branch or tag) name of the tree.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "recursive",
                        "description": "Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/hooks": {
            "get": {
                "summary": "List repository webhooks",
                "description": "Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-webhooks",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a repository webhook",
                "description": "Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\nshare the same `config` as long as those webhooks do not have any `events` that overlap.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-webhook",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`."
                                    },
                                    "config": {
                                        "type": "object",
                                        "description": "Key/value pairs to provide settings for this webhook.",
                                        "properties": {
                                            "url": {
                                                "type": "string",
                                                "description": "The URL to which the payloads will be delivered.",
                                                "example": "https://example.com/webhook",
                                                "format": "uri"
                                            },
                                            "content_type": {
                                                "type": "string",
                                                "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                                                "example": "\"json\""
                                            },
                                            "secret": {
                                                "type": "string",
                                                "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
                                                "example": "\"********\""
                                            },
                                            "insecure_ssl": {
                                                "oneOf": [
                                                    {
                                                        "type": "string",
                                                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                                                        "example": "\"0\""
                                                    },
                                                    {
                                                        "type": "number"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "events": {
                                        "type": "array",
                                        "description": "Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.",
                                        "default": [
                                            "push"
                                        ],
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "active": {
                                        "type": "boolean",
                                        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                                        "default": true
                                    }
                                },
                                "additionalProperties": false
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "web",
                                        "active": true,
                                        "events": [
                                            "push",
                                            "pull_request"
                                        ],
                                        "config": {
                                            "url": "https://example.com/webhook",
                                            "content_type": "json",
                                            "insecure_ssl": "0"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/hooks/{hook_id}": {
            "get": {
                "summary": "Get a repository webhook",
                "description": "Returns a webhook configured in a repository. To get only the webhook `config` properties, see \"[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-webhook",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a repository webhook",
                "description": "Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-webhook",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "config": {
                                        "title": "Webhook Configuration",
                                        "description": "Configuration object of the webhook",
                                        "type": "object",
                                        "properties": {
                                            "url": {
                                                "type": "string",
                                                "description": "The URL to which the payloads will be delivered.",
                                                "example": "https://example.com/webhook",
                                                "format": "uri"
                                            },
                                            "content_type": {
                                                "type": "string",
                                                "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                                                "example": "\"json\""
                                            },
                                            "secret": {
                                                "type": "string",
                                                "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
                                                "example": "\"********\""
                                            },
                                            "insecure_ssl": {
                                                "oneOf": [
                                                    {
                                                        "type": "string",
                                                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                                                        "example": "\"0\""
                                                    },
                                                    {
                                                        "type": "number"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "events": {
                                        "type": "array",
                                        "description": "Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.",
                                        "default": [
                                            "push"
                                        ],
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "add_events": {
                                        "type": "array",
                                        "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "remove_events": {
                                        "type": "array",
                                        "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "active": {
                                        "type": "boolean",
                                        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                                        "default": true
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "active": true,
                                        "add_events": [
                                            "pull_request"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a repository webhook",
                "description": "Delete a webhook for an organization.\n\nThe authenticated user must be a repository owner, or have admin access in the repository, to delete the webhook.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-webhook",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/hooks/{hook_id}/config": {
            "get": {
                "summary": "Get a webhook configuration for a repository",
                "description": "Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use \"[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-webhook-config-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a webhook configuration for a repository",
                "description": "Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use \"[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook).\"\n\nOAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-webhook-config-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "The URL to which the payloads will be delivered.",
                                        "example": "https://example.com/webhook",
                                        "format": "uri"
                                    },
                                    "content_type": {
                                        "type": "string",
                                        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                                        "example": "\"json\""
                                    },
                                    "secret": {
                                        "type": "string",
                                        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
                                        "example": "\"********\""
                                    },
                                    "insecure_ssl": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                                                "example": "\"0\""
                                            },
                                            {
                                                "type": "number"
                                            }
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example of updating content type and URL",
                                    "value": {
                                        "content_type": "json",
                                        "url": "https://example.com/webhook"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries": {
            "get": {
                "summary": "List deliveries for a repository webhook",
                "description": "Returns a list of webhook deliveries for a webhook configured in a repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-webhook-deliveries",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "cursor",
                        "description": "Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}": {
            "get": {
                "summary": "Get a delivery for a repository webhook",
                "description": "Returns a delivery for a webhook configured in a repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-webhook-delivery",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "delivery_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": {
            "post": {
                "summary": "Redeliver a delivery for a repository webhook",
                "description": "Redeliver a webhook delivery for a webhook configured in a repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/redeliver-webhook-delivery",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "delivery_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/hooks/{hook_id}/pings": {
            "post": {
                "summary": "Ping a repository webhook",
                "description": "This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/ping-webhook",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/hooks/{hook_id}/tests": {
            "post": {
                "summary": "Test the push repository webhook",
                "description": "This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n\n> [!NOTE]\n> Previously `/repos/:owner/:repo/hooks/:hook_id/test`",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/test-push-webhook",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hook_id",
                        "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/import": {
            "get": {
                "summary": "Get an import status",
                "description": "View the progress of an import.\n\n> [!WARNING]\n> **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).\n\n**Import status**\n\nThis section includes details about the possible values of the `status` field of the Import Progress response.\n\nAn import that does not have errors will progress through these steps:\n\n*   `detecting` - the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n*   `importing` - the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n*   `mapping` - the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n*   `pushing` - the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\".\n*   `complete` - the import is complete, and the repository is ready on GitHub.\n\nIf there are problems, you will see one of these in the `status` field:\n\n*   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n*   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.\n*   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n*   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.\n*   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n\n**The project_choices field**\n\nWhen multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n\n**Git LFS related fields**\n\nThis section includes details about Git LFS related fields that may be present in the Import Progress response.\n\n*   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n*   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.\n*   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.\n*   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/get-import-status",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            },
            "put": {
                "summary": "Start an import",
                "description": "Start a source import to a GitHub repository using GitHub Importer.\nImporting into a GitHub repository with GitHub Actions enabled is not supported and will\nreturn a status `422 Unprocessable Entity` response.\n\n> [!WARNING]\n> **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/start-import",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "vcs_url": {
                                        "type": "string",
                                        "description": "The URL of the originating repository."
                                    },
                                    "vcs": {
                                        "type": "string",
                                        "description": "The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.",
                                        "enum": [
                                            "subversion",
                                            "git",
                                            "mercurial",
                                            "tfvc"
                                        ]
                                    },
                                    "vcs_username": {
                                        "type": "string",
                                        "description": "If authentication is required, the username to provide to `vcs_url`."
                                    },
                                    "vcs_password": {
                                        "type": "string",
                                        "description": "If authentication is required, the password to provide to `vcs_url`."
                                    },
                                    "tfvc_project": {
                                        "type": "string",
                                        "description": "For a tfvc import, the name of the project that is being imported."
                                    }
                                },
                                "required": [
                                    "vcs_url"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "vcs": "subversion",
                                        "vcs_url": "http://svn.mycompany.com/svn/myproject",
                                        "vcs_username": "octocat",
                                        "vcs_password": "secret"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "patch": {
                "summary": "Update an import",
                "description": "An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\nrequest. If no parameters are provided, the import will be restarted.\n\nSome servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will\nhave the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.\nYou can select the project to import by providing one of the objects in the `project_choices` array in the update request.\n\n> [!WARNING]\n> **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/update-import",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "vcs_username": {
                                        "type": "string",
                                        "description": "The username to provide to the originating repository."
                                    },
                                    "vcs_password": {
                                        "type": "string",
                                        "description": "The password to provide to the originating repository."
                                    },
                                    "vcs": {
                                        "type": "string",
                                        "description": "The type of version control system you are migrating from.",
                                        "enum": [
                                            "subversion",
                                            "tfvc",
                                            "git",
                                            "mercurial"
                                        ],
                                        "example": "\"git\""
                                    },
                                    "tfvc_project": {
                                        "type": "string",
                                        "description": "For a tfvc import, the name of the project that is being imported.",
                                        "example": "\"project1\""
                                    }
                                },
                                "nullable": true
                            },
                            "examples": {
                                "example-1": {
                                    "summary": "Update authentication for an import",
                                    "value": {
                                        "vcs_username": "octocat",
                                        "vcs_password": "secret"
                                    }
                                },
                                "example-2": {
                                    "summary": "Updating the project choice",
                                    "value": {
                                        "vcs": "tfvc",
                                        "tfvc_project": "project1",
                                        "human_name": "project1 (tfs)"
                                    }
                                },
                                "example-3": {
                                    "summary": "Restarting an import"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Cancel an import",
                "description": "Stop an import for a repository.\n\n> [!WARNING]\n> **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/cancel-import",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/repos/{owner}/{repo}/import/authors": {
            "get": {
                "summary": "Get commit authors",
                "description": "Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n\nThis endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.\n\n> [!WARNING]\n> **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/get-commit-authors",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "since",
                        "description": "A user ID. Only return users with an ID greater than this ID.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/repos/{owner}/{repo}/import/authors/{author_id}": {
            "patch": {
                "summary": "Map a commit author",
                "description": "Update an author's identity for the import. Your application can continue updating authors any time before you push\nnew commits to the repository.\n\n> [!WARNING]\n> **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/map-commit-author",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "author_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "The new Git author email."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The new Git author name."
                                    }
                                },
                                "additionalProperties": false
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "email": "hubot@github.com",
                                        "name": "Hubot the Robot"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/repos/{owner}/{repo}/import/large_files": {
            "get": {
                "summary": "Get large files",
                "description": "List files larger than 100MB found during the import\n\n> [!WARNING]\n> **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/get-large-files",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/repos/{owner}/{repo}/import/lfs": {
            "patch": {
                "summary": "Update Git LFS preference",
                "description": "You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability\nis powered by [Git LFS](https://git-lfs.com).\n\nYou can learn more about our LFS feature and working with large files [on our help\nsite](https://docs.github.com/repositories/working-with-files/managing-large-files).\n\n> [!WARNING]\n> **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/set-lfs-preference",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "use_lfs": {
                                        "type": "string",
                                        "description": "Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.",
                                        "enum": [
                                            "opt_in",
                                            "opt_out"
                                        ]
                                    }
                                },
                                "required": [
                                    "use_lfs"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "use_lfs": "opt_in"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/repos/{owner}/{repo}/installation": {
            "get": {
                "summary": "Get a repository installation for the authenticated app",
                "description": "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-repo-installation",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/interaction-limits": {
            "get": {
                "summary": "Get interaction restrictions for a repository",
                "description": "Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.",
                "tags": [
                    "interactions"
                ],
                "operationId": "interactions/get-restrictions-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set interaction restrictions for a repository",
                "description": "Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.",
                "tags": [
                    "interactions"
                ],
                "operationId": "interactions/set-restrictions-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Interaction Restrictions",
                                "description": "Limit interactions to a specific type of user for a specified duration",
                                "type": "object",
                                "properties": {
                                    "limit": {
                                        "type": "string",
                                        "description": "The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.",
                                        "example": "collaborators_only",
                                        "enum": [
                                            "existing_users",
                                            "contributors_only",
                                            "collaborators_only"
                                        ]
                                    },
                                    "expiry": {
                                        "type": "string",
                                        "description": "The duration of the interaction restriction. Default: `one_day`.",
                                        "example": "one_month",
                                        "enum": [
                                            "one_day",
                                            "three_days",
                                            "one_week",
                                            "one_month",
                                            "six_months"
                                        ]
                                    }
                                },
                                "required": [
                                    "limit"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example request body",
                                    "value": {
                                        "limit": "collaborators_only",
                                        "expiry": "one_day"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove interaction restrictions for a repository",
                "description": "Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.",
                "tags": [
                    "interactions"
                ],
                "operationId": "interactions/remove-restrictions-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/invitations": {
            "get": {
                "summary": "List repository invitations",
                "description": "When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-invitations",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/invitations/{invitation_id}": {
            "patch": {
                "summary": "Update a repository invitation",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-invitation",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invitation_id",
                        "description": "The unique identifier of the invitation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "permissions": {
                                        "type": "string",
                                        "description": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.",
                                        "enum": [
                                            "read",
                                            "write",
                                            "maintain",
                                            "triage",
                                            "admin"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example request body",
                                    "value": {
                                        "permissions": "write"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a repository invitation",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-invitation",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invitation_id",
                        "description": "The unique identifier of the invitation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues": {
            "get": {
                "summary": "List repository issues",
                "description": "List issues in a repository. Only open issues will be listed.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestone",
                        "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "description": "Indicates the state of the issues to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "closed",
                                "all"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "assignee",
                        "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "description": "Can be the name of an issue type. If the string `*` is passed, issues with any type are accepted. If the string `none` is passed, issues without type are returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creator",
                        "description": "The user that created the issue.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mentioned",
                        "description": "A user that's mentioned in the issue.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "labels",
                        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "What to sort results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "comments"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an issue",
                "description": "Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/create",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "integer"
                                            }
                                        ],
                                        "description": "The title of the issue."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The contents of the issue."
                                    },
                                    "assignee": {
                                        "type": "string",
                                        "description": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_",
                                        "nullable": true
                                    },
                                    "milestone": {
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "integer",
                                                "description": "The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._"
                                            }
                                        ],
                                        "nullable": true
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
                                        "items": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "description": {
                                                            "type": "string",
                                                            "nullable": true
                                                        },
                                                        "color": {
                                                            "type": "string",
                                                            "nullable": true
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "assignees": {
                                        "type": "array",
                                        "description": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "The name of the issue type to associate with this issue. _NOTE: Only users with push access can set the type for new issues. The type is silently dropped otherwise._",
                                        "nullable": true,
                                        "example": "Epic"
                                    }
                                },
                                "required": [
                                    "title"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "Found a bug",
                                        "body": "I'm having a problem with this.",
                                        "assignees": [
                                            "octocat"
                                        ],
                                        "milestone": 1,
                                        "labels": [
                                            "bug"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/issues/comments": {
            "get": {
                "summary": "List issue comments for a repository",
                "description": "You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.\n\nBy default, issue comments are ordered by ascending ID.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-comments-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "Either `asc` or `desc`. Ignored without the `sort` parameter.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/comments/{comment_id}": {
            "get": {
                "summary": "Get an issue comment",
                "description": "You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/get-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update an issue comment",
                "description": "You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/update-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The contents of the comment."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Me too"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an issue comment",
                "description": "You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/delete-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
            "get": {
                "summary": "List reactions for an issue comment",
                "description": "List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/list-for-issue-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "content",
                        "description": "Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue comment.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "+1",
                                "-1",
                                "laugh",
                                "confused",
                                "heart",
                                "hooray",
                                "rocket",
                                "eyes"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create reaction for an issue comment",
                "description": "Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/create-for-issue-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment.",
                                        "enum": [
                                            "+1",
                                            "-1",
                                            "laugh",
                                            "confused",
                                            "heart",
                                            "hooray",
                                            "rocket",
                                            "eyes"
                                        ]
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "heart"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": {
            "delete": {
                "summary": "Delete an issue comment reaction",
                "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/delete-for-issue-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "reaction_id",
                        "description": "The unique identifier of the reaction.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/events": {
            "get": {
                "summary": "List issue events for a repository",
                "description": "Lists events for a repository.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-events-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/events/{event_id}": {
            "get": {
                "summary": "Get an issue event",
                "description": "Gets a single event by the event id.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/get-event",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "event_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}": {
            "get": {
                "summary": "Get an issue",
                "description": "The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was\n[transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/get",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update an issue",
                "description": "Issue owners and users with push access or Triage role can edit an issue.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/update",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "integer"
                                            }
                                        ],
                                        "description": "The title of the issue.",
                                        "nullable": true
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The contents of the issue.",
                                        "nullable": true
                                    },
                                    "assignee": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "Username to assign to this issue. **This field is closing down.**"
                                    },
                                    "state": {
                                        "type": "string",
                                        "description": "The open or closed state of the issue.",
                                        "enum": [
                                            "open",
                                            "closed"
                                        ]
                                    },
                                    "state_reason": {
                                        "type": "string",
                                        "enum": [
                                            "completed",
                                            "not_planned",
                                            "reopened"
                                        ],
                                        "nullable": true,
                                        "description": "The reason for the state change. Ignored unless `state` is changed.",
                                        "example": "not_planned"
                                    },
                                    "milestone": {
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "integer",
                                                "description": "The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped."
                                            }
                                        ],
                                        "nullable": true
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.",
                                        "items": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "description": {
                                                            "type": "string",
                                                            "nullable": true
                                                        },
                                                        "color": {
                                                            "type": "string",
                                                            "nullable": true
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "assignees": {
                                        "type": "array",
                                        "description": "Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "The name of the issue type to associate with this issue or use `null` to remove the current issue type. Only users with push access can set the type for issues. Without push access to the repository, type changes are silently dropped.",
                                        "nullable": true,
                                        "example": "Epic"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "Found a bug",
                                        "body": "I'm having a problem with this.",
                                        "assignees": [
                                            "octocat"
                                        ],
                                        "milestone": 1,
                                        "state": "open",
                                        "labels": [
                                            "bug"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
            "post": {
                "summary": "Add assignees to an issue",
                "description": "Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/add-assignees",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "assignees": {
                                        "type": "array",
                                        "description": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "assignees": [
                                            "hubot",
                                            "other_user"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove assignees from an issue",
                "description": "Removes one or more assignees from an issue.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/remove-assignees",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "assignees": {
                                        "type": "array",
                                        "description": "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "assignees": [
                                            "hubot",
                                            "other_user"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}": {
            "get": {
                "summary": "Check if a user can be assigned to a issue",
                "description": "Checks if a user has permission to be assigned to a specific issue.\n\nIf the `assignee` can be assigned to this issue, a `204` status code with no content is returned.\n\nOtherwise a `404` status code is returned.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/check-user-can-be-assigned-to-issue",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "assignee",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/comments": {
            "get": {
                "summary": "List issue comments",
                "description": "You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nIssue comments are ordered by ascending ID.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-comments",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create an issue comment",
                "description": "You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).\nCreating content too quickly using this endpoint may result in secondary rate limiting.\nFor more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/create-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The contents of the comment."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Me too"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/events": {
            "get": {
                "summary": "List issue events",
                "description": "Lists all events for an issue.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-events",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/labels": {
            "get": {
                "summary": "List labels for an issue",
                "description": "Lists all labels for an issue.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-labels-on-issue",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Add labels to an issue",
                "description": "Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue. ",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/add-labels",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "labels": {
                                                "type": "array",
                                                "minItems": 1,
                                                "description": "The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see \"[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue).\"",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "labels": {
                                                "type": "array",
                                                "minItems": 1,
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "name"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "name"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "labels": [
                                            "bug",
                                            "enhancement"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Set labels for an issue",
                "description": "Removes any previous labels and sets the new labels for an issue.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/set-labels",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "labels": {
                                                "type": "array",
                                                "minItems": 1,
                                                "description": "The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see \"[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue).\"",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "labels": {
                                                "type": "array",
                                                "minItems": 1,
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "name"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "name"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "labels": [
                                            "bug",
                                            "enhancement"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove all labels from an issue",
                "description": "Removes all labels from an issue.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/remove-all-labels",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": {
            "delete": {
                "summary": "Remove a label from an issue",
                "description": "Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/remove-label",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/lock": {
            "put": {
                "summary": "Lock an issue",
                "description": "Users with push access can lock an issue or pull request's conversation.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/lock",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "lock_reason": {
                                        "type": "string",
                                        "description": "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n * `off-topic`  \n * `too heated`  \n * `resolved`  \n * `spam`",
                                        "enum": [
                                            "off-topic",
                                            "too heated",
                                            "resolved",
                                            "spam"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example of locking an issue as off-topic",
                                    "value": {
                                        "lock_reason": "off-topic"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Unlock an issue",
                "description": "Users with push access can unlock an issue's conversation.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/unlock",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
            "get": {
                "summary": "List reactions for an issue",
                "description": "List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/list-for-issue",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "content",
                        "description": "Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "+1",
                                "-1",
                                "laugh",
                                "confused",
                                "heart",
                                "hooray",
                                "rocket",
                                "eyes"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create reaction for an issue",
                "description": "Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP `200` status means that you already added the reaction type to this issue.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/create-for-issue",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue.",
                                        "enum": [
                                            "+1",
                                            "-1",
                                            "laugh",
                                            "confused",
                                            "heart",
                                            "hooray",
                                            "rocket",
                                            "eyes"
                                        ]
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "heart"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": {
            "delete": {
                "summary": "Delete an issue reaction",
                "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n\nDelete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/delete-for-issue",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "reaction_id",
                        "description": "The unique identifier of the reaction.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/sub_issue": {
            "delete": {
                "summary": "Remove sub-issue",
                "description": "You can use the REST API to remove a sub-issue from an issue.\nRemoving content too quickly using this endpoint may result in secondary rate limiting.\nFor more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass a specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/remove-sub-issue",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sub_issue_id": {
                                        "type": "integer",
                                        "description": "The id of the sub-issue to remove"
                                    }
                                },
                                "required": [
                                    "sub_issue_id"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "sub_issue_id": 6
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues": {
            "get": {
                "summary": "List sub-issues",
                "description": "You can use the REST API to list the sub-issues on an issue.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-sub-issues",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Add sub-issue",
                "description": "You can use the REST API to add sub-issues to issues.\n\nCreating content too quickly using this endpoint may result in secondary rate limiting.\nFor more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/add-sub-issue",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sub_issue_id": {
                                        "type": "integer",
                                        "description": "The id of the sub-issue to add. The sub-issue must belong to the same repository owner as the parent issue"
                                    },
                                    "replace_parent": {
                                        "type": "boolean",
                                        "description": "Option that, when true, instructs the operation to replace the sub-issues current parent issue"
                                    }
                                },
                                "required": [
                                    "sub_issue_id"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "sub_issue_id": 1
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority": {
            "patch": {
                "summary": "Reprioritize sub-issue",
                "description": "You can use the REST API to reprioritize a sub-issue to a different position in the parent list.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/reprioritize-sub-issue",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sub_issue_id": {
                                        "type": "integer",
                                        "description": "The id of the sub-issue to reprioritize"
                                    },
                                    "after_id": {
                                        "type": "integer",
                                        "description": "The id of the sub-issue to be prioritized after (either positional argument after OR before should be specified)."
                                    },
                                    "before_id": {
                                        "type": "integer",
                                        "description": "The id of the sub-issue to be prioritized before (either positional argument after OR before should be specified)."
                                    }
                                },
                                "required": [
                                    "sub_issue_id"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "sub_issue_id": 6,
                                        "after_id": 5
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/issues/{issue_number}/timeline": {
            "get": {
                "summary": "List timeline events for an issue",
                "description": "List all timeline events for an issue.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-events-for-timeline",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issue_number",
                        "description": "The number that identifies the issue.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/keys": {
            "get": {
                "summary": "List deploy keys",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-deploy-keys",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a deploy key",
                "description": "You can create a read-only deploy key.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-deploy-key",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "A name for the key."
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "The contents of the key."
                                    },
                                    "read_only": {
                                        "type": "boolean",
                                        "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/).\""
                                    }
                                },
                                "required": [
                                    "key"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "octocat@octomac",
                                        "key": "ssh-rsa AAA...",
                                        "read_only": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/keys/{key_id}": {
            "get": {
                "summary": "Get a deploy key",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-deploy-key",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key_id",
                        "description": "The unique identifier of the key.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a deploy key",
                "description": "Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-deploy-key",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key_id",
                        "description": "The unique identifier of the key.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/labels": {
            "get": {
                "summary": "List labels for a repository",
                "description": "Lists all labels for a repository.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-labels-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a label",
                "description": "Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/create-label",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\""
                                    },
                                    "color": {
                                        "type": "string",
                                        "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A short description of the label. Must be 100 characters or fewer."
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "bug",
                                        "description": "Something isn't working",
                                        "color": "f29513"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/labels/{name}": {
            "get": {
                "summary": "Get a label",
                "description": "Gets a label using the given name.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/get-label",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a label",
                "description": "Updates a label using the given label name.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/update-label",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "new_name": {
                                        "type": "string",
                                        "description": "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\""
                                    },
                                    "color": {
                                        "type": "string",
                                        "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A short description of the label. Must be 100 characters or fewer."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "new_name": "bug :bug:",
                                        "description": "Small bug fix required",
                                        "color": "b01f26"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a label",
                "description": "Deletes a label using the given label name.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/delete-label",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/languages": {
            "get": {
                "summary": "List repository languages",
                "description": "Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-languages",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/license": {
            "get": {
                "summary": "Get the license for a repository",
                "description": "This method returns the contents of the repository's license file, if one is detected.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw contents of the license.\n- **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).",
                "tags": [
                    "licenses"
                ],
                "operationId": "licenses/get-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,\n`refs/heads/<branch name>` or simply `<branch name>`."
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/merge-upstream": {
            "post": {
                "summary": "Sync a fork branch with the upstream repository",
                "description": "Sync a branch of a forked repository to keep it up-to-date with the upstream repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/merge-upstream",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "branch": {
                                        "type": "string",
                                        "description": "The name of the branch which should be updated to match upstream."
                                    }
                                },
                                "required": [
                                    "branch"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "branch": "main"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/merges": {
            "post": {
                "summary": "Merge a branch",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/merge",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "base": {
                                        "type": "string",
                                        "description": "The name of the base branch that the head will be merged into."
                                    },
                                    "head": {
                                        "type": "string",
                                        "description": "The head to merge. This can be a branch name or a commit SHA1."
                                    },
                                    "commit_message": {
                                        "type": "string",
                                        "description": "Commit message to use for the merge commit. If omitted, a default message will be used."
                                    }
                                },
                                "required": [
                                    "base",
                                    "head"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "base": "master",
                                        "head": "cool_feature",
                                        "commit_message": "Shipped cool_feature!"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/milestones": {
            "get": {
                "summary": "List milestones",
                "description": "Lists milestones for a repository.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-milestones",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "description": "The state of the milestone. Either `open`, `closed`, or `all`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "closed",
                                "all"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "What to sort results by. Either `due_on` or `completeness`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "due_on",
                                "completeness"
                            ],
                            "default": "due_on"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction of the sort. Either `asc` or `desc`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a milestone",
                "description": "Creates a milestone.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/create-milestone",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "The title of the milestone."
                                    },
                                    "state": {
                                        "type": "string",
                                        "description": "The state of the milestone. Either `open` or `closed`.",
                                        "enum": [
                                            "open",
                                            "closed"
                                        ],
                                        "default": "open"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A description of the milestone."
                                    },
                                    "due_on": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                                    }
                                },
                                "required": [
                                    "title"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "v1.0",
                                        "state": "open",
                                        "description": "Tracking milestone for version 1.0",
                                        "due_on": "2012-10-09T23:39:01Z"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/milestones/{milestone_number}": {
            "get": {
                "summary": "Get a milestone",
                "description": "Gets a milestone using the given milestone number.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/get-milestone",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestone_number",
                        "description": "The number that identifies the milestone.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a milestone",
                "description": "",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/update-milestone",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestone_number",
                        "description": "The number that identifies the milestone.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "The title of the milestone."
                                    },
                                    "state": {
                                        "type": "string",
                                        "description": "The state of the milestone. Either `open` or `closed`.",
                                        "enum": [
                                            "open",
                                            "closed"
                                        ],
                                        "default": "open"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A description of the milestone."
                                    },
                                    "due_on": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "v1.0",
                                        "state": "open",
                                        "description": "Tracking milestone for version 1.0",
                                        "due_on": "2012-10-09T23:39:01Z"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a milestone",
                "description": "Deletes a milestone using the given milestone number.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/delete-milestone",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestone_number",
                        "description": "The number that identifies the milestone.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/milestones/{milestone_number}/labels": {
            "get": {
                "summary": "List labels for issues in a milestone",
                "description": "Lists labels for issues in a milestone.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-labels-for-milestone",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "milestone_number",
                        "description": "The number that identifies the milestone.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/notifications": {
            "get": {
                "summary": "List repository notifications for the authenticated user",
                "description": "Lists all notifications for the current user in the specified repository.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-repo-notifications-for-authenticated-user",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "all",
                        "description": "If `true`, show notifications marked as read.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "participating",
                        "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "before",
                        "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "put": {
                "summary": "Mark repository notifications as read",
                "description": "Marks all notifications in a repository as \"read\" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/mark-repo-notifications-as-read",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "last_read_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "last_read_at": "2019-01-01T00:00:00Z"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pages": {
            "get": {
                "summary": "Get a GitHub Pages site",
                "description": "Gets information about a GitHub Pages site.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-pages",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a GitHub Pages site",
                "description": "Configures a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\"\n\nThe authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-pages-site",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "The source branch and directory used to publish your Pages site.",
                                "nullable": true,
                                "properties": {
                                    "build_type": {
                                        "type": "string",
                                        "description": "The process in which the Page will be built. Possible values are `\"legacy\"` and `\"workflow\"`.",
                                        "enum": [
                                            "legacy",
                                            "workflow"
                                        ]
                                    },
                                    "source": {
                                        "type": "object",
                                        "description": "The source branch and directory used to publish your Pages site.",
                                        "properties": {
                                            "branch": {
                                                "type": "string",
                                                "description": "The repository branch used to publish your site's source files."
                                            },
                                            "path": {
                                                "type": "string",
                                                "description": "The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`",
                                                "enum": [
                                                    "/",
                                                    "/docs"
                                                ],
                                                "default": "/"
                                            }
                                        },
                                        "required": [
                                            "branch"
                                        ]
                                    }
                                },
                                "anyOf": [
                                    {
                                        "required": [
                                            "source"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "build_type"
                                        ]
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "source": {
                                            "branch": "main",
                                            "path": "/docs"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update information about a GitHub Pages site",
                "description": "Updates information for a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nThe authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-information-about-pages-site",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "cname": {
                                        "type": "string",
                                        "description": "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://docs.github.com/pages/configuring-a-custom-domain-for-your-github-pages-site).\"",
                                        "nullable": true
                                    },
                                    "https_enforced": {
                                        "type": "boolean",
                                        "description": "Specify whether HTTPS should be enforced for the repository."
                                    },
                                    "build_type": {
                                        "type": "string",
                                        "description": "The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.",
                                        "enum": [
                                            "legacy",
                                            "workflow"
                                        ]
                                    },
                                    "source": {
                                        "anyOf": [
                                            {
                                                "type": "string",
                                                "description": "Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\"gh-pages\"`, `\"master\"`, and `\"master /docs\"`.",
                                                "enum": [
                                                    "gh-pages",
                                                    "master",
                                                    "master /docs"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "description": "Update the source for the repository. Must include the branch name and path.",
                                                "properties": {
                                                    "branch": {
                                                        "type": "string",
                                                        "description": "The repository branch used to publish your site's source files."
                                                    },
                                                    "path": {
                                                        "type": "string",
                                                        "description": "The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.",
                                                        "enum": [
                                                            "/",
                                                            "/docs"
                                                        ]
                                                    }
                                                },
                                                "required": [
                                                    "branch",
                                                    "path"
                                                ]
                                            }
                                        ]
                                    }
                                },
                                "anyOf": [
                                    {
                                        "required": [
                                            "build_type"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "source"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "cname"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "public"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "https_enforced"
                                        ]
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "cname": "octocatblog.com",
                                        "source": {
                                            "branch": "main",
                                            "path": "/"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a GitHub Pages site",
                "description": "Deletes a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nThe authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-pages-site",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pages/builds": {
            "get": {
                "summary": "List GitHub Pages builds",
                "description": "Lists builts of a GitHub Pages site.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-pages-builds",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Request a GitHub Pages build",
                "description": "You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n\nBuild requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/request-pages-build",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pages/builds/latest": {
            "get": {
                "summary": "Get latest Pages build",
                "description": "Gets information about the single most recent build of a GitHub Pages site.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-latest-pages-build",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pages/builds/{build_id}": {
            "get": {
                "summary": "Get GitHub Pages build",
                "description": "Gets information about a GitHub Pages build.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-pages-build",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "build_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pages/deployments": {
            "post": {
                "summary": "Create a GitHub Pages deployment",
                "description": "Create a GitHub Pages deployment for a repository.\n\nThe authenticated user must have write permission to the repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-pages-deployment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "The object used to create GitHub Pages deployment",
                                "properties": {
                                    "artifact_id": {
                                        "type": "number",
                                        "description": "The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required."
                                    },
                                    "artifact_url": {
                                        "type": "string",
                                        "description": "The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required."
                                    },
                                    "environment": {
                                        "type": "string",
                                        "description": "The target environment for this GitHub Pages deployment.",
                                        "default": "github-pages"
                                    },
                                    "pages_build_version": {
                                        "type": "string",
                                        "description": "A unique string that represents the version of the build for this deployment.",
                                        "default": "GITHUB_SHA"
                                    },
                                    "oidc_token": {
                                        "type": "string",
                                        "description": "The OIDC token issued by GitHub Actions certifying the origin of the deployment."
                                    }
                                },
                                "required": [
                                    "pages_build_version",
                                    "oidc_token"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "artifact_url": "https://downloadcontent/",
                                        "environment": "github-pages",
                                        "pages_build_version": "4fd754f7e594640989b406850d0bc8f06a121251",
                                        "oidc_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IlV2R1h4SUhlY0JFc1JCdEttemUxUEhfUERiVSIsImtpZCI6IjUyRjE5N0M0ODFERTcwMTEyQzQ0MUI0QTlCMzdCNTNDN0ZDRjBEQjUifQ.eyJqdGkiOiJhMWIwNGNjNy0zNzZiLTQ1N2QtOTMzNS05NTY5YmVjZDExYTIiLCJzdWIiOiJyZXBvOnBhcGVyLXNwYS9taW55aTplbnZpcm9ubWVudDpQcm9kdWN0aW9uIiwiYXVkIjoiaHR0cHM6Ly9naXRodWIuY29tL3BhcGVyLXNwYSIsInJlZiI6InJlZnMvaGVhZHMvbWFpbiIsInNoYSI6ImEyODU1MWJmODdiZDk3NTFiMzdiMmM0YjM3M2MxZjU3NjFmYWM2MjYiLCJyZXBvc2l0b3J5IjoicGFwZXItc3BhL21pbnlpIiwicmVwb3NpdG9yeV9vd25lciI6InBhcGVyLXNwYSIsInJ1bl9pZCI6IjE1NDY0NTkzNjQiLCJydW5fbnVtYmVyIjoiMzQiLCJydW5fYXR0ZW1wdCI6IjYiLCJhY3RvciI6IllpTXlzdHkiLCJ3b3JrZmxvdyI6IkNJIiwiaGVhZF9yZWYiOiIiLCJiYXNlX3JlZiI6IiIsImV2ZW50X25hbWUiOiJwdXNoIiwicmVmX3R5cGUiOiJicmFuY2giLCJlbnZpcm9ubWVudCI6IlByb2R1Y3Rpb24iLCJqb2Jfd29ya2Zsb3dfcmVmIjoicGFwZXItc3BhL21pbnlpLy5naXRodWIvd29ya2Zsb3dzL2JsYW5rLnltbEByZWZzL2hlYWRzL21haW4iLCJpc3MiOiJodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tIiwibmJmIjoxNjM5MDAwODU2LCJleHAiOjE2MzkwMDE3NTYsImlhdCI6MTYzOTAwMTQ1Nn0.VP8WictbQECKozE2SgvKb2FqJ9hisWsoMkYRTqfBrQfZTCXi5IcFEdgDMB2X7a99C2DeUuTvHh9RMKXLL2a0zg3-Sd7YrO7a2ll2kNlnvyIypcN6AeIc7BxHsTTnZN9Ud_xmEsTrSRGOEKmzCFkULQ6N4zlVD0sidypmXlMemmWEcv_ZHqhioEI_VMp5vwXQurketWH7qX4oDgG4okyYtPrv5RQHbfQcVo9izaPJ_jnsDd0CBA0QOx9InjPidtIkMYQLyUgJy33HLJy86EFNUnAf8UhBQuQi5mAsEpEzBBuKpG3PDiPtYCHOk64JZkZGd5mR888a5sbHRiaF8hm8YA"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}": {
            "get": {
                "summary": "Get the status of a GitHub Pages deployment",
                "description": "Gets the current status of a GitHub Pages deployment.\n\nThe authenticated user must have read permission for the GitHub Pages site.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-pages-deployment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pages_deployment_id",
                        "description": "The ID of the Pages deployment. You can also give the commit SHA of the deployment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel": {
            "post": {
                "summary": "Cancel a GitHub Pages deployment",
                "description": "Cancels a GitHub Pages deployment.\n\nThe authenticated user must have write permissions for the GitHub Pages site.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/cancel-pages-deployment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pages_deployment_id",
                        "description": "The ID of the Pages deployment. You can also give the commit SHA of the deployment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pages/health": {
            "get": {
                "summary": "Get a DNS health check for GitHub Pages",
                "description": "Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.\n\nThe first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.\n\nThe authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-pages-health-check",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/private-vulnerability-reporting": {
            "get": {
                "summary": "Check if private vulnerability reporting is enabled for a repository",
                "description": "Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see \"[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)\".",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/check-private-vulnerability-reporting",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Enable private vulnerability reporting for a repository",
                "description": "Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/enable-private-vulnerability-reporting",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Disable private vulnerability reporting for a repository",
                "description": "Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\".",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/disable-private-vulnerability-reporting",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/projects": {
            "get": {
                "summary": "List repository projects",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/list-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "description": "Indicates the state of the projects to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "closed",
                                "all"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            },
            "post": {
                "summary": "Create a repository project",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/create-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the project."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The description of the project."
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Projects Documentation",
                                        "body": "Developer documentation project for the developer site."
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/repos/{owner}/{repo}/properties/values": {
            "get": {
                "summary": "Get all custom property values for a repository",
                "description": "Gets all custom property values that are set for a repository.\nUsers with read access to the repository can use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-custom-properties-values",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Create or update custom property values for a repository",
                "description": "Create new or update existing custom property values for a repository.\nUsing a value of `null` for a custom property will remove or 'unset' the property value from the repository.\n\nRepository admins and other users with the repository-level \"edit custom property values\" fine-grained permission can use this endpoint.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-or-update-custom-properties-values",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "properties": {
                                        "type": "array",
                                        "description": "A list of custom property names and associated values to apply to the repositories.",
                                        "items": {
                                            "title": "Custom Property Value",
                                            "description": "Custom property name and associated value",
                                            "type": "object",
                                            "properties": {
                                                "property_name": {
                                                    "type": "string",
                                                    "description": "The name of the property"
                                                },
                                                "value": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    ],
                                                    "description": "The value assigned to the property",
                                                    "nullable": true
                                                }
                                            },
                                            "required": [
                                                "property_name",
                                                "value"
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "properties"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "properties": [
                                            {
                                                "property_name": "environment",
                                                "value": "production"
                                            },
                                            {
                                                "property_name": "service",
                                                "value": "web"
                                            },
                                            {
                                                "property_name": "team",
                                                "value": "octocat"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls": {
            "get": {
                "summary": "List pull requests",
                "description": "Lists pull requests in a specified repository.\n\nDraft pull requests are available in public repositories with GitHub\nFree and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing\nplans, and in public and private repositories with GitHub Team and GitHub Enterprise\nCloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)\nin the GitHub Help documentation.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/list",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "description": "Either `open`, `closed`, or `all` to filter by state.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "closed",
                                "all"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "head",
                        "description": "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base",
                        "description": "Filter pulls by base branch name. Example: `gh-pages`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "popularity",
                                "long-running"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a pull request",
                "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/create",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "The title of the new pull request. Required unless `issue` is specified."
                                    },
                                    "head": {
                                        "type": "string",
                                        "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`."
                                    },
                                    "head_repo": {
                                        "type": "string",
                                        "description": "The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.",
                                        "format": "repo.nwo",
                                        "example": "octo-org/octo-repo"
                                    },
                                    "base": {
                                        "type": "string",
                                        "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The contents of the pull request."
                                    },
                                    "maintainer_can_modify": {
                                        "type": "boolean",
                                        "description": "Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request."
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more."
                                    },
                                    "issue": {
                                        "type": "integer",
                                        "format": "int64",
                                        "example": 1,
                                        "description": "An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified."
                                    }
                                },
                                "required": [
                                    "head",
                                    "base"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "Amazing new feature",
                                        "body": "Please pull these awesome changes in!",
                                        "head": "octocat:new-feature",
                                        "base": "master"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/comments": {
            "get": {
                "summary": "List review comments in a repository",
                "description": "Lists review comments for all pull requests in a repository. By default,\nreview comments are in ascending order by ID.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/list-review-comments-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "created_at"
                            ]
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort results. Ignored without `sort` parameter.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
            "get": {
                "summary": "Get a review comment for a pull request",
                "description": "Provides details for a specified review comment.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/get-review-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a review comment for a pull request",
                "description": "Edits the content of a specified review comment.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/update-review-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The text of the reply to the review comment."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "I like this too!"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a review comment for a pull request",
                "description": "Deletes a review comment.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/delete-review-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
            "get": {
                "summary": "List reactions for a pull request review comment",
                "description": "List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/list-for-pull-request-review-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "content",
                        "description": "Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a pull request review comment.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "+1",
                                "-1",
                                "laugh",
                                "confused",
                                "heart",
                                "hooray",
                                "rocket",
                                "eyes"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create reaction for a pull request review comment",
                "description": "Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/create-for-pull-request-review-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment.",
                                        "enum": [
                                            "+1",
                                            "-1",
                                            "laugh",
                                            "confused",
                                            "heart",
                                            "hooray",
                                            "rocket",
                                            "eyes"
                                        ]
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "heart"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": {
            "delete": {
                "summary": "Delete a pull request comment reaction",
                "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n\nDelete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/delete-for-pull-request-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "reaction_id",
                        "description": "The unique identifier of the reaction.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}": {
            "get": {
                "summary": "Get a pull request",
                "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists details of a pull request by providing its number.\n\nWhen you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n\nThe value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n\nThe value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n\n*   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n*   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n*   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n\nPass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.\n- **`application/vnd.github.diff`**: For more information, see \"[git-diff](https://git-scm.com/docs/git-diff)\" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/get",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a pull request",
                "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/update",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "The title of the pull request."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The contents of the pull request."
                                    },
                                    "state": {
                                        "type": "string",
                                        "description": "State of this Pull Request. Either `open` or `closed`.",
                                        "enum": [
                                            "open",
                                            "closed"
                                        ]
                                    },
                                    "base": {
                                        "type": "string",
                                        "description": "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository."
                                    },
                                    "maintainer_can_modify": {
                                        "type": "boolean",
                                        "description": "Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "new title",
                                        "body": "updated body",
                                        "state": "open",
                                        "base": "master"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces": {
            "post": {
                "summary": "Create a codespace from a pull request",
                "description": "Creates a codespace owned by the authenticated user for the specified pull request.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/create-with-pr-for-authenticated-user",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "location": {
                                        "description": "The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.",
                                        "type": "string"
                                    },
                                    "geo": {
                                        "description": "The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.",
                                        "type": "string",
                                        "enum": [
                                            "EuropeWest",
                                            "SoutheastAsia",
                                            "UsEast",
                                            "UsWest"
                                        ]
                                    },
                                    "client_ip": {
                                        "description": "IP for location auto-detection when proxying a request",
                                        "type": "string"
                                    },
                                    "machine": {
                                        "description": "Machine type to use for this codespace",
                                        "type": "string"
                                    },
                                    "devcontainer_path": {
                                        "description": "Path to devcontainer.json config to use for this codespace",
                                        "type": "string"
                                    },
                                    "multi_repo_permissions_opt_out": {
                                        "description": "Whether to authorize requested permissions from devcontainer.json",
                                        "type": "boolean"
                                    },
                                    "working_directory": {
                                        "description": "Working directory for this codespace",
                                        "type": "string"
                                    },
                                    "idle_timeout_minutes": {
                                        "description": "Time in minutes before codespace stops from inactivity",
                                        "type": "integer"
                                    },
                                    "display_name": {
                                        "description": "Display name for this codespace",
                                        "type": "string"
                                    },
                                    "retention_period_minutes": {
                                        "description": "Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
                                        "type": "integer"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "repository_id": 1,
                                        "ref": "main"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
            "get": {
                "summary": "List review comments on a pull request",
                "description": "Lists all review comments for a specified pull request. By default, review comments\nare in ascending order by ID.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/list-review-comments",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort results. Ignored without `sort` parameter.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a review comment for a pull request",
                "description": "Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment).\"\n\nIf your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request.\n\nThe `position` parameter is closing down. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/create-review-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The text of the review comment."
                                    },
                                    "commit_id": {
                                        "type": "string",
                                        "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`."
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "The relative path to the file that necessitates a comment."
                                    },
                                    "position": {
                                        "type": "integer",
                                        "description": "**This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
                                        "deprecated": true,
                                        "x-github": {
                                            "deprecationDate": "2022-11-01"
                                        }
                                    },
                                    "side": {
                                        "type": "string",
                                        "description": "In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.",
                                        "enum": [
                                            "LEFT",
                                            "RIGHT"
                                        ]
                                    },
                                    "line": {
                                        "type": "integer",
                                        "description": "**Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to."
                                    },
                                    "start_line": {
                                        "type": "integer",
                                        "description": "**Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation."
                                    },
                                    "start_side": {
                                        "type": "string",
                                        "description": "**Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.",
                                        "enum": [
                                            "LEFT",
                                            "RIGHT",
                                            "side"
                                        ]
                                    },
                                    "in_reply_to": {
                                        "type": "integer",
                                        "example": 2,
                                        "description": "The ID of the review comment to reply to. To find the ID of a review comment with [\"List review comments on a pull request\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored."
                                    },
                                    "subject_type": {
                                        "type": "string",
                                        "description": "The level at which the comment is targeted.",
                                        "enum": [
                                            "line",
                                            "file"
                                        ]
                                    }
                                },
                                "required": [
                                    "body",
                                    "commit_id",
                                    "path"
                                ]
                            },
                            "examples": {
                                "example-for-a-multi-line-comment": {
                                    "summary": "Example for a multi-line comment",
                                    "value": {
                                        "body": "Great stuff!",
                                        "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                                        "path": "file1.txt",
                                        "start_line": 1,
                                        "start_side": "RIGHT",
                                        "line": 2,
                                        "side": "RIGHT"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": {
            "post": {
                "summary": "Create a reply for a review comment",
                "description": "Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/create-reply-for-review-comment",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_id",
                        "description": "The unique identifier of the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The text of the review comment."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Great stuff!"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/commits": {
            "get": {
                "summary": "List commits on a pull request",
                "description": "Lists a maximum of 250 commits for a pull request. To receive a complete\ncommit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)\nendpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/list-commits",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/files": {
            "get": {
                "summary": "List pull requests files",
                "description": "Lists the files in a specified pull request.\n\n> [!NOTE]\n> Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/list-files",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
            "get": {
                "summary": "Check if a pull request has been merged",
                "description": "Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/check-if-merged",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Merge a pull request",
                "description": "Merges a pull request into the base branch.\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/merge",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "commit_title": {
                                        "type": "string",
                                        "description": "Title for the automatic commit message."
                                    },
                                    "commit_message": {
                                        "type": "string",
                                        "description": "Extra detail to append to automatic commit message."
                                    },
                                    "sha": {
                                        "type": "string",
                                        "description": "SHA that pull request head must match to allow merge."
                                    },
                                    "merge_method": {
                                        "type": "string",
                                        "description": "The merge method to use.",
                                        "enum": [
                                            "merge",
                                            "squash",
                                            "rebase"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "response-if-merge-was-successful": {
                                    "value": {
                                        "commit_title": "Expand enum",
                                        "commit_message": "Add a new value to the merge_method enum"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
            "get": {
                "summary": "Get all requested reviewers for a pull request",
                "description": "Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/list-requested-reviewers",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Request reviewers for a pull request",
                "description": "Requests reviews for a pull request from a given set of users and/or teams.\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/request-reviewers",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reviewers": {
                                        "type": "array",
                                        "description": "An array of user `login`s that will be requested.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "team_reviewers": {
                                        "type": "array",
                                        "description": "An array of team `slug`s that will be requested.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "anyOf": [
                                    {
                                        "required": [
                                            "reviewers"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "team_reviewers"
                                        ]
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "reviewers": [
                                            "octocat",
                                            "hubot",
                                            "other_user"
                                        ],
                                        "team_reviewers": [
                                            "justice-league"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove requested reviewers from a pull request",
                "description": "Removes review requests from a pull request for a given set of users and/or teams.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/remove-requested-reviewers",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reviewers": {
                                        "type": "array",
                                        "description": "An array of user `login`s that will be removed.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "team_reviewers": {
                                        "type": "array",
                                        "description": "An array of team `slug`s that will be removed.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "reviewers"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "reviewers": [
                                            "octocat",
                                            "hubot",
                                            "other_user"
                                        ],
                                        "team_reviewers": [
                                            "justice-league"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
            "get": {
                "summary": "List reviews for a pull request",
                "description": "Lists all reviews for a specified pull request. The list of reviews returns in chronological order.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/list-reviews",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a review for a pull request",
                "description": "Creates a review on a specified pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nPull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see \"[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request).\"\n\n> [!NOTE]\n> To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.\n\nThe `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/create-review",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "commit_id": {
                                        "type": "string",
                                        "description": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review."
                                    },
                                    "event": {
                                        "type": "string",
                                        "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.",
                                        "enum": [
                                            "APPROVE",
                                            "REQUEST_CHANGES",
                                            "COMMENT"
                                        ]
                                    },
                                    "comments": {
                                        "type": "array",
                                        "description": "Use the following table to specify the location, destination, and contents of the draft review comment.",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "path": {
                                                    "type": "string",
                                                    "description": "The relative path to the file that necessitates a review comment."
                                                },
                                                "position": {
                                                    "type": "integer",
                                                    "description": "The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file."
                                                },
                                                "body": {
                                                    "type": "string",
                                                    "description": "Text of the review comment."
                                                },
                                                "line": {
                                                    "type": "integer",
                                                    "example": 28
                                                },
                                                "side": {
                                                    "type": "string",
                                                    "example": "RIGHT"
                                                },
                                                "start_line": {
                                                    "type": "integer",
                                                    "example": 26
                                                },
                                                "start_side": {
                                                    "type": "string",
                                                    "example": "LEFT"
                                                }
                                            },
                                            "required": [
                                                "path",
                                                "body"
                                            ]
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                                        "body": "This is close to perfect! Please address the suggested inline change.",
                                        "event": "REQUEST_CHANGES",
                                        "comments": [
                                            {
                                                "path": "file.md",
                                                "position": 6,
                                                "body": "Please add more information here, and fix this typo."
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
            "get": {
                "summary": "Get a review for a pull request",
                "description": "Retrieves a pull request review by its ID.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/get-review",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review_id",
                        "description": "The unique identifier of the review.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Update a review for a pull request",
                "description": "Updates the contents of a specified review summary comment.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/update-review",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review_id",
                        "description": "The unique identifier of the review.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The body text of the pull request review."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "This is close to perfect! Please address the suggested inline change. And add more about this."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a pending review for a pull request",
                "description": "Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/delete-pending-review",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review_id",
                        "description": "The unique identifier of the review.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": {
            "get": {
                "summary": "List comments for a pull request review",
                "description": "Lists comments for a specific pull request review.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/list-comments-for-review",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review_id",
                        "description": "The unique identifier of the review.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": {
            "put": {
                "summary": "Dismiss a review for a pull request",
                "description": "Dismisses a specified review on a pull request.\n\n> [!NOTE]\n> To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/dismiss-review",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review_id",
                        "description": "The unique identifier of the review.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "description": "The message for the pull request review dismissal"
                                    },
                                    "event": {
                                        "type": "string",
                                        "example": "\"DISMISS\"",
                                        "enum": [
                                            "DISMISS"
                                        ]
                                    }
                                },
                                "required": [
                                    "message"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "message": "You are dismissed",
                                        "event": "DISMISS"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": {
            "post": {
                "summary": "Submit a review for a pull request",
                "description": "Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see \"[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/submit-review",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review_id",
                        "description": "The unique identifier of the review.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The body text of the pull request review"
                                    },
                                    "event": {
                                        "type": "string",
                                        "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.",
                                        "enum": [
                                            "APPROVE",
                                            "REQUEST_CHANGES",
                                            "COMMENT"
                                        ]
                                    }
                                },
                                "required": [
                                    "event"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Here is the body for the review.",
                                        "event": "REQUEST_CHANGES"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch": {
            "put": {
                "summary": "Update a pull request branch",
                "description": "Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.\nNote: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.",
                "tags": [
                    "pulls"
                ],
                "operationId": "pulls/update-branch",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pull_number",
                        "description": "The number that identifies the pull request.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "expected_head_sha": {
                                        "type": "string",
                                        "description": "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://docs.github.com/rest/commits/commits#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "expected_head_sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/readme": {
            "get": {
                "summary": "Get a repository README",
                "description": "Gets the preferred README for a repository.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.\n- **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-readme",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The name of the commit/branch/tag. Default: the repository\u2019s default branch.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/readme/{dir}": {
            "get": {
                "summary": "Get a repository README for a directory",
                "description": "Gets the README from a repository directory.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.\n- **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-readme-in-directory",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dir",
                        "description": "The alternate path to look for a README file",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "ref",
                        "description": "The name of the commit/branch/tag. Default: the repository\u2019s default branch.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/releases": {
            "get": {
                "summary": "List releases",
                "description": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-releases",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a release",
                "description": "Users with push access to the repository can create a release.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-release",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "tag_name": {
                                        "type": "string",
                                        "description": "The name of the tag."
                                    },
                                    "target_commitish": {
                                        "type": "string",
                                        "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the release."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "Text describing the contents of the tag."
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "`true` to create a draft (unpublished) release, `false` to create a published one.",
                                        "default": false
                                    },
                                    "prerelease": {
                                        "type": "boolean",
                                        "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
                                        "default": false
                                    },
                                    "discussion_category_name": {
                                        "type": "string",
                                        "description": "If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see \"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\""
                                    },
                                    "generate_release_notes": {
                                        "type": "boolean",
                                        "description": "Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.",
                                        "default": false
                                    },
                                    "make_latest": {
                                        "type": "string",
                                        "description": "Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.",
                                        "enum": [
                                            "true",
                                            "false",
                                            "legacy"
                                        ],
                                        "default": "true"
                                    }
                                },
                                "required": [
                                    "tag_name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "tag_name": "v1.0.0",
                                        "target_commitish": "master",
                                        "name": "v1.0.0",
                                        "body": "Description of the release",
                                        "draft": false,
                                        "prerelease": false,
                                        "generate_release_notes": false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/releases/assets/{asset_id}": {
            "get": {
                "summary": "Get a release asset",
                "description": "To download the asset's binary content:\n\n- If within a browser, fetch the location specified in the `browser_download_url` key provided in the response.\n- Alternatively, set the `Accept` header of the request to \n  [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types). \n  The API will either redirect the client to the location, or stream it directly if possible.\n  API clients should handle both a `200` or `302` response.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-release-asset",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asset_id",
                        "description": "The unique identifier of the asset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a release asset",
                "description": "Users with push access to the repository can edit a release asset.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-release-asset",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asset_id",
                        "description": "The unique identifier of the asset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The file name of the asset."
                                    },
                                    "label": {
                                        "type": "string",
                                        "description": "An alternate short description of the asset. Used in place of the filename."
                                    },
                                    "state": {
                                        "type": "string",
                                        "example": "\"uploaded\""
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "foo-1.0.0-osx.zip",
                                        "label": "Mac binary"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a release asset",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-release-asset",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asset_id",
                        "description": "The unique identifier of the asset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/releases/generate-notes": {
            "post": {
                "summary": "Generate release notes content for a release",
                "description": "Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/generate-release-notes",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "tag_name": {
                                        "type": "string",
                                        "description": "The tag name for the release. This can be an existing tag or a new one."
                                    },
                                    "target_commitish": {
                                        "type": "string",
                                        "description": "Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists."
                                    },
                                    "previous_tag_name": {
                                        "type": "string",
                                        "description": "The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release."
                                    },
                                    "configuration_file_path": {
                                        "type": "string",
                                        "description": "Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used."
                                    }
                                },
                                "required": [
                                    "tag_name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "tag_name": "v1.0.0",
                                        "target_commitish": "main",
                                        "previous_tag_name": "v0.9.2",
                                        "configuration_file_path": ".github/custom_release_config.yml"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/releases/latest": {
            "get": {
                "summary": "Get the latest release",
                "description": "View the latest published full release for the repository.\n\nThe latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-latest-release",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/releases/tags/{tag}": {
            "get": {
                "summary": "Get a release by tag name",
                "description": "Get a published release with the specified tag.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-release-by-tag",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tag",
                        "description": "tag parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/releases/{release_id}": {
            "get": {
                "summary": "Get a release",
                "description": "Gets a public release with the specified release ID.\n\n> [!NOTE]\n> This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see \"[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-release",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "release_id",
                        "description": "The unique identifier of the release.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a release",
                "description": "Users with push access to the repository can edit a release.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-release",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "release_id",
                        "description": "The unique identifier of the release.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "tag_name": {
                                        "type": "string",
                                        "description": "The name of the tag."
                                    },
                                    "target_commitish": {
                                        "type": "string",
                                        "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the release."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "Text describing the contents of the tag."
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "`true` makes the release a draft, and `false` publishes the release."
                                    },
                                    "prerelease": {
                                        "type": "boolean",
                                        "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release."
                                    },
                                    "make_latest": {
                                        "type": "string",
                                        "description": "Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.",
                                        "enum": [
                                            "true",
                                            "false",
                                            "legacy"
                                        ],
                                        "default": true
                                    },
                                    "discussion_category_name": {
                                        "type": "string",
                                        "description": "If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see \"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\""
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "tag_name": "v1.0.0",
                                        "target_commitish": "master",
                                        "name": "v1.0.0",
                                        "body": "Description of the release",
                                        "draft": false,
                                        "prerelease": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a release",
                "description": "Users with push access to the repository can delete a release.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-release",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "release_id",
                        "description": "The unique identifier of the release.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/releases/{release_id}/assets": {
            "get": {
                "summary": "List release assets",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-release-assets",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "release_id",
                        "description": "The unique identifier of the release.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Upload a release asset",
                "description": "This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\nthe response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.\n\nYou need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n\nMost libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: \n\n`application/zip`\n\nGitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\nyou'll still need to pass your authentication to be able to upload an asset.\n\nWhen an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n\n**Notes:**\n*   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)\"\nendpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).\n*   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). \n*   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/upload-release-asset",
                "servers": [
                    {
                        "url": "https://uploads.github.com",
                        "description": "The URL origin (protocol + host name + port) is included in `upload_url` returned in the response of the \"Create a release\" endpoint"
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "release_id",
                        "description": "The unique identifier of the release.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary",
                                "description": "The raw file data"
                            },
                            "examples": {
                                "default": {
                                    "value": "@example.zip"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/releases/{release_id}/reactions": {
            "get": {
                "summary": "List reactions for a release",
                "description": "List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/list-for-release",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "release_id",
                        "description": "The unique identifier of the release.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "content",
                        "description": "Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a release.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "+1",
                                "laugh",
                                "heart",
                                "hooray",
                                "rocket",
                                "eyes"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create reaction for a release",
                "description": "Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a `Status: 200 OK` means that you already added the reaction type to this release.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/create-for-release",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "release_id",
                        "description": "The unique identifier of the release.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release.",
                                        "enum": [
                                            "+1",
                                            "laugh",
                                            "heart",
                                            "hooray",
                                            "rocket",
                                            "eyes"
                                        ]
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "heart"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}": {
            "delete": {
                "summary": "Delete a release reaction",
                "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.\n\nDelete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release).",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/delete-for-release",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "release_id",
                        "description": "The unique identifier of the release.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "reaction_id",
                        "description": "The unique identifier of the reaction.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/rules/branches/{branch}": {
            "get": {
                "summary": "Get rules for a branch",
                "description": "Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply\nto a branch with that name will be returned. All active rules that apply will be returned, regardless of the level\nat which they are configured (e.g. repository or organization). Rules in rulesets with \"evaluate\" or \"disabled\"\nenforcement statuses are not returned.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-branch-rules",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branch",
                        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/rulesets": {
            "get": {
                "summary": "Get all repository rulesets",
                "description": "Get all the rulesets for a repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-repo-rulesets",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "includes_parents",
                        "description": "Include rulesets configured at higher levels that apply to this repository",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "targets",
                        "description": "A comma-separated list of rule targets to filter by.\nIf provided, only rulesets that apply to the specified targets will be returned.\nFor example, `branch,tag,push`.\n",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "branch,tag,push"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a repository ruleset",
                "description": "Create a ruleset for a repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-repo-ruleset",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the ruleset."
                                    },
                                    "target": {
                                        "type": "string",
                                        "description": "The target of the ruleset",
                                        "enum": [
                                            "branch",
                                            "tag",
                                            "push"
                                        ],
                                        "default": "branch"
                                    },
                                    "enforcement": {
                                        "type": "string",
                                        "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).",
                                        "enum": [
                                            "disabled",
                                            "active",
                                            "evaluate"
                                        ]
                                    },
                                    "bypass_actors": {
                                        "type": "array",
                                        "description": "The actors that can bypass the rules in this ruleset",
                                        "items": {
                                            "title": "Repository Ruleset Bypass Actor",
                                            "type": "object",
                                            "description": "An actor that can bypass rules in a ruleset",
                                            "required": [
                                                "actor_type"
                                            ],
                                            "properties": {
                                                "actor_id": {
                                                    "type": "integer",
                                                    "nullable": true,
                                                    "description": "The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories."
                                                },
                                                "actor_type": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Integration",
                                                        "OrganizationAdmin",
                                                        "RepositoryRole",
                                                        "Team",
                                                        "DeployKey"
                                                    ],
                                                    "description": "The type of actor that can bypass a ruleset."
                                                },
                                                "bypass_mode": {
                                                    "type": "string",
                                                    "description": "When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.",
                                                    "enum": [
                                                        "always",
                                                        "pull_request"
                                                    ],
                                                    "default": "always"
                                                }
                                            }
                                        }
                                    },
                                    "conditions": {
                                        "title": "Repository ruleset conditions for ref names",
                                        "type": "object",
                                        "description": "Parameters for a repository ruleset ref name condition",
                                        "properties": {
                                            "ref_name": {
                                                "type": "object",
                                                "properties": {
                                                    "include": {
                                                        "type": "array",
                                                        "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "exclude": {
                                                        "type": "array",
                                                        "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "rules": {
                                        "type": "array",
                                        "description": "An array of rules within the ruleset.",
                                        "items": {
                                            "title": "Repository Rule",
                                            "type": "object",
                                            "description": "A repository rule.",
                                            "oneOf": [
                                                {
                                                    "title": "creation",
                                                    "description": "Only allow users with bypass permission to create matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "creation"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "update",
                                                    "description": "Only allow users with bypass permission to update matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "update"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "update_allows_fetch_and_merge": {
                                                                    "type": "boolean",
                                                                    "description": "Branch can pull changes from its upstream repository"
                                                                }
                                                            },
                                                            "required": [
                                                                "update_allows_fetch_and_merge"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "deletion",
                                                    "description": "Only allow users with bypass permissions to delete matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "deletion"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_linear_history",
                                                    "description": "Prevent merge commits from being pushed to matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_linear_history"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "merge_queue",
                                                    "description": "Merges must be performed via a merge queue.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "merge_queue"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "check_response_timeout_minutes": {
                                                                    "type": "integer",
                                                                    "description": "Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed",
                                                                    "minimum": 1,
                                                                    "maximum": 360
                                                                },
                                                                "grouping_strategy": {
                                                                    "type": "string",
                                                                    "description": "When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.",
                                                                    "enum": [
                                                                        "ALLGREEN",
                                                                        "HEADGREEN"
                                                                    ]
                                                                },
                                                                "max_entries_to_build": {
                                                                    "type": "integer",
                                                                    "description": "Limit the number of queued pull requests requesting checks and workflow runs at the same time.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "max_entries_to_merge": {
                                                                    "type": "integer",
                                                                    "description": "The maximum number of PRs that will be merged together in a group.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "merge_method": {
                                                                    "type": "string",
                                                                    "description": "Method to use when merging changes from queued pull requests.",
                                                                    "enum": [
                                                                        "MERGE",
                                                                        "SQUASH",
                                                                        "REBASE"
                                                                    ]
                                                                },
                                                                "min_entries_to_merge": {
                                                                    "type": "integer",
                                                                    "description": "The minimum number of PRs that will be merged together in a group.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "min_entries_to_merge_wait_minutes": {
                                                                    "type": "integer",
                                                                    "description": "The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.",
                                                                    "minimum": 0,
                                                                    "maximum": 360
                                                                }
                                                            },
                                                            "required": [
                                                                "check_response_timeout_minutes",
                                                                "grouping_strategy",
                                                                "max_entries_to_build",
                                                                "max_entries_to_merge",
                                                                "merge_method",
                                                                "min_entries_to_merge",
                                                                "min_entries_to_merge_wait_minutes"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_deployments",
                                                    "description": "Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_deployments"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "required_deployment_environments": {
                                                                    "type": "array",
                                                                    "description": "The environments that must be successfully deployed to before branches can be merged.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "required_deployment_environments"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_signatures",
                                                    "description": "Commits pushed to matching refs must have verified signatures.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_signatures"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "pull_request",
                                                    "description": "Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "pull_request"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "allowed_merge_methods": {
                                                                    "type": "array",
                                                                    "description": "Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.",
                                                                    "items": {
                                                                        "type": "string",
                                                                        "enum": [
                                                                            "merge",
                                                                            "squash",
                                                                            "rebase"
                                                                        ]
                                                                    }
                                                                },
                                                                "automatic_copilot_code_review_enabled": {
                                                                    "type": "boolean",
                                                                    "description": "> [!NOTE]\n> `automatic_copilot_code_review_enabled` is in beta and subject to change.\n\nAutomatically request review from Copilot for new pull requests, if the author has access to Copilot code review."
                                                                },
                                                                "dismiss_stale_reviews_on_push": {
                                                                    "type": "boolean",
                                                                    "description": "New, reviewable commits pushed will dismiss previous pull request review approvals."
                                                                },
                                                                "require_code_owner_review": {
                                                                    "type": "boolean",
                                                                    "description": "Require an approving review in pull requests that modify files that have a designated code owner."
                                                                },
                                                                "require_last_push_approval": {
                                                                    "type": "boolean",
                                                                    "description": "Whether the most recent reviewable push must be approved by someone other than the person who pushed it."
                                                                },
                                                                "required_approving_review_count": {
                                                                    "type": "integer",
                                                                    "description": "The number of approving reviews that are required before a pull request can be merged.",
                                                                    "minimum": 0,
                                                                    "maximum": 10
                                                                },
                                                                "required_review_thread_resolution": {
                                                                    "type": "boolean",
                                                                    "description": "All conversations on code must be resolved before a pull request can be merged."
                                                                }
                                                            },
                                                            "required": [
                                                                "dismiss_stale_reviews_on_push",
                                                                "require_code_owner_review",
                                                                "require_last_push_approval",
                                                                "required_approving_review_count",
                                                                "required_review_thread_resolution"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_status_checks",
                                                    "description": "Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_status_checks"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "do_not_enforce_on_create": {
                                                                    "type": "boolean",
                                                                    "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                                                                },
                                                                "required_status_checks": {
                                                                    "type": "array",
                                                                    "description": "Status checks that are required.",
                                                                    "items": {
                                                                        "title": "StatusCheckConfiguration",
                                                                        "description": "Required status check",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "context": {
                                                                                "type": "string",
                                                                                "description": "The status check context name that must be present on the commit."
                                                                            },
                                                                            "integration_id": {
                                                                                "type": "integer",
                                                                                "description": "The optional integration ID that this status check must originate from."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "context"
                                                                        ]
                                                                    }
                                                                },
                                                                "strict_required_status_checks_policy": {
                                                                    "type": "boolean",
                                                                    "description": "Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled."
                                                                }
                                                            },
                                                            "required": [
                                                                "required_status_checks",
                                                                "strict_required_status_checks_policy"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "non_fast_forward",
                                                    "description": "Prevent users with push access from force pushing to refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "non_fast_forward"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "commit_message_pattern",
                                                    "description": "Parameters to be used for the commit_message_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "commit_message_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "commit_author_email_pattern",
                                                    "description": "Parameters to be used for the commit_author_email_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "commit_author_email_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "committer_email_pattern",
                                                    "description": "Parameters to be used for the committer_email_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "committer_email_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "branch_name_pattern",
                                                    "description": "Parameters to be used for the branch_name_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "branch_name_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "tag_name_pattern",
                                                    "description": "Parameters to be used for the tag_name_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "tag_name_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "file_path_restriction",
                                                    "description": "Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "file_path_restriction"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "restricted_file_paths": {
                                                                    "type": "array",
                                                                    "description": "The file paths that are restricted from being pushed to the commit graph.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "restricted_file_paths"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "max_file_path_length",
                                                    "description": "Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "max_file_path_length"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "max_file_path_length": {
                                                                    "type": "integer",
                                                                    "description": "The maximum amount of characters allowed in file paths.",
                                                                    "minimum": 1,
                                                                    "maximum": 256
                                                                }
                                                            },
                                                            "required": [
                                                                "max_file_path_length"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "file_extension_restriction",
                                                    "description": "Prevent commits that include files with specified file extensions from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "file_extension_restriction"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "restricted_file_extensions": {
                                                                    "type": "array",
                                                                    "description": "The file extensions that are restricted from being pushed to the commit graph.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "restricted_file_extensions"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "max_file_size",
                                                    "description": "Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "max_file_size"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "max_file_size": {
                                                                    "type": "integer",
                                                                    "description": "The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).",
                                                                    "minimum": 1,
                                                                    "maximum": 100
                                                                }
                                                            },
                                                            "required": [
                                                                "max_file_size"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "workflows",
                                                    "description": "Require all changes made to a targeted branch to pass the specified workflows before they can be merged.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "workflows"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "do_not_enforce_on_create": {
                                                                    "type": "boolean",
                                                                    "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                                                                },
                                                                "workflows": {
                                                                    "type": "array",
                                                                    "description": "Workflows that must pass for this rule to pass.",
                                                                    "items": {
                                                                        "title": "WorkflowFileReference",
                                                                        "description": "A workflow that must run for this rule to pass",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "path": {
                                                                                "type": "string",
                                                                                "description": "The path to the workflow file"
                                                                            },
                                                                            "ref": {
                                                                                "type": "string",
                                                                                "description": "The ref (branch or tag) of the workflow file to use"
                                                                            },
                                                                            "repository_id": {
                                                                                "type": "integer",
                                                                                "description": "The ID of the repository where the workflow is defined"
                                                                            },
                                                                            "sha": {
                                                                                "type": "string",
                                                                                "description": "The commit SHA of the workflow file to use"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "path",
                                                                            "repository_id"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "workflows"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "code_scanning",
                                                    "description": "Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "code_scanning"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "code_scanning_tools": {
                                                                    "type": "array",
                                                                    "description": "Tools that must provide code scanning results for this rule to pass.",
                                                                    "items": {
                                                                        "title": "CodeScanningTool",
                                                                        "description": "A tool that must provide code scanning results for this rule to pass.",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "alerts_threshold": {
                                                                                "type": "string",
                                                                                "description": "The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                                                                "enum": [
                                                                                    "none",
                                                                                    "errors",
                                                                                    "errors_and_warnings",
                                                                                    "all"
                                                                                ]
                                                                            },
                                                                            "security_alerts_threshold": {
                                                                                "type": "string",
                                                                                "description": "The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                                                                "enum": [
                                                                                    "none",
                                                                                    "critical",
                                                                                    "high_or_higher",
                                                                                    "medium_or_higher",
                                                                                    "all"
                                                                                ]
                                                                            },
                                                                            "tool": {
                                                                                "type": "string",
                                                                                "description": "The name of a code scanning tool"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "alerts_threshold",
                                                                            "security_alerts_threshold",
                                                                            "tool"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "code_scanning_tools"
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "name",
                                    "enforcement"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "super cool ruleset",
                                        "target": "branch",
                                        "enforcement": "active",
                                        "bypass_actors": [
                                            {
                                                "actor_id": 234,
                                                "actor_type": "Team",
                                                "bypass_mode": "always"
                                            }
                                        ],
                                        "conditions": {
                                            "ref_name": {
                                                "include": [
                                                    "refs/heads/main",
                                                    "refs/heads/master"
                                                ],
                                                "exclude": [
                                                    "refs/heads/dev*"
                                                ]
                                            }
                                        },
                                        "rules": [
                                            {
                                                "type": "commit_author_email_pattern",
                                                "parameters": {
                                                    "operator": "contains",
                                                    "pattern": "github"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/rulesets/rule-suites": {
            "get": {
                "summary": "List repository rule suites",
                "description": "Lists suites of rule evaluations at the repository level.\nFor more information, see \"[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-repo-rule-suites",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "description": "The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "time_period",
                        "description": "The time period to filter by.\n\nFor example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "hour",
                                "day",
                                "week",
                                "month"
                            ],
                            "default": "day"
                        }
                    },
                    {
                        "name": "actor_name",
                        "description": "The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rule_suite_result",
                        "description": "The rule results to filter on. When specified, only suites with this result will be returned.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pass",
                                "fail",
                                "bypass",
                                "all"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}": {
            "get": {
                "summary": "Get a repository rule suite",
                "description": "Gets information about a suite of rule evaluations from within a repository.\nFor more information, see \"[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets).\"",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-repo-rule-suite",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rule_suite_id",
                        "description": "The unique identifier of the rule suite result.\nTo get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)\nfor repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)\nfor organizations.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/rulesets/{ruleset_id}": {
            "get": {
                "summary": "Get a repository ruleset",
                "description": "Get a ruleset for a repository.\n\n**Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user\nmaking the API request has write access to the ruleset.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-repo-ruleset",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "includes_parents",
                        "description": "Include rulesets configured at higher levels that apply to this repository",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ]
            },
            "put": {
                "summary": "Update a repository ruleset",
                "description": "Update a ruleset for a repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/update-repo-ruleset",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the ruleset."
                                    },
                                    "target": {
                                        "type": "string",
                                        "description": "The target of the ruleset",
                                        "enum": [
                                            "branch",
                                            "tag",
                                            "push"
                                        ]
                                    },
                                    "enforcement": {
                                        "type": "string",
                                        "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).",
                                        "enum": [
                                            "disabled",
                                            "active",
                                            "evaluate"
                                        ]
                                    },
                                    "bypass_actors": {
                                        "type": "array",
                                        "description": "The actors that can bypass the rules in this ruleset",
                                        "items": {
                                            "title": "Repository Ruleset Bypass Actor",
                                            "type": "object",
                                            "description": "An actor that can bypass rules in a ruleset",
                                            "required": [
                                                "actor_type"
                                            ],
                                            "properties": {
                                                "actor_id": {
                                                    "type": "integer",
                                                    "nullable": true,
                                                    "description": "The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories."
                                                },
                                                "actor_type": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Integration",
                                                        "OrganizationAdmin",
                                                        "RepositoryRole",
                                                        "Team",
                                                        "DeployKey"
                                                    ],
                                                    "description": "The type of actor that can bypass a ruleset."
                                                },
                                                "bypass_mode": {
                                                    "type": "string",
                                                    "description": "When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.",
                                                    "enum": [
                                                        "always",
                                                        "pull_request"
                                                    ],
                                                    "default": "always"
                                                }
                                            }
                                        }
                                    },
                                    "conditions": {
                                        "title": "Repository ruleset conditions for ref names",
                                        "type": "object",
                                        "description": "Parameters for a repository ruleset ref name condition",
                                        "properties": {
                                            "ref_name": {
                                                "type": "object",
                                                "properties": {
                                                    "include": {
                                                        "type": "array",
                                                        "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "exclude": {
                                                        "type": "array",
                                                        "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "rules": {
                                        "description": "An array of rules within the ruleset.",
                                        "type": "array",
                                        "items": {
                                            "title": "Repository Rule",
                                            "type": "object",
                                            "description": "A repository rule.",
                                            "oneOf": [
                                                {
                                                    "title": "creation",
                                                    "description": "Only allow users with bypass permission to create matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "creation"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "update",
                                                    "description": "Only allow users with bypass permission to update matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "update"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "update_allows_fetch_and_merge": {
                                                                    "type": "boolean",
                                                                    "description": "Branch can pull changes from its upstream repository"
                                                                }
                                                            },
                                                            "required": [
                                                                "update_allows_fetch_and_merge"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "deletion",
                                                    "description": "Only allow users with bypass permissions to delete matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "deletion"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_linear_history",
                                                    "description": "Prevent merge commits from being pushed to matching refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_linear_history"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "merge_queue",
                                                    "description": "Merges must be performed via a merge queue.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "merge_queue"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "check_response_timeout_minutes": {
                                                                    "type": "integer",
                                                                    "description": "Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed",
                                                                    "minimum": 1,
                                                                    "maximum": 360
                                                                },
                                                                "grouping_strategy": {
                                                                    "type": "string",
                                                                    "description": "When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.",
                                                                    "enum": [
                                                                        "ALLGREEN",
                                                                        "HEADGREEN"
                                                                    ]
                                                                },
                                                                "max_entries_to_build": {
                                                                    "type": "integer",
                                                                    "description": "Limit the number of queued pull requests requesting checks and workflow runs at the same time.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "max_entries_to_merge": {
                                                                    "type": "integer",
                                                                    "description": "The maximum number of PRs that will be merged together in a group.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "merge_method": {
                                                                    "type": "string",
                                                                    "description": "Method to use when merging changes from queued pull requests.",
                                                                    "enum": [
                                                                        "MERGE",
                                                                        "SQUASH",
                                                                        "REBASE"
                                                                    ]
                                                                },
                                                                "min_entries_to_merge": {
                                                                    "type": "integer",
                                                                    "description": "The minimum number of PRs that will be merged together in a group.",
                                                                    "minimum": 0,
                                                                    "maximum": 100
                                                                },
                                                                "min_entries_to_merge_wait_minutes": {
                                                                    "type": "integer",
                                                                    "description": "The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.",
                                                                    "minimum": 0,
                                                                    "maximum": 360
                                                                }
                                                            },
                                                            "required": [
                                                                "check_response_timeout_minutes",
                                                                "grouping_strategy",
                                                                "max_entries_to_build",
                                                                "max_entries_to_merge",
                                                                "merge_method",
                                                                "min_entries_to_merge",
                                                                "min_entries_to_merge_wait_minutes"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_deployments",
                                                    "description": "Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_deployments"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "required_deployment_environments": {
                                                                    "type": "array",
                                                                    "description": "The environments that must be successfully deployed to before branches can be merged.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "required_deployment_environments"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_signatures",
                                                    "description": "Commits pushed to matching refs must have verified signatures.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_signatures"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "pull_request",
                                                    "description": "Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "pull_request"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "allowed_merge_methods": {
                                                                    "type": "array",
                                                                    "description": "Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.",
                                                                    "items": {
                                                                        "type": "string",
                                                                        "enum": [
                                                                            "merge",
                                                                            "squash",
                                                                            "rebase"
                                                                        ]
                                                                    }
                                                                },
                                                                "automatic_copilot_code_review_enabled": {
                                                                    "type": "boolean",
                                                                    "description": "> [!NOTE]\n> `automatic_copilot_code_review_enabled` is in beta and subject to change.\n\nAutomatically request review from Copilot for new pull requests, if the author has access to Copilot code review."
                                                                },
                                                                "dismiss_stale_reviews_on_push": {
                                                                    "type": "boolean",
                                                                    "description": "New, reviewable commits pushed will dismiss previous pull request review approvals."
                                                                },
                                                                "require_code_owner_review": {
                                                                    "type": "boolean",
                                                                    "description": "Require an approving review in pull requests that modify files that have a designated code owner."
                                                                },
                                                                "require_last_push_approval": {
                                                                    "type": "boolean",
                                                                    "description": "Whether the most recent reviewable push must be approved by someone other than the person who pushed it."
                                                                },
                                                                "required_approving_review_count": {
                                                                    "type": "integer",
                                                                    "description": "The number of approving reviews that are required before a pull request can be merged.",
                                                                    "minimum": 0,
                                                                    "maximum": 10
                                                                },
                                                                "required_review_thread_resolution": {
                                                                    "type": "boolean",
                                                                    "description": "All conversations on code must be resolved before a pull request can be merged."
                                                                }
                                                            },
                                                            "required": [
                                                                "dismiss_stale_reviews_on_push",
                                                                "require_code_owner_review",
                                                                "require_last_push_approval",
                                                                "required_approving_review_count",
                                                                "required_review_thread_resolution"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "required_status_checks",
                                                    "description": "Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "required_status_checks"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "do_not_enforce_on_create": {
                                                                    "type": "boolean",
                                                                    "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                                                                },
                                                                "required_status_checks": {
                                                                    "type": "array",
                                                                    "description": "Status checks that are required.",
                                                                    "items": {
                                                                        "title": "StatusCheckConfiguration",
                                                                        "description": "Required status check",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "context": {
                                                                                "type": "string",
                                                                                "description": "The status check context name that must be present on the commit."
                                                                            },
                                                                            "integration_id": {
                                                                                "type": "integer",
                                                                                "description": "The optional integration ID that this status check must originate from."
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "context"
                                                                        ]
                                                                    }
                                                                },
                                                                "strict_required_status_checks_policy": {
                                                                    "type": "boolean",
                                                                    "description": "Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled."
                                                                }
                                                            },
                                                            "required": [
                                                                "required_status_checks",
                                                                "strict_required_status_checks_policy"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "non_fast_forward",
                                                    "description": "Prevent users with push access from force pushing to refs.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "non_fast_forward"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "commit_message_pattern",
                                                    "description": "Parameters to be used for the commit_message_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "commit_message_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "commit_author_email_pattern",
                                                    "description": "Parameters to be used for the commit_author_email_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "commit_author_email_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "committer_email_pattern",
                                                    "description": "Parameters to be used for the committer_email_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "committer_email_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "branch_name_pattern",
                                                    "description": "Parameters to be used for the branch_name_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "branch_name_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "tag_name_pattern",
                                                    "description": "Parameters to be used for the tag_name_pattern rule",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "tag_name_pattern"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "description": "How this rule will appear to users."
                                                                },
                                                                "negate": {
                                                                    "type": "boolean",
                                                                    "description": "If true, the rule will fail if the pattern matches."
                                                                },
                                                                "operator": {
                                                                    "type": "string",
                                                                    "description": "The operator to use for matching.",
                                                                    "enum": [
                                                                        "starts_with",
                                                                        "ends_with",
                                                                        "contains",
                                                                        "regex"
                                                                    ]
                                                                },
                                                                "pattern": {
                                                                    "type": "string",
                                                                    "description": "The pattern to match with."
                                                                }
                                                            },
                                                            "required": [
                                                                "operator",
                                                                "pattern"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "file_path_restriction",
                                                    "description": "Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "file_path_restriction"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "restricted_file_paths": {
                                                                    "type": "array",
                                                                    "description": "The file paths that are restricted from being pushed to the commit graph.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "restricted_file_paths"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "max_file_path_length",
                                                    "description": "Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "max_file_path_length"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "max_file_path_length": {
                                                                    "type": "integer",
                                                                    "description": "The maximum amount of characters allowed in file paths.",
                                                                    "minimum": 1,
                                                                    "maximum": 256
                                                                }
                                                            },
                                                            "required": [
                                                                "max_file_path_length"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "file_extension_restriction",
                                                    "description": "Prevent commits that include files with specified file extensions from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "file_extension_restriction"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "restricted_file_extensions": {
                                                                    "type": "array",
                                                                    "description": "The file extensions that are restricted from being pushed to the commit graph.",
                                                                    "items": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "restricted_file_extensions"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "max_file_size",
                                                    "description": "Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "max_file_size"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "max_file_size": {
                                                                    "type": "integer",
                                                                    "description": "The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).",
                                                                    "minimum": 1,
                                                                    "maximum": 100
                                                                }
                                                            },
                                                            "required": [
                                                                "max_file_size"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "workflows",
                                                    "description": "Require all changes made to a targeted branch to pass the specified workflows before they can be merged.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "workflows"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "do_not_enforce_on_create": {
                                                                    "type": "boolean",
                                                                    "description": "Allow repositories and branches to be created if a check would otherwise prohibit it."
                                                                },
                                                                "workflows": {
                                                                    "type": "array",
                                                                    "description": "Workflows that must pass for this rule to pass.",
                                                                    "items": {
                                                                        "title": "WorkflowFileReference",
                                                                        "description": "A workflow that must run for this rule to pass",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "path": {
                                                                                "type": "string",
                                                                                "description": "The path to the workflow file"
                                                                            },
                                                                            "ref": {
                                                                                "type": "string",
                                                                                "description": "The ref (branch or tag) of the workflow file to use"
                                                                            },
                                                                            "repository_id": {
                                                                                "type": "integer",
                                                                                "description": "The ID of the repository where the workflow is defined"
                                                                            },
                                                                            "sha": {
                                                                                "type": "string",
                                                                                "description": "The commit SHA of the workflow file to use"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "path",
                                                                            "repository_id"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "workflows"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "title": "code_scanning",
                                                    "description": "Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.",
                                                    "type": "object",
                                                    "required": [
                                                        "type"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "code_scanning"
                                                            ]
                                                        },
                                                        "parameters": {
                                                            "type": "object",
                                                            "properties": {
                                                                "code_scanning_tools": {
                                                                    "type": "array",
                                                                    "description": "Tools that must provide code scanning results for this rule to pass.",
                                                                    "items": {
                                                                        "title": "CodeScanningTool",
                                                                        "description": "A tool that must provide code scanning results for this rule to pass.",
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "alerts_threshold": {
                                                                                "type": "string",
                                                                                "description": "The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                                                                "enum": [
                                                                                    "none",
                                                                                    "errors",
                                                                                    "errors_and_warnings",
                                                                                    "all"
                                                                                ]
                                                                            },
                                                                            "security_alerts_threshold": {
                                                                                "type": "string",
                                                                                "description": "The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"",
                                                                                "enum": [
                                                                                    "none",
                                                                                    "critical",
                                                                                    "high_or_higher",
                                                                                    "medium_or_higher",
                                                                                    "all"
                                                                                ]
                                                                            },
                                                                            "tool": {
                                                                                "type": "string",
                                                                                "description": "The name of a code scanning tool"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "alerts_threshold",
                                                                            "security_alerts_threshold",
                                                                            "tool"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "code_scanning_tools"
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "super cool ruleset",
                                        "target": "branch",
                                        "enforcement": "active",
                                        "bypass_actors": [
                                            {
                                                "actor_id": 234,
                                                "actor_type": "Team",
                                                "bypass_mode": "always"
                                            }
                                        ],
                                        "conditions": {
                                            "ref_name": {
                                                "include": [
                                                    "refs/heads/main",
                                                    "refs/heads/master"
                                                ],
                                                "exclude": [
                                                    "refs/heads/dev*"
                                                ]
                                            }
                                        },
                                        "rules": [
                                            {
                                                "type": "commit_author_email_pattern",
                                                "parameters": {
                                                    "operator": "contains",
                                                    "pattern": "github"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a repository ruleset",
                "description": "Delete a ruleset for a repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-repo-ruleset",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history": {
            "get": {
                "summary": "Get repository ruleset history",
                "description": "Get the history of a repository ruleset.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-repo-ruleset-history",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}": {
            "get": {
                "summary": "Get repository ruleset version",
                "description": "Get a version of a repository ruleset.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-repo-ruleset-version",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ruleset_id",
                        "description": "The ID of the ruleset.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "version_id",
                        "description": "The ID of the version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/secret-scanning/alerts": {
            "get": {
                "summary": "List secret scanning alerts for a repository",
                "description": "Lists secret scanning alerts for an eligible repository, from newest to oldest.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "tags": [
                    "secret-scanning"
                ],
                "operationId": "secret-scanning/list-alerts-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "resolved"
                            ]
                        }
                    },
                    {
                        "name": "secret_type",
                        "in": "query",
                        "description": "A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See \"[Supported secret scanning patterns](https://docs.github.com/enterprise-cloud@latest/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)\" for a complete list of secret types.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resolution",
                        "in": "query",
                        "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "description": "A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "is_publicly_leaked",
                        "in": "query",
                        "description": "A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "is_multi_repo",
                        "in": "query",
                        "description": "A boolean value representing whether or not to filter alerts by the multi-repo tag being present.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
            "get": {
                "summary": "Get a secret scanning alert",
                "description": "Gets a single secret scanning alert detected in an eligible repository.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "tags": [
                    "secret-scanning"
                ],
                "operationId": "secret-scanning/get-alert",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a secret scanning alert",
                "description": "Updates the status of a secret scanning alert in an eligible repository.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "operationId": "secret-scanning/update-alert",
                "tags": [
                    "secret-scanning"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "description": "Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
                                        "type": "string",
                                        "enum": [
                                            "open",
                                            "resolved"
                                        ]
                                    },
                                    "resolution": {
                                        "type": "string",
                                        "description": "**Required when the `state` is `resolved`.** The reason for resolving the alert.",
                                        "nullable": true,
                                        "enum": [
                                            "false_positive",
                                            "wont_fix",
                                            "revoked",
                                            "used_in_tests"
                                        ]
                                    },
                                    "resolution_comment": {
                                        "description": "An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "required": [
                                    "state"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "state": "resolved",
                                        "resolution": "false_positive"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations": {
            "get": {
                "summary": "List locations for a secret scanning alert",
                "description": "Lists all locations for a given secret scanning alert for an eligible repository.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "tags": [
                    "secret-scanning"
                ],
                "operationId": "secret-scanning/list-locations-for-alert",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alert_number",
                        "in": "path",
                        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The security alert number.",
                            "readOnly": true
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/secret-scanning/push-protection-bypasses": {
            "post": {
                "summary": "Create a push protection bypass",
                "description": "Creates a bypass for a previously push protected secret.\n\nThe authenticated user must be the original author of the committed secret.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "operationId": "secret-scanning/create-push-protection-bypass",
                "tags": [
                    "secret-scanning"
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "description": "The reason for bypassing push protection.",
                                        "type": "string",
                                        "enum": [
                                            "false_positive",
                                            "used_in_tests",
                                            "will_fix_later"
                                        ]
                                    },
                                    "placeholder_id": {
                                        "description": "The ID of the push protection bypass placeholder. This value is returned on any push protected routes.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "reason",
                                    "placeholder_id"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "reason": "will_fix_later",
                                        "placeholder_id": "2k4dM4tseyC5lPIsjl5emX9sPNk"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/secret-scanning/scan-history": {
            "get": {
                "summary": "Get secret scanning scan history for a repository",
                "description": "Lists the latest default incremental and backfill scans by type for a repository. Scans from Copilot Secret Scanning are not included.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.",
                "tags": [
                    "secret-scanning"
                ],
                "operationId": "secret-scanning/get-scan-history",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/security-advisories": {
            "get": {
                "summary": "List repository security advisories",
                "description": "Lists security advisories in a repository.\n\nThe authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/list-repository-advisories",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "published"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of advisories to return per page. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 30
                        }
                    },
                    {
                        "name": "state",
                        "description": "Filter by state of the repository advisories. Only advisories of this state will be returned.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "triage",
                                "draft",
                                "published",
                                "closed"
                            ]
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a repository security advisory",
                "description": "Creates a new repository security advisory.\n\nIn order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/create-repository-advisory",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "summary": {
                                        "type": "string",
                                        "description": "A short summary of the advisory.",
                                        "maxLength": 1024
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A detailed description of what the advisory impacts.",
                                        "maxLength": 65535
                                    },
                                    "cve_id": {
                                        "type": "string",
                                        "description": "The Common Vulnerabilities and Exposures (CVE) ID.",
                                        "nullable": true
                                    },
                                    "vulnerabilities": {
                                        "type": "array",
                                        "description": "A product affected by the vulnerability detailed in a repository security advisory.",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "package": {
                                                    "description": "The name of the package affected by the vulnerability.",
                                                    "type": "object",
                                                    "properties": {
                                                        "ecosystem": {
                                                            "type": "string",
                                                            "description": "The package's language or package management ecosystem.",
                                                            "enum": [
                                                                "rubygems",
                                                                "npm",
                                                                "pip",
                                                                "maven",
                                                                "nuget",
                                                                "composer",
                                                                "go",
                                                                "rust",
                                                                "erlang",
                                                                "actions",
                                                                "pub",
                                                                "other",
                                                                "swift"
                                                            ]
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "description": "The unique package name within its ecosystem.",
                                                            "nullable": true
                                                        }
                                                    },
                                                    "required": [
                                                        "ecosystem"
                                                    ]
                                                },
                                                "vulnerable_version_range": {
                                                    "type": "string",
                                                    "description": "The range of the package versions affected by the vulnerability.",
                                                    "nullable": true
                                                },
                                                "patched_versions": {
                                                    "type": "string",
                                                    "description": "The package version(s) that resolve the vulnerability.",
                                                    "nullable": true
                                                },
                                                "vulnerable_functions": {
                                                    "type": "array",
                                                    "description": "The functions in the package that are affected.",
                                                    "nullable": true,
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "package"
                                            ],
                                            "additionalProperties": false
                                        }
                                    },
                                    "cwe_ids": {
                                        "type": "array",
                                        "description": "A list of Common Weakness Enumeration (CWE) IDs.",
                                        "nullable": true,
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "credits": {
                                        "type": "array",
                                        "description": "A list of users receiving credit for their participation in the security advisory.",
                                        "nullable": true,
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "login": {
                                                    "type": "string",
                                                    "description": "The username of the user credited."
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "description": "The type of credit the user is receiving.",
                                                    "enum": [
                                                        "analyst",
                                                        "finder",
                                                        "reporter",
                                                        "coordinator",
                                                        "remediation_developer",
                                                        "remediation_reviewer",
                                                        "remediation_verifier",
                                                        "tool",
                                                        "sponsor",
                                                        "other"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "login",
                                                "type"
                                            ],
                                            "additionalProperties": false
                                        }
                                    },
                                    "severity": {
                                        "type": "string",
                                        "description": "The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.",
                                        "nullable": true,
                                        "enum": [
                                            "critical",
                                            "high",
                                            "medium",
                                            "low"
                                        ]
                                    },
                                    "cvss_vector_string": {
                                        "type": "string",
                                        "description": "The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.",
                                        "nullable": true
                                    },
                                    "start_private_fork": {
                                        "type": "boolean",
                                        "description": "Whether to create a temporary private fork of the repository to collaborate on a fix.",
                                        "default": false
                                    }
                                },
                                "required": [
                                    "summary",
                                    "description",
                                    "vulnerabilities"
                                ],
                                "additionalProperties": false
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "summary": "A new important advisory",
                                        "description": "A more in-depth description of what the problem is.",
                                        "severity": "high",
                                        "cve_id": null,
                                        "vulnerabilities": [
                                            {
                                                "package": {
                                                    "name": "a-package",
                                                    "ecosystem": "npm"
                                                },
                                                "vulnerable_version_range": "< 1.0.0",
                                                "patched_versions": "1.0.0",
                                                "vulnerable_functions": [
                                                    "important_function"
                                                ]
                                            }
                                        ],
                                        "cwe_ids": [
                                            "CWE-1101",
                                            "CWE-20"
                                        ],
                                        "credits": [
                                            {
                                                "login": "monalisa",
                                                "type": "reporter"
                                            },
                                            {
                                                "login": "octocat",
                                                "type": "analyst"
                                            }
                                        ]
                                    }
                                },
                                "withVectorString": {
                                    "value": {
                                        "summary": "A new important advisory",
                                        "description": "A more in-depth description of what the problem is.",
                                        "cvss_vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
                                        "cve_id": null,
                                        "vulnerabilities": [
                                            {
                                                "package": {
                                                    "name": "a-package",
                                                    "ecosystem": "npm"
                                                },
                                                "vulnerable_version_range": "< 1.0.0",
                                                "patched_versions": "1.0.0",
                                                "vulnerable_functions": [
                                                    "important_function"
                                                ]
                                            }
                                        ],
                                        "cwe_ids": [
                                            "CWE-1101",
                                            "CWE-20"
                                        ],
                                        "credits": [
                                            {
                                                "login": "monalisa",
                                                "type": "reporter"
                                            },
                                            {
                                                "login": "octocat",
                                                "type": "analyst"
                                            }
                                        ]
                                    }
                                },
                                "minimal": {
                                    "value": {
                                        "summary": "A new important advisory",
                                        "description": "A more in-depth description of what the problem is.",
                                        "vulnerabilities": [
                                            {
                                                "package": {
                                                    "ecosystem": "npm"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/security-advisories/reports": {
            "post": {
                "summary": "Privately report a security vulnerability",
                "description": "Report a security vulnerability to the maintainers of the repository.\nSee \"[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\" for more information about private vulnerability reporting.",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/create-private-vulnerability-report",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "summary": {
                                        "type": "string",
                                        "description": "A short summary of the advisory.",
                                        "maxLength": 1024
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A detailed description of what the advisory impacts.",
                                        "maxLength": 65535
                                    },
                                    "vulnerabilities": {
                                        "type": "array",
                                        "description": "An array of products affected by the vulnerability detailed in a repository security advisory.",
                                        "nullable": true,
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "package": {
                                                    "description": "The name of the package affected by the vulnerability.",
                                                    "type": "object",
                                                    "properties": {
                                                        "ecosystem": {
                                                            "type": "string",
                                                            "description": "The package's language or package management ecosystem.",
                                                            "enum": [
                                                                "rubygems",
                                                                "npm",
                                                                "pip",
                                                                "maven",
                                                                "nuget",
                                                                "composer",
                                                                "go",
                                                                "rust",
                                                                "erlang",
                                                                "actions",
                                                                "pub",
                                                                "other",
                                                                "swift"
                                                            ]
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "description": "The unique package name within its ecosystem.",
                                                            "nullable": true
                                                        }
                                                    },
                                                    "required": [
                                                        "ecosystem"
                                                    ]
                                                },
                                                "vulnerable_version_range": {
                                                    "type": "string",
                                                    "description": "The range of the package versions affected by the vulnerability.",
                                                    "nullable": true
                                                },
                                                "patched_versions": {
                                                    "type": "string",
                                                    "description": "The package version(s) that resolve the vulnerability.",
                                                    "nullable": true
                                                },
                                                "vulnerable_functions": {
                                                    "type": "array",
                                                    "description": "The functions in the package that are affected.",
                                                    "nullable": true,
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "package"
                                            ],
                                            "additionalProperties": false
                                        }
                                    },
                                    "cwe_ids": {
                                        "type": "array",
                                        "description": "A list of Common Weakness Enumeration (CWE) IDs.",
                                        "nullable": true,
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "severity": {
                                        "type": "string",
                                        "description": "The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.",
                                        "nullable": true,
                                        "enum": [
                                            "critical",
                                            "high",
                                            "medium",
                                            "low"
                                        ]
                                    },
                                    "cvss_vector_string": {
                                        "type": "string",
                                        "description": "The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.",
                                        "nullable": true
                                    },
                                    "start_private_fork": {
                                        "type": "boolean",
                                        "description": "Whether to create a temporary private fork of the repository to collaborate on a fix.",
                                        "default": false
                                    }
                                },
                                "required": [
                                    "summary",
                                    "description"
                                ],
                                "additionalProperties": false
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "summary": "A newly discovered vulnerability",
                                        "description": "A more in-depth description of what the problem is.",
                                        "severity": "high",
                                        "vulnerabilities": [
                                            {
                                                "package": {
                                                    "name": "a-package",
                                                    "ecosystem": "npm"
                                                },
                                                "vulnerable_version_range": "< 1.0.0",
                                                "patched_versions": "1.0.0",
                                                "vulnerable_functions": [
                                                    "important_function"
                                                ]
                                            }
                                        ],
                                        "cwe_ids": [
                                            "CWE-123"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/security-advisories/{ghsa_id}": {
            "get": {
                "summary": "Get a repository security advisory",
                "description": "Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.\n\nAnyone can access any published security advisory on a public repository.\n\nThe authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a\ncollaborator on the security advisory.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/get-repository-advisory",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ghsa_id",
                        "description": "The GHSA (GitHub Security Advisory) identifier of the advisory.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a repository security advisory",
                "description": "Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.\n\nIn order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,\nor a collaborator on the repository security advisory.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/update-repository-advisory",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ghsa_id",
                        "description": "The GHSA (GitHub Security Advisory) identifier of the advisory.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "summary": {
                                        "type": "string",
                                        "description": "A short summary of the advisory.",
                                        "maxLength": 1024
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A detailed description of what the advisory impacts.",
                                        "maxLength": 65535
                                    },
                                    "cve_id": {
                                        "type": "string",
                                        "description": "The Common Vulnerabilities and Exposures (CVE) ID.",
                                        "nullable": true
                                    },
                                    "vulnerabilities": {
                                        "type": "array",
                                        "description": "A product affected by the vulnerability detailed in a repository security advisory.",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "package": {
                                                    "description": "The name of the package affected by the vulnerability.",
                                                    "type": "object",
                                                    "properties": {
                                                        "ecosystem": {
                                                            "type": "string",
                                                            "description": "The package's language or package management ecosystem.",
                                                            "enum": [
                                                                "rubygems",
                                                                "npm",
                                                                "pip",
                                                                "maven",
                                                                "nuget",
                                                                "composer",
                                                                "go",
                                                                "rust",
                                                                "erlang",
                                                                "actions",
                                                                "pub",
                                                                "other",
                                                                "swift"
                                                            ]
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "description": "The unique package name within its ecosystem.",
                                                            "nullable": true
                                                        }
                                                    },
                                                    "required": [
                                                        "ecosystem"
                                                    ]
                                                },
                                                "vulnerable_version_range": {
                                                    "type": "string",
                                                    "description": "The range of the package versions affected by the vulnerability.",
                                                    "nullable": true
                                                },
                                                "patched_versions": {
                                                    "type": "string",
                                                    "description": "The package version(s) that resolve the vulnerability.",
                                                    "nullable": true
                                                },
                                                "vulnerable_functions": {
                                                    "type": "array",
                                                    "description": "The functions in the package that are affected.",
                                                    "nullable": true,
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "required": [
                                                "package"
                                            ],
                                            "additionalProperties": false
                                        }
                                    },
                                    "cwe_ids": {
                                        "type": "array",
                                        "description": "A list of Common Weakness Enumeration (CWE) IDs.",
                                        "nullable": true,
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "credits": {
                                        "type": "array",
                                        "description": "A list of users receiving credit for their participation in the security advisory.",
                                        "nullable": true,
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "login": {
                                                    "type": "string",
                                                    "description": "The username of the user credited."
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "description": "The type of credit the user is receiving.",
                                                    "enum": [
                                                        "analyst",
                                                        "finder",
                                                        "reporter",
                                                        "coordinator",
                                                        "remediation_developer",
                                                        "remediation_reviewer",
                                                        "remediation_verifier",
                                                        "tool",
                                                        "sponsor",
                                                        "other"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "login",
                                                "type"
                                            ],
                                            "additionalProperties": false
                                        }
                                    },
                                    "severity": {
                                        "type": "string",
                                        "description": "The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.",
                                        "nullable": true,
                                        "enum": [
                                            "critical",
                                            "high",
                                            "medium",
                                            "low"
                                        ]
                                    },
                                    "cvss_vector_string": {
                                        "type": "string",
                                        "description": "The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.",
                                        "nullable": true
                                    },
                                    "state": {
                                        "type": "string",
                                        "description": "The state of the advisory.",
                                        "enum": [
                                            "published",
                                            "closed",
                                            "draft"
                                        ]
                                    },
                                    "collaborating_users": {
                                        "type": "array",
                                        "description": "A list of usernames who have been granted write access to the advisory.",
                                        "nullable": true,
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "collaborating_teams": {
                                        "type": "array",
                                        "description": "A list of team slugs which have been granted write access to the advisory.",
                                        "nullable": true,
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "additionalProperties": false
                            },
                            "examples": {
                                "default": {
                                    "summary": "Updating the severity and state.",
                                    "value": {
                                        "severity": "critical",
                                        "state": "published"
                                    }
                                },
                                "add_credit": {
                                    "summary": "To add a credit to an advisory, send the whole array of values.",
                                    "value": {
                                        "credits": [
                                            {
                                                "login": "monauser",
                                                "type": "remediation_developer"
                                            }
                                        ]
                                    }
                                },
                                "update_vvrs": {
                                    "summary": "To add vulnerable versions, include existing versions in the array.",
                                    "value": [
                                        {
                                            "package": {
                                                "ecosystem": "pip",
                                                "name": "a-package"
                                            },
                                            "vulnerable_version_range": ">= 1.0.0, < 1.0.1",
                                            "patched_versions": "1.0.1",
                                            "vulnerable_functions": [
                                                "function1"
                                            ]
                                        },
                                        {
                                            "package": {
                                                "ecosystem": "pip",
                                                "name": "another-package"
                                            },
                                            "vulnerable_version_range": ">= 1.0.0, < 1.0.2",
                                            "patched_versions": "1.0.2",
                                            "vulnerable_functions": [
                                                "function2"
                                            ]
                                        }
                                    ]
                                },
                                "invalid_state_transition": {
                                    "summary": "Example of an invalid state transition, from `published` to `draft`.",
                                    "value": {
                                        "state": "draft"
                                    }
                                },
                                "update_severity_with_cvss_set": {
                                    "summary": "Severity cannot be updated when the CVSS is already set.",
                                    "value": {
                                        "severity": "low"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve": {
            "post": {
                "summary": "Request a CVE for a repository security advisory",
                "description": "If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see \"[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional).\"\n\nYou may request a CVE for public repositories, but cannot do so for private repositories.\n\nIn order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/create-repository-advisory-cve-request",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ghsa_id",
                        "description": "The GHSA (GitHub Security Advisory) identifier of the advisory.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks": {
            "post": {
                "summary": "Create a temporary private fork",
                "description": "Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.\n\n> [!NOTE]\n> Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.",
                "tags": [
                    "security-advisories"
                ],
                "operationId": "security-advisories/create-fork",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ghsa_id",
                        "description": "The GHSA (GitHub Security Advisory) identifier of the advisory.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/stargazers": {
            "get": {
                "summary": "List stargazers",
                "description": "Lists the people that have starred the repository.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-stargazers-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/stats/code_frequency": {
            "get": {
                "summary": "Get the weekly commit activity",
                "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.\n\n> [!NOTE]\n> This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-code-frequency-stats",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/stats/commit_activity": {
            "get": {
                "summary": "Get the last year of commit activity",
                "description": "Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-commit-activity-stats",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/stats/contributors": {
            "get": {
                "summary": "Get all contributor commit activity",
                "description": "\nReturns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n\n*   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits\n\n> [!NOTE]\n> This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-contributors-stats",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/stats/participation": {
            "get": {
                "summary": "Get the weekly commit count",
                "description": "Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n\nThe array order is oldest week (index 0) to most recent week.\n\nThe most recent week is seven days ago at UTC midnight to today at UTC midnight.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-participation-stats",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/stats/punch_card": {
            "get": {
                "summary": "Get the hourly commit count for each day",
                "description": "Each array contains the day number, hour number, and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-punch-card-stats",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/statuses/{sha}": {
            "post": {
                "summary": "Create a commit status",
                "description": "Users with push access in a repository can create commit statuses for a given SHA.\n\nNote: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-commit-status",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sha",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "type": "string",
                                        "description": "The state of the status.",
                                        "enum": [
                                            "error",
                                            "failure",
                                            "pending",
                                            "success"
                                        ]
                                    },
                                    "target_url": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`"
                                    },
                                    "description": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "A short description of the status."
                                    },
                                    "context": {
                                        "type": "string",
                                        "description": "A string label to differentiate this status from the status of other systems. This field is case-insensitive.",
                                        "default": "default"
                                    }
                                },
                                "required": [
                                    "state"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "state": "success",
                                        "target_url": "https://example.com/build/status",
                                        "description": "The build succeeded!",
                                        "context": "continuous-integration/jenkins"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/subscribers": {
            "get": {
                "summary": "List watchers",
                "description": "Lists the people watching the specified repository.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-watchers-for-repo",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/subscription": {
            "get": {
                "summary": "Get a repository subscription",
                "description": "Gets information about whether the authenticated user is subscribed to the repository.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/get-repo-subscription",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set a repository subscription",
                "description": "If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/set-repo-subscription",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "subscribed": {
                                        "type": "boolean",
                                        "description": "Determines if notifications should be received from this repository."
                                    },
                                    "ignored": {
                                        "type": "boolean",
                                        "description": "Determines if all notifications should be blocked from this repository."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "subscribed": true,
                                        "ignored": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a repository subscription",
                "description": "This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/delete-repo-subscription",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/tags": {
            "get": {
                "summary": "List repository tags",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-tags",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/tags/protection": {
            "get": {
                "summary": "Closing down - List tag protection states for a repository",
                "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the \"[Repository Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)\" endpoint instead.\n\nThis returns the tag protection states of a repository.\n\nThis information is only available to repository administrators.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-tag-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            },
            "post": {
                "summary": "Closing down - Create a tag protection state for a repository",
                "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the \"[Repository Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)\" endpoint instead.\n\nThis creates a tag protection state for a repository.\nThis endpoint is only available to repository administrators.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-tag-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "pattern": {
                                        "type": "string",
                                        "description": "An optional glob pattern to match against when enforcing tag protection."
                                    }
                                },
                                "required": [
                                    "pattern"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "pattern": "v1.*"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/repos/{owner}/{repo}/tags/protection/{tag_protection_id}": {
            "delete": {
                "summary": "Closing down - Delete a tag protection state for a repository",
                "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the \"[Repository Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)\" endpoint instead.\n\nThis deletes a tag protection state for a repository.\nThis endpoint is only available to repository administrators.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/delete-tag-protection",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tag_protection_id",
                        "description": "The unique identifier of the tag protection.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/repos/{owner}/{repo}/tarball/{ref}": {
            "get": {
                "summary": "Download a repository archive (tar)",
                "description": "Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository\u2019s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n\n> [!NOTE]\n> For private repositories, these links are temporary and expire after five minutes.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/download-tarball-archive",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "path",
                        "required": true,
                        "x-multi-segment": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/teams": {
            "get": {
                "summary": "List repository teams",
                "description": "Lists the teams that have access to the specified repository and that are also visible to the authenticated user.\n\nFor a public repository, a team is listed only if that team added the public repository explicitly.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-teams",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/topics": {
            "get": {
                "summary": "Get all repository topics",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-all-topics",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            },
            "put": {
                "summary": "Replace all repository topics",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/replace-all-topics",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "names": {
                                        "type": "array",
                                        "description": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` will be saved as lowercase.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "names"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "names": [
                                            "octocat",
                                            "atom",
                                            "electron",
                                            "api"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/traffic/clones": {
            "get": {
                "summary": "Get repository clones",
                "description": "Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-clones",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per",
                        "description": "The time frame to display results for.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "day",
                                "week"
                            ],
                            "default": "day"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/traffic/popular/paths": {
            "get": {
                "summary": "Get top referral paths",
                "description": "Get the top 10 popular contents over the last 14 days.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-top-paths",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/traffic/popular/referrers": {
            "get": {
                "summary": "Get top referral sources",
                "description": "Get the top 10 referrers over the last 14 days.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-top-referrers",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/traffic/views": {
            "get": {
                "summary": "Get page views",
                "description": "Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/get-views",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per",
                        "description": "The time frame to display results for.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "day",
                                "week"
                            ],
                            "default": "day"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/transfer": {
            "post": {
                "summary": "Transfer a repository",
                "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/transfer",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "new_owner": {
                                        "type": "string",
                                        "description": "The username or organization name the repository will be transferred to."
                                    },
                                    "new_name": {
                                        "type": "string",
                                        "description": "The new name to be given to the repository."
                                    },
                                    "team_ids": {
                                        "type": "array",
                                        "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "new_owner"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "new_owner": "github",
                                        "team_ids": [
                                            12,
                                            345
                                        ],
                                        "new_name": "octorepo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repos/{owner}/{repo}/vulnerability-alerts": {
            "get": {
                "summary": "Check if vulnerability alerts are enabled for a repository",
                "description": "Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)\".",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/check-vulnerability-alerts",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Enable vulnerability alerts",
                "description": "Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)\".",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/enable-vulnerability-alerts",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Disable vulnerability alerts",
                "description": "Disables dependency alerts and the dependency graph for a repository.\nThe authenticated user must have admin access to the repository. For more information,\nsee \"[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)\".",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/disable-vulnerability-alerts",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{owner}/{repo}/zipball/{ref}": {
            "get": {
                "summary": "Download a repository archive (zip)",
                "description": "Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository\u2019s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n\n> [!NOTE]\n> For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/download-zipball-archive",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "path",
                        "required": true,
                        "x-multi-segment": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/repos/{template_owner}/{template_repo}/generate": {
            "post": {
                "summary": "Create a repository using a template",
                "description": "Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-using-template",
                "parameters": [
                    {
                        "name": "template_owner",
                        "description": "The account owner of the template repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "template_repo",
                        "description": "The name of the template repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "owner": {
                                        "type": "string",
                                        "description": "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the new repository."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "A short description of the new repository."
                                    },
                                    "include_all_branches": {
                                        "type": "boolean",
                                        "description": "Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.",
                                        "default": false
                                    },
                                    "private": {
                                        "type": "boolean",
                                        "description": "Either `true` to create a new private repository or `false` to create a new public one.",
                                        "default": false
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "owner": "octocat",
                                        "name": "Hello-World",
                                        "description": "This is your first repository",
                                        "include_all_branches": false,
                                        "private": false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories": {
            "get": {
                "summary": "List public repositories",
                "description": "Lists all public repositories in the order that they were created.\n\nNote:\n- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.\n- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-public",
                "parameters": [
                    {
                        "name": "since",
                        "description": "A repository ID. Only return repositories with an ID greater than this ID.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/search/code": {
            "get": {
                "summary": "Search code",
                "description": "Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\nConsiderations for code search:\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.\n\nThis endpoint requires you to authenticate and limits you to 10 requests per minute.",
                "tags": [
                    "search"
                ],
                "operationId": "search/code",
                "parameters": [
                    {
                        "name": "q",
                        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)\" for a detailed list of qualifiers.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "deprecated": true,
                        "description": "**This field is closing down.** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "indexed"
                            ]
                        }
                    },
                    {
                        "name": "order",
                        "description": "**This field is closing down.** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. ",
                        "in": "query",
                        "deprecated": true,
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "desc",
                                "asc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/search/commits": {
            "get": {
                "summary": "Search commits",
                "description": "Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`",
                "tags": [
                    "search"
                ],
                "operationId": "search/commits",
                "parameters": [
                    {
                        "name": "q",
                        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)\" for a detailed list of qualifiers.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "author-date",
                                "committer-date"
                            ]
                        }
                    },
                    {
                        "name": "order",
                        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "desc",
                                "asc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/search/issues": {
            "get": {
                "summary": "Search issues and pull requests",
                "description": "> [!WARNING]\n> **Notice:** Search for issues and pull requests will be overridden by advanced search on September 4, 2025.\n> You can read more about this change on [the GitHub blog](https://github.blog/changelog/2025-03-06-github-issues-projects-api-support-for-issues-advanced-search-and-more/).",
                "tags": [
                    "search"
                ],
                "operationId": "search/issues-and-pull-requests",
                "parameters": [
                    {
                        "name": "q",
                        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)\" for a detailed list of qualifiers.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "comments",
                                "reactions",
                                "reactions-+1",
                                "reactions--1",
                                "reactions-smile",
                                "reactions-thinking_face",
                                "reactions-heart",
                                "reactions-tada",
                                "interactions",
                                "created",
                                "updated"
                            ]
                        }
                    },
                    {
                        "name": "order",
                        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "desc",
                                "asc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "advanced_search",
                        "description": "Set to `true` to use advanced search.\nExample: `http://api.github.com/search/issues?q={query}&advanced_search=true`",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/search/labels": {
            "get": {
                "summary": "Search labels",
                "description": "Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\n`q=bug+defect+enhancement&repository_id=64778136`\n\nThe labels that best match the query appear first in the search results.",
                "tags": [
                    "search"
                ],
                "operationId": "search/labels",
                "parameters": [
                    {
                        "name": "repository_id",
                        "description": "The id of the repository.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "q",
                        "description": "The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ]
                        }
                    },
                    {
                        "name": "order",
                        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "desc",
                                "asc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/search/repositories": {
            "get": {
                "summary": "Search repositories",
                "description": "Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n\n`q=tetris+language:assembly&sort=stars&order=desc`\n\nThis query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.",
                "tags": [
                    "search"
                ],
                "operationId": "search/repos",
                "parameters": [
                    {
                        "name": "q",
                        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "stars",
                                "forks",
                                "help-wanted-issues",
                                "updated"
                            ]
                        }
                    },
                    {
                        "name": "order",
                        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "desc",
                                "asc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/search/topics": {
            "get": {
                "summary": "Search topics",
                "description": "Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See \"[Searching topics](https://docs.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n\nWhen searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n\n`q=ruby+is:featured`\n\nThis query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.",
                "tags": [
                    "search"
                ],
                "operationId": "search/topics",
                "parameters": [
                    {
                        "name": "q",
                        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/search/users": {
            "get": {
                "summary": "Search users",
                "description": "Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you're looking for a list of popular users, you might try this query:\n\n`q=tom+repos:%3E42+followers:%3E1000`\n\nThis query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.\n\nThis endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see \"[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search).\"",
                "tags": [
                    "search"
                ],
                "operationId": "search/users",
                "parameters": [
                    {
                        "name": "q",
                        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)\" for a detailed list of qualifiers.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "followers",
                                "repositories",
                                "joined"
                            ]
                        }
                    },
                    {
                        "name": "order",
                        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "desc",
                                "asc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/teams/{team_id}": {
            "get": {
                "summary": "Get a team (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/get-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            },
            "patch": {
                "summary": "Update a team (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.\n\nTo edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n> [!NOTE]\n> With nested teams, the `privacy` for parent teams cannot be `secret`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/update-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the team."
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "The description of the team."
                                    },
                                    "privacy": {
                                        "type": "string",
                                        "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.",
                                        "enum": [
                                            "secret",
                                            "closed"
                                        ]
                                    },
                                    "notification_setting": {
                                        "type": "string",
                                        "description": "The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: \n * `notifications_enabled` - team members receive notifications when the team is @mentioned.  \n * `notifications_disabled` - no one receives notifications.",
                                        "enum": [
                                            "notifications_enabled",
                                            "notifications_disabled"
                                        ]
                                    },
                                    "permission": {
                                        "type": "string",
                                        "description": "**Closing down notice**. The permission that new repositories will be added to the team with when none is specified.",
                                        "enum": [
                                            "pull",
                                            "push",
                                            "admin"
                                        ],
                                        "default": "pull"
                                    },
                                    "parent_team_id": {
                                        "type": "integer",
                                        "description": "The ID of a team to set as the parent team.",
                                        "nullable": true
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "new team name",
                                        "description": "new team description",
                                        "privacy": "closed",
                                        "notification_setting": "notifications_enabled"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Delete a team (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.\n\nTo delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/delete-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/discussions": {
            "get": {
                "summary": "List discussions (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.\n\nList all discussions on a team's page.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-discussions-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            },
            "post": {
                "summary": "Create a discussion (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.\n\nCreates a new discussion post on a team's page.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/create-discussion-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "The discussion post's title."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The discussion post's body text."
                                    },
                                    "private": {
                                        "type": "boolean",
                                        "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
                                        "default": false
                                    }
                                },
                                "required": [
                                    "title",
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "Our first team post",
                                        "body": "Hi! This is an area for us to collaborate as a team."
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/teams/{team_id}/discussions/{discussion_number}": {
            "get": {
                "summary": "Get a discussion (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.\n\nGet a specific discussion on a team's page.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/get-discussion-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            },
            "patch": {
                "summary": "Update a discussion (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.\n\nEdits the title and body text of a discussion post. Only the parameters you provide are updated.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/update-discussion-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "The discussion post's title."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The discussion post's body text."
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "Welcome to our first team post"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Delete a discussion (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.\n\nDelete a discussion from a team's page.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/delete-discussion-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/discussions/{discussion_number}/comments": {
            "get": {
                "summary": "List discussion comments (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.\n\nList all comments on a team discussion.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-discussion-comments-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            },
            "post": {
                "summary": "Create a discussion comment (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.\n\nCreates a new comment on a team discussion.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/create-discussion-comment-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The discussion comment's body text."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Do you like apples?"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
            "get": {
                "summary": "Get a discussion comment (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.\n\nGet a specific comment on a team discussion.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/get-discussion-comment-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            },
            "patch": {
                "summary": "Update a discussion comment (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.\n\nEdits the body text of a discussion comment.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/update-discussion-comment-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "body": {
                                        "type": "string",
                                        "description": "The discussion comment's body text."
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "body": "Do you like pineapples?"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Delete a discussion comment (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.\n\nDeletes a comment on a team discussion.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/delete-discussion-comment-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
            "get": {
                "summary": "List reactions for a team discussion comment (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint.\n\nList the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/list-for-team-discussion-comment-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "content",
                        "description": "Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "+1",
                                "-1",
                                "laugh",
                                "confused",
                                "heart",
                                "hooray",
                                "rocket",
                                "eyes"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            },
            "post": {
                "summary": "Create reaction for a team discussion comment (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Create reaction for a team discussion comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)\" endpoint.\n\nCreate a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/create-for-team-discussion-comment-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "comment_number",
                        "description": "The number that identifies the comment.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.",
                                        "enum": [
                                            "+1",
                                            "-1",
                                            "laugh",
                                            "confused",
                                            "heart",
                                            "hooray",
                                            "rocket",
                                            "eyes"
                                        ]
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "heart"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/teams/{team_id}/discussions/{discussion_number}/reactions": {
            "get": {
                "summary": "List reactions for a team discussion (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.\n\nList the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/list-for-team-discussion-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "content",
                        "description": "Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "+1",
                                "-1",
                                "laugh",
                                "confused",
                                "heart",
                                "hooray",
                                "rocket",
                                "eyes"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            },
            "post": {
                "summary": "Create reaction for a team discussion (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.\n\nCreate a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.",
                "tags": [
                    "reactions"
                ],
                "operationId": "reactions/create-for-team-discussion-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discussion_number",
                        "description": "The number that identifies the discussion.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "description": "The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.",
                                        "enum": [
                                            "+1",
                                            "-1",
                                            "laugh",
                                            "confused",
                                            "heart",
                                            "hooray",
                                            "rocket",
                                            "eyes"
                                        ]
                                    }
                                },
                                "required": [
                                    "content"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "content": "heart"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/teams/{team_id}/invitations": {
            "get": {
                "summary": "List pending team invitations (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.\n\nThe return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-pending-invitations-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/members": {
            "get": {
                "summary": "List team members (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint.\n\nTeam members will include the members of child teams.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-members-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "role",
                        "description": "Filters members returned by their role in the team.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "member",
                                "maintainer",
                                "all"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/members/{username}": {
            "get": {
                "summary": "Get team member (Legacy)",
                "description": "The \"Get team member\" endpoint (described below) is closing down.\n\nWe recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n\nTo list members in a team, the team must be visible to the authenticated user.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/get-member-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            },
            "put": {
                "summary": "Add team member (Legacy)",
                "description": "The \"Add team member\" endpoint (described below) is closing down.\n\nWe recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.\n\n> [!NOTE]\n> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/add-member-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            },
            "delete": {
                "summary": "Remove team member (Legacy)",
                "description": "The \"Remove team member\" endpoint (described below) is closing down.\n\nWe recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.\n\n> [!NOTE]\n> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/remove-member-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/memberships/{username}": {
            "get": {
                "summary": "Get team membership for a user (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.\n\nTeam members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/get-membership-for-user-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            },
            "put": {
                "summary": "Add or update team membership for a user (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nIf the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.\n\n> [!NOTE]\n> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\nIf the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/add-or-update-membership-for-user-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "description": "The role that this user should have in the team.",
                                        "enum": [
                                            "member",
                                            "maintainer"
                                        ],
                                        "default": "member"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Assign the member role for a user in a team",
                                    "value": {
                                        "role": "member"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Remove team membership for a user (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\n> [!NOTE]\n> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/remove-membership-for-user-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/projects": {
            "get": {
                "summary": "List team projects (Legacy)",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-projects-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/projects/{project_id}": {
            "get": {
                "summary": "Check team permissions for a project (Legacy)",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/check-permissions-for-project-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            },
            "put": {
                "summary": "Add or update team project permissions (Legacy)",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/add-or-update-project-permissions-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "permission": {
                                        "type": "string",
                                        "description": "The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
                                        "enum": [
                                            "read",
                                            "write",
                                            "admin"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example of setting permission to read",
                                    "value": {
                                        "permission": "read"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Remove a project from a team (Legacy)",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/remove-project-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "project_id",
                        "description": "The unique identifier of the project.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/repos": {
            "get": {
                "summary": "List team repositories (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-repos-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/repos/{owner}/{repo}": {
            "get": {
                "summary": "Check team permissions for a repository (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.\n\n> [!NOTE]\n> Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `Accept` header:",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/check-permissions-for-repo-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            },
            "put": {
                "summary": "Add or update team repository permissions (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)\" endpoint.\n\nTo add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/add-or-update-repo-permissions-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "permission": {
                                        "type": "string",
                                        "description": "The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
                                        "enum": [
                                            "pull",
                                            "push",
                                            "admin"
                                        ]
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example of setting permission to pull",
                                    "value": {
                                        "permission": "push"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "summary": "Remove a repository from a team (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.\n\nIf the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/remove-repo-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/teams/{team_id}/teams": {
            "get": {
                "summary": "List child teams (Legacy)",
                "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-child-legacy",
                "parameters": [
                    {
                        "name": "team_id",
                        "description": "The unique identifier of the team.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/user": {
            "get": {
                "summary": "Get the authenticated user",
                "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.",
                "tags": [
                    "users"
                ],
                "operationId": "users/get-authenticated",
                "parameters": []
            },
            "patch": {
                "summary": "Update the authenticated user",
                "description": "**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.",
                "tags": [
                    "users"
                ],
                "operationId": "users/update-authenticated",
                "parameters": [],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The new name of the user.",
                                        "type": "string",
                                        "example": "Omar Jahandar"
                                    },
                                    "email": {
                                        "description": "The publicly visible email address of the user.",
                                        "type": "string",
                                        "example": "omar@example.com"
                                    },
                                    "blog": {
                                        "description": "The new blog URL of the user.",
                                        "type": "string",
                                        "example": "blog.example.com"
                                    },
                                    "twitter_username": {
                                        "description": "The new Twitter username of the user.",
                                        "type": "string",
                                        "example": "therealomarj",
                                        "nullable": true
                                    },
                                    "company": {
                                        "description": "The new company of the user.",
                                        "type": "string",
                                        "example": "Acme corporation"
                                    },
                                    "location": {
                                        "description": "The new location of the user.",
                                        "type": "string",
                                        "example": "Berlin, Germany"
                                    },
                                    "hireable": {
                                        "description": "The new hiring availability of the user.",
                                        "type": "boolean"
                                    },
                                    "bio": {
                                        "description": "The new short biography of the user.",
                                        "type": "string"
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example of updating blog and name",
                                    "value": {
                                        "blog": "https://github.com/blog",
                                        "name": "monalisa octocat"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/blocks": {
            "get": {
                "summary": "List users blocked by the authenticated user",
                "description": "List the users you've blocked on your personal account.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-blocked-by-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/blocks/{username}": {
            "get": {
                "summary": "Check if a user is blocked by the authenticated user",
                "description": "Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.",
                "tags": [
                    "users"
                ],
                "operationId": "users/check-blocked",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Block a user",
                "description": "Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.",
                "tags": [
                    "users"
                ],
                "operationId": "users/block",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Unblock a user",
                "description": "Unblocks the given user and returns a 204.",
                "tags": [
                    "users"
                ],
                "operationId": "users/unblock",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/codespaces": {
            "get": {
                "summary": "List codespaces for the authenticated user",
                "description": "Lists the authenticated user's codespaces.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/list-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "repository_id",
                        "description": "ID of the Repository to filter on",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a codespace for the authenticated user",
                "description": "Creates a new codespace, owned by the authenticated user.\n\nThis endpoint requires either a `repository_id` OR a `pull_request` but not both.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/create-for-authenticated-user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "required": [
                                            "repository_id"
                                        ],
                                        "properties": {
                                            "repository_id": {
                                                "description": "Repository id for this codespace",
                                                "type": "integer"
                                            },
                                            "ref": {
                                                "description": "Git ref (typically a branch name) for this codespace",
                                                "type": "string"
                                            },
                                            "location": {
                                                "description": "The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.",
                                                "type": "string"
                                            },
                                            "geo": {
                                                "description": "The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.",
                                                "type": "string",
                                                "enum": [
                                                    "EuropeWest",
                                                    "SoutheastAsia",
                                                    "UsEast",
                                                    "UsWest"
                                                ]
                                            },
                                            "client_ip": {
                                                "description": "IP for location auto-detection when proxying a request",
                                                "type": "string"
                                            },
                                            "machine": {
                                                "description": "Machine type to use for this codespace",
                                                "type": "string"
                                            },
                                            "devcontainer_path": {
                                                "description": "Path to devcontainer.json config to use for this codespace",
                                                "type": "string"
                                            },
                                            "multi_repo_permissions_opt_out": {
                                                "description": "Whether to authorize requested permissions from devcontainer.json",
                                                "type": "boolean"
                                            },
                                            "working_directory": {
                                                "description": "Working directory for this codespace",
                                                "type": "string"
                                            },
                                            "idle_timeout_minutes": {
                                                "description": "Time in minutes before codespace stops from inactivity",
                                                "type": "integer"
                                            },
                                            "display_name": {
                                                "description": "Display name for this codespace",
                                                "type": "string"
                                            },
                                            "retention_period_minutes": {
                                                "description": "Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
                                                "type": "integer"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "pull_request"
                                        ],
                                        "properties": {
                                            "pull_request": {
                                                "required": [
                                                    "pull_request_number",
                                                    "repository_id"
                                                ],
                                                "description": "Pull request number for this codespace",
                                                "type": "object",
                                                "properties": {
                                                    "pull_request_number": {
                                                        "description": "Pull request number",
                                                        "type": "integer"
                                                    },
                                                    "repository_id": {
                                                        "description": "Repository id for this codespace",
                                                        "type": "integer"
                                                    }
                                                }
                                            },
                                            "location": {
                                                "description": "The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.",
                                                "type": "string"
                                            },
                                            "geo": {
                                                "description": "The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.",
                                                "type": "string",
                                                "enum": [
                                                    "EuropeWest",
                                                    "SoutheastAsia",
                                                    "UsEast",
                                                    "UsWest"
                                                ]
                                            },
                                            "machine": {
                                                "description": "Machine type to use for this codespace",
                                                "type": "string"
                                            },
                                            "devcontainer_path": {
                                                "description": "Path to devcontainer.json config to use for this codespace",
                                                "type": "string"
                                            },
                                            "working_directory": {
                                                "description": "Working directory for this codespace",
                                                "type": "string"
                                            },
                                            "idle_timeout_minutes": {
                                                "description": "Time in minutes before codespace stops from inactivity",
                                                "type": "integer"
                                            }
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "repository_id": 1,
                                        "ref": "main",
                                        "geo": "UsWest"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/codespaces/secrets": {
            "get": {
                "summary": "List secrets for the authenticated user",
                "description": "Lists all development environment secrets available for a user's codespaces without revealing their\nencrypted values.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/list-secrets-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/codespaces/secrets/public-key": {
            "get": {
                "summary": "Get public key for the authenticated user",
                "description": "Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/get-public-key-for-authenticated-user"
            }
        },
        "/user/codespaces/secrets/{secret_name}": {
            "get": {
                "summary": "Get a secret for the authenticated user",
                "description": "Gets a development environment secret available to a user's codespaces without revealing its encrypted value.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/get-secret-for-authenticated-user",
                "parameters": [
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Create or update a secret for the authenticated user",
                "description": "Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/create-or-update-secret-for-authenticated-user",
                "parameters": [
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "encrypted_value": {
                                        "type": "string",
                                        "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.",
                                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                                    },
                                    "key_id": {
                                        "type": "string",
                                        "description": "ID of the key you used to encrypt the secret."
                                    },
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.",
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "key_id"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "encrypted_value": "c2VjcmV0",
                                        "key_id": "012345678912345678",
                                        "selected_repository_ids": [
                                            "1234567",
                                            "2345678"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a secret for the authenticated user",
                "description": "Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/delete-secret-for-authenticated-user",
                "parameters": [
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/codespaces/secrets/{secret_name}/repositories": {
            "get": {
                "summary": "List selected repositories for a user secret",
                "description": "List the repositories that have been granted the ability to use a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/list-repositories-for-secret-for-authenticated-user",
                "parameters": [
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Set selected repositories for a user secret",
                "description": "Select the repositories that will use a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/set-repositories-for-secret-for-authenticated-user",
                "parameters": [
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "selected_repository_ids": {
                                        "type": "array",
                                        "description": "An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "selected_repository_ids"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "selected_repository_ids": [
                                            "1296269",
                                            "1296280"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
            "put": {
                "summary": "Add a selected repository to a user secret",
                "description": "Adds a repository to the selected repositories for a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/add-repository-for-secret-for-authenticated-user",
                "parameters": [
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove a selected repository from a user secret",
                "description": "Removes a repository from the selected repositories for a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/remove-repository-for-secret-for-authenticated-user",
                "parameters": [
                    {
                        "name": "secret_name",
                        "description": "The name of the secret.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repository_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/user/codespaces/{codespace_name}": {
            "get": {
                "summary": "Get a codespace for the authenticated user",
                "description": "Gets information about a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/get-for-authenticated-user",
                "parameters": [
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update a codespace for the authenticated user",
                "description": "Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.\n\nIf you specify a new machine type it will be applied the next time your codespace is started.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/update-for-authenticated-user",
                "parameters": [
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "machine": {
                                        "description": "A valid machine to transition this codespace to.",
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "description": "Display name for this codespace",
                                        "type": "string"
                                    },
                                    "recent_folders": {
                                        "description": "Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "machine": "standardLinux"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a codespace for the authenticated user",
                "description": "Deletes a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/delete-for-authenticated-user",
                "parameters": [
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/codespaces/{codespace_name}/exports": {
            "post": {
                "summary": "Export a codespace for the authenticated user",
                "description": "Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.\n\nIf changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/export-for-authenticated-user",
                "parameters": [
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/codespaces/{codespace_name}/exports/{export_id}": {
            "get": {
                "summary": "Get details about a codespace export",
                "description": "Gets information about an export of a codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/get-export-details-for-authenticated-user",
                "parameters": [
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "export_id",
                        "in": "path",
                        "required": true,
                        "description": "The ID of the export operation, or `latest`. Currently only `latest` is currently supported.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/codespaces/{codespace_name}/machines": {
            "get": {
                "summary": "List machine types for a codespace",
                "description": "List the machine types a codespace can transition to use.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/codespace-machines-for-authenticated-user",
                "parameters": [
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/codespaces/{codespace_name}/publish": {
            "post": {
                "summary": "Create a repository from an unpublished codespace",
                "description": "Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.\n\nThe codespace's token is granted write permissions to the repository, allowing the user to push their changes.\n\nThis will fail for a codespace that is already published, meaning it has an associated repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/publish-for-authenticated-user",
                "parameters": [
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "A name for the new repository.",
                                        "type": "string"
                                    },
                                    "private": {
                                        "description": "Whether the new repository should be private.",
                                        "type": "boolean",
                                        "default": false
                                    }
                                }
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "repository": "monalisa-octocat-hello-world-g4wpq6h95q",
                                        "private": false
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/codespaces/{codespace_name}/start": {
            "post": {
                "summary": "Start a codespace for the authenticated user",
                "description": "Starts a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/start-for-authenticated-user",
                "parameters": [
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/codespaces/{codespace_name}/stop": {
            "post": {
                "summary": "Stop a codespace for the authenticated user",
                "description": "Stops a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.",
                "tags": [
                    "codespaces"
                ],
                "operationId": "codespaces/stop-for-authenticated-user",
                "parameters": [
                    {
                        "name": "codespace_name",
                        "in": "path",
                        "required": true,
                        "description": "The name of the codespace.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/docker/conflicts": {
            "get": {
                "summary": "Get list of conflicting packages during Docker migration for authenticated-user",
                "description": "Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/list-docker-migration-conflicting-packages-for-authenticated-user"
            }
        },
        "/user/email/visibility": {
            "patch": {
                "summary": "Set primary email visibility for the authenticated user",
                "description": "Sets the visibility for your primary email addresses.",
                "tags": [
                    "users"
                ],
                "operationId": "users/set-primary-email-visibility-for-authenticated-user",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "visibility": {
                                        "description": "Denotes whether an email is publicly visible.",
                                        "type": "string",
                                        "enum": [
                                            "public",
                                            "private"
                                        ]
                                    }
                                },
                                "required": [
                                    "visibility"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example setting the primary email address to private",
                                    "value": {
                                        "visibility": "private"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/emails": {
            "get": {
                "summary": "List email addresses for the authenticated user",
                "description": "Lists all of your email addresses, and specifies which one is visible\nto the public.\n\nOAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-emails-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Add an email address for the authenticated user",
                "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/add-email-for-authenticated-user",
                "parameters": [],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "emails": {
                                                "description": "Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "username@example.com"
                                                },
                                                "minItems": 1,
                                                "example": []
                                            }
                                        },
                                        "required": [
                                            "emails"
                                        ],
                                        "example": {
                                            "emails": [
                                                "octocat@github.com",
                                                "mona@github.com"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "username@example.com"
                                        },
                                        "minItems": 1
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example adding multiple email addresses",
                                    "value": {
                                        "emails": [
                                            "octocat@github.com",
                                            "mona@github.com",
                                            "octocat@octocat.org"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an email address for the authenticated user",
                "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/delete-email-for-authenticated-user",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "description": "Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
                                        "properties": {
                                            "emails": {
                                                "description": "Email addresses associated with the GitHub user account.",
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "username@example.com"
                                                },
                                                "minItems": 1
                                            }
                                        },
                                        "example": {
                                            "emails": [
                                                "octocat@github.com",
                                                "mona@github.com"
                                            ]
                                        },
                                        "required": [
                                            "emails"
                                        ]
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "username@example.com"
                                        },
                                        "minItems": 1
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "examples": {
                                "default": {
                                    "summary": "Example deleting multiple email accounts",
                                    "value": {
                                        "emails": [
                                            "octocat@github.com",
                                            "mona@github.com"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/followers": {
            "get": {
                "summary": "List followers of the authenticated user",
                "description": "Lists the people following the authenticated user.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-followers-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/following": {
            "get": {
                "summary": "List the people the authenticated user follows",
                "description": "Lists the people who the authenticated user follows.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-followed-by-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/following/{username}": {
            "get": {
                "summary": "Check if a person is followed by the authenticated user",
                "description": "",
                "tags": [
                    "users"
                ],
                "operationId": "users/check-person-is-followed-by-authenticated",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Follow a user",
                "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"\n\nOAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/follow",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Unfollow a user",
                "description": "OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/unfollow",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/gpg_keys": {
            "get": {
                "summary": "List GPG keys for the authenticated user",
                "description": "Lists the current user's GPG keys.\n\nOAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-gpg-keys-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a GPG key for the authenticated user",
                "description": "Adds a GPG key to the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.",
                "operationId": "users/create-gpg-key-for-authenticated-user",
                "tags": [
                    "users"
                ],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "A descriptive name for the new key.",
                                        "type": "string"
                                    },
                                    "armored_public_key": {
                                        "description": "A GPG key in ASCII-armored format.",
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "required": [
                                    "armored_public_key"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Octocat's GPG Key",
                                        "armored_public_key": "-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1\n\nmQINBFnZ2ZIBEADQ2Z7Z7\n-----END PGP PUBLIC KEY BLOCK-----"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/gpg_keys/{gpg_key_id}": {
            "get": {
                "summary": "Get a GPG key for the authenticated user",
                "description": "View extended details for a single GPG key.\n\nOAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/get-gpg-key-for-authenticated-user",
                "parameters": [
                    {
                        "name": "gpg_key_id",
                        "description": "The unique identifier of the GPG key.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a GPG key for the authenticated user",
                "description": "Removes a GPG key from the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/delete-gpg-key-for-authenticated-user",
                "parameters": [
                    {
                        "name": "gpg_key_id",
                        "description": "The unique identifier of the GPG key.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/user/installations": {
            "get": {
                "summary": "List app installations accessible to the user access token",
                "description": "Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-installations-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/installations/{installation_id}/repositories": {
            "get": {
                "summary": "List repositories accessible to the user access token",
                "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nThe access the user has to each repository is included in the hash under the `permissions` key.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-installation-repos-for-authenticated-user",
                "parameters": [
                    {
                        "name": "installation_id",
                        "description": "The unique identifier of the installation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "examples": {
                            "default": {
                                "value": 1
                            }
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/installations/{installation_id}/repositories/{repository_id}": {
            "put": {
                "summary": "Add a repository to an app installation",
                "description": "Add a single repository to an installation. The authenticated user must have admin access to the repository.    \n\nThis endpoint only works for PATs (classic) with the `repo` scope.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/add-repo-to-installation-for-authenticated-user",
                "parameters": [
                    {
                        "name": "installation_id",
                        "description": "The unique identifier of the installation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "examples": {
                            "default": {
                                "value": 1
                            }
                        }
                    },
                    {
                        "name": "repository_id",
                        "description": "The unique identifier of the repository.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Remove a repository from an app installation",
                "description": "Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`. \n\nThis endpoint only works for PATs (classic) with the `repo` scope.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/remove-repo-from-installation-for-authenticated-user",
                "parameters": [
                    {
                        "name": "installation_id",
                        "description": "The unique identifier of the installation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "examples": {
                            "default": {
                                "value": 1
                            }
                        }
                    },
                    {
                        "name": "repository_id",
                        "description": "The unique identifier of the repository.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/user/interaction-limits": {
            "get": {
                "summary": "Get interaction restrictions for your public repositories",
                "description": "Shows which type of GitHub user can interact with your public repositories and when the restriction expires.",
                "tags": [
                    "interactions"
                ],
                "operationId": "interactions/get-restrictions-for-authenticated-user"
            },
            "put": {
                "summary": "Set interaction restrictions for your public repositories",
                "description": "Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.",
                "tags": [
                    "interactions"
                ],
                "operationId": "interactions/set-restrictions-for-authenticated-user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Interaction Restrictions",
                                "description": "Limit interactions to a specific type of user for a specified duration",
                                "type": "object",
                                "properties": {
                                    "limit": {
                                        "type": "string",
                                        "description": "The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.",
                                        "example": "collaborators_only",
                                        "enum": [
                                            "existing_users",
                                            "contributors_only",
                                            "collaborators_only"
                                        ]
                                    },
                                    "expiry": {
                                        "type": "string",
                                        "description": "The duration of the interaction restriction. Default: `one_day`.",
                                        "example": "one_month",
                                        "enum": [
                                            "one_day",
                                            "three_days",
                                            "one_week",
                                            "one_month",
                                            "six_months"
                                        ]
                                    }
                                },
                                "required": [
                                    "limit"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "limit": "collaborators_only",
                                        "expiry": "one_month"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove interaction restrictions from your public repositories",
                "description": "Removes any interaction restrictions from your public repositories.",
                "tags": [
                    "interactions"
                ],
                "operationId": "interactions/remove-restrictions-for-authenticated-user"
            }
        },
        "/user/issues": {
            "get": {
                "summary": "List user account issues assigned to the authenticated user",
                "description": "List issues across owned and member repositories assigned to the authenticated user.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.",
                "tags": [
                    "issues"
                ],
                "operationId": "issues/list-for-authenticated-user",
                "parameters": [
                    {
                        "name": "filter",
                        "description": "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "assigned",
                                "created",
                                "mentioned",
                                "subscribed",
                                "repos",
                                "all"
                            ],
                            "default": "assigned"
                        }
                    },
                    {
                        "name": "state",
                        "description": "Indicates the state of the issues to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "closed",
                                "all"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "labels",
                        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "What to sort results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "comments"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/keys": {
            "get": {
                "summary": "List public SSH keys for the authenticated user",
                "description": "Lists the public SSH keys for the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-public-ssh-keys-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a public SSH key for the authenticated user",
                "description": "Adds a public SSH key to the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.",
                "operationId": "users/create-public-ssh-key-for-authenticated-user",
                "tags": [
                    "users"
                ],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "description": "A descriptive name for the new key.",
                                        "type": "string",
                                        "example": "Personal MacBook Air"
                                    },
                                    "key": {
                                        "description": "The public SSH key to add to your GitHub account.",
                                        "type": "string",
                                        "pattern": "^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) "
                                    }
                                },
                                "required": [
                                    "key"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
                                        "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/keys/{key_id}": {
            "get": {
                "summary": "Get a public SSH key for the authenticated user",
                "description": "View extended details for a single public SSH key.\n\nOAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/get-public-ssh-key-for-authenticated-user",
                "parameters": [
                    {
                        "name": "key_id",
                        "description": "The unique identifier of the key.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a public SSH key for the authenticated user",
                "description": "Removes a public SSH key from the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/delete-public-ssh-key-for-authenticated-user",
                "parameters": [
                    {
                        "name": "key_id",
                        "description": "The unique identifier of the key.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/user/marketplace_purchases": {
            "get": {
                "summary": "List subscriptions for the authenticated user",
                "description": "Lists the active subscriptions for the authenticated user.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-subscriptions-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/marketplace_purchases/stubbed": {
            "get": {
                "summary": "List subscriptions for the authenticated user (stubbed)",
                "description": "Lists the active subscriptions for the authenticated user.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/list-subscriptions-for-authenticated-user-stubbed",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/memberships/orgs": {
            "get": {
                "summary": "List organization memberships for the authenticated user",
                "description": "Lists all of the authenticated user's organization memberships.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-memberships-for-authenticated-user",
                "parameters": [
                    {
                        "name": "state",
                        "description": "Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "pending"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/memberships/orgs/{org}": {
            "get": {
                "summary": "Get an organization membership for the authenticated user",
                "description": "If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/get-membership-for-authenticated-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Update an organization membership for the authenticated user",
                "description": "Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/update-membership-for-authenticated-user",
                "parameters": [
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "type": "string",
                                        "description": "The state that the membership should be in. Only `\"active\"` will be accepted.",
                                        "enum": [
                                            "active"
                                        ]
                                    }
                                },
                                "required": [
                                    "state"
                                ]
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "state": "active"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/migrations": {
            "get": {
                "summary": "List user migrations",
                "description": "Lists all migrations a user has started.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/list-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Start a user migration",
                "description": "Initiates the generation of a user migration archive.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/start-for-authenticated-user",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "lock_repositories": {
                                        "description": "Lock the repositories being migrated at the start of the migration",
                                        "example": true,
                                        "readOnly": false,
                                        "type": "boolean"
                                    },
                                    "exclude_metadata": {
                                        "description": "Indicates whether metadata should be excluded and only git source should be included for the migration.",
                                        "example": true,
                                        "readOnly": false,
                                        "type": "boolean"
                                    },
                                    "exclude_git_data": {
                                        "description": "Indicates whether the repository git data should be excluded from the migration.",
                                        "example": true,
                                        "readOnly": false,
                                        "type": "boolean"
                                    },
                                    "exclude_attachments": {
                                        "description": "Do not include attachments in the migration",
                                        "example": true,
                                        "readOnly": false,
                                        "type": "boolean"
                                    },
                                    "exclude_releases": {
                                        "description": "Do not include releases in the migration",
                                        "example": true,
                                        "readOnly": false,
                                        "type": "boolean"
                                    },
                                    "exclude_owner_projects": {
                                        "description": "Indicates whether projects owned by the organization or users should be excluded.",
                                        "example": true,
                                        "readOnly": false,
                                        "type": "boolean"
                                    },
                                    "org_metadata_only": {
                                        "type": "boolean",
                                        "example": true,
                                        "description": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).",
                                        "default": false
                                    },
                                    "exclude": {
                                        "description": "Exclude attributes from the API response to improve performance",
                                        "example": [
                                            "repositories"
                                        ],
                                        "readOnly": false,
                                        "type": "array",
                                        "items": {
                                            "description": "Allowed values that can be passed to the exclude param.",
                                            "enum": [
                                                "repositories"
                                            ],
                                            "example": "repositories",
                                            "type": "string"
                                        }
                                    },
                                    "repositories": {
                                        "type": "array",
                                        "items": {
                                            "description": "Repository path, owner and name",
                                            "example": "acme/widgets",
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "repositories"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "repositories": [
                                            "octocat/Hello-World"
                                        ],
                                        "lock_repositories": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/migrations/{migration_id}": {
            "get": {
                "summary": "Get a user migration status",
                "description": "Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n\n*   `pending` - the migration hasn't started yet.\n*   `exporting` - the migration is in progress.\n*   `exported` - the migration finished successfully.\n*   `failed` - the migration failed.\n\nOnce the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/get-status-for-authenticated-user",
                "parameters": [
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "exclude",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ]
            }
        },
        "/user/migrations/{migration_id}/archive": {
            "get": {
                "summary": "Download a user migration archive",
                "description": "Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n\n*   attachments\n*   bases\n*   commit\\_comments\n*   issue\\_comments\n*   issue\\_events\n*   issues\n*   milestones\n*   organizations\n*   projects\n*   protected\\_branches\n*   pull\\_request\\_reviews\n*   pull\\_requests\n*   releases\n*   repositories\n*   review\\_comments\n*   schema\n*   users\n\nThe archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/get-archive-for-authenticated-user",
                "parameters": [
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a user migration archive",
                "description": "Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/delete-archive-for-authenticated-user",
                "parameters": [
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/user/migrations/{migration_id}/repos/{repo_name}/lock": {
            "delete": {
                "summary": "Unlock a user repository",
                "description": "Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/unlock-repo-for-authenticated-user",
                "parameters": [
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "repo_name",
                        "description": "repo_name parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/migrations/{migration_id}/repositories": {
            "get": {
                "summary": "List repositories for a user migration",
                "description": "Lists all the repositories for this user migration.",
                "tags": [
                    "migrations"
                ],
                "operationId": "migrations/list-repos-for-authenticated-user",
                "parameters": [
                    {
                        "name": "migration_id",
                        "description": "The unique identifier of the migration.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/orgs": {
            "get": {
                "summary": "List organizations for the authenticated user",
                "description": "List organizations for the authenticated user.\n\nFor OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.\n\n> [!NOTE]\n> Requests using a fine-grained access token will receive a `200 Success` response with an empty list.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/packages": {
            "get": {
                "summary": "List packages for the authenticated user's namespace",
                "description": "Lists packages owned by the authenticated user within the user's namespace.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/list-packages-for-authenticated-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "visibility",
                        "description": "The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "public",
                                "private",
                                "internal"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/user/packages/{package_type}/{package_name}": {
            "get": {
                "summary": "Get a package for the authenticated user",
                "description": "Gets a specific package for a package owned by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/get-package-for-authenticated-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a package for the authenticated user",
                "description": "Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/delete-package-for-authenticated-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/packages/{package_type}/{package_name}/restore": {
            "post": {
                "summary": "Restore a package for the authenticated user",
                "description": "Restores a package owned by the authenticated user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/restore-package-for-authenticated-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "token",
                        "description": "package token",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "in": "query"
                    }
                ]
            }
        },
        "/user/packages/{package_type}/{package_name}/versions": {
            "get": {
                "summary": "List package versions for a package owned by the authenticated user",
                "description": "Lists package versions for a package owned by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/get-all-package-versions-for-package-owned-by-authenticated-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "required": false,
                        "description": "The state of the package, either active or deleted.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "deleted"
                            ],
                            "default": "active"
                        }
                    }
                ]
            }
        },
        "/user/packages/{package_type}/{package_name}/versions/{package_version_id}": {
            "get": {
                "summary": "Get a package version for the authenticated user",
                "description": "Gets a specific package version for a package owned by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/get-package-version-for-authenticated-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package_version_id",
                        "description": "Unique identifier of the package version.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a package version for the authenticated user",
                "description": "Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/delete-package-version-for-authenticated-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package_version_id",
                        "description": "Unique identifier of the package version.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
            "post": {
                "summary": "Restore a package version for the authenticated user",
                "description": "Restores a package version owned by the authenticated user.\n\nYou can restore a deleted package version under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/restore-package-version-for-authenticated-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package_version_id",
                        "description": "Unique identifier of the package version.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/user/projects": {
            "post": {
                "summary": "Create a user project",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/create-for-authenticated-user",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the project",
                                        "example": "Week One Sprint",
                                        "type": "string"
                                    },
                                    "body": {
                                        "description": "Body of the project",
                                        "example": "This project represents the sprint of the first week in January",
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "summary": "Create a new project",
                                    "value": {
                                        "name": "My Projects",
                                        "body": "A board to manage my personal projects."
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/user/public_emails": {
            "get": {
                "summary": "List public email addresses for the authenticated user",
                "description": "Lists your publicly visible email address, which you can set with the\n[Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)\nendpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-public-emails-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/repos": {
            "get": {
                "summary": "List repositories for the authenticated user",
                "description": "Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-for-authenticated-user",
                "parameters": [
                    {
                        "name": "visibility",
                        "description": "Limit results to repositories with the specified visibility.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "public",
                                "private"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "affiliation",
                        "description": "Comma-separated list of values. Can include:  \n * `owner`: Repositories that are owned by the authenticated user.  \n * `collaborator`: Repositories that the user has been added to as a collaborator.  \n * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "owner,collaborator,organization_member"
                        }
                    },
                    {
                        "name": "type",
                        "description": "Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "owner",
                                "public",
                                "private",
                                "member"
                            ],
                            "default": "all"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "pushed",
                                "full_name"
                            ],
                            "default": "full_name"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "before",
                        "description": "Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a repository for the authenticated user",
                "description": "Creates a new repository for the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/create-for-authenticated-user",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the repository.",
                                        "type": "string",
                                        "example": "Team Environment"
                                    },
                                    "description": {
                                        "description": "A short description of the repository.",
                                        "type": "string"
                                    },
                                    "homepage": {
                                        "description": "A URL with more information about the repository.",
                                        "type": "string"
                                    },
                                    "private": {
                                        "description": "Whether the repository is private.",
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "has_issues": {
                                        "description": "Whether issues are enabled.",
                                        "default": true,
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "has_projects": {
                                        "description": "Whether projects are enabled.",
                                        "default": true,
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "has_wiki": {
                                        "description": "Whether the wiki is enabled.",
                                        "default": true,
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "has_discussions": {
                                        "description": "Whether discussions are enabled.",
                                        "default": false,
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "team_id": {
                                        "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
                                        "type": "integer"
                                    },
                                    "auto_init": {
                                        "description": "Whether the repository is initialized with a minimal README.",
                                        "default": false,
                                        "type": "boolean"
                                    },
                                    "gitignore_template": {
                                        "description": "The desired language or platform to apply to the .gitignore.",
                                        "example": "Haskell",
                                        "type": "string"
                                    },
                                    "license_template": {
                                        "description": "The license keyword of the open source license for this repository.",
                                        "example": "mit",
                                        "type": "string"
                                    },
                                    "allow_squash_merge": {
                                        "description": "Whether to allow squash merges for pull requests.",
                                        "default": true,
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "allow_merge_commit": {
                                        "description": "Whether to allow merge commits for pull requests.",
                                        "default": true,
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "allow_rebase_merge": {
                                        "description": "Whether to allow rebase merges for pull requests.",
                                        "default": true,
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "allow_auto_merge": {
                                        "description": "Whether to allow Auto-merge to be used on pull requests.",
                                        "default": false,
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "delete_branch_on_merge": {
                                        "description": "Whether to delete head branches when pull requests are merged",
                                        "default": false,
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "squash_merge_commit_title": {
                                        "type": "string",
                                        "enum": [
                                            "PR_TITLE",
                                            "COMMIT_OR_PR_TITLE"
                                        ],
                                        "description": "Required when using `squash_merge_commit_message`.\n\nThe default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
                                    },
                                    "squash_merge_commit_message": {
                                        "type": "string",
                                        "enum": [
                                            "PR_BODY",
                                            "COMMIT_MESSAGES",
                                            "BLANK"
                                        ],
                                        "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
                                    },
                                    "merge_commit_title": {
                                        "type": "string",
                                        "enum": [
                                            "PR_TITLE",
                                            "MERGE_MESSAGE"
                                        ],
                                        "description": "Required when using `merge_commit_message`.\n\nThe default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
                                    },
                                    "merge_commit_message": {
                                        "type": "string",
                                        "enum": [
                                            "PR_BODY",
                                            "PR_TITLE",
                                            "BLANK"
                                        ],
                                        "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
                                    },
                                    "has_downloads": {
                                        "description": "Whether downloads are enabled.",
                                        "default": true,
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "is_template": {
                                        "description": "Whether this repository acts as a template that can be used to generate new repositories.",
                                        "default": false,
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "name": "Hello-World",
                                        "description": "This is your first repo!",
                                        "homepage": "https://github.com",
                                        "private": false,
                                        "is_template": true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/repository_invitations": {
            "get": {
                "summary": "List repository invitations for the authenticated user",
                "description": "When authenticating as a user, this endpoint will list all currently open repository invitations for that user.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-invitations-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/repository_invitations/{invitation_id}": {
            "patch": {
                "summary": "Accept a repository invitation",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/accept-invitation-for-authenticated-user",
                "parameters": [
                    {
                        "name": "invitation_id",
                        "description": "The unique identifier of the invitation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Decline a repository invitation",
                "description": "",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/decline-invitation-for-authenticated-user",
                "parameters": [
                    {
                        "name": "invitation_id",
                        "description": "The unique identifier of the invitation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/user/social_accounts": {
            "get": {
                "summary": "List social accounts for the authenticated user",
                "description": "Lists all of your social accounts.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-social-accounts-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Add social accounts for the authenticated user",
                "description": "Add one or more social accounts to the authenticated user's profile.\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/add-social-account-for-authenticated-user",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "account_urls": {
                                        "description": "Full URLs for the social media profiles to add.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "https://twitter.com/github"
                                        },
                                        "example": []
                                    }
                                },
                                "required": [
                                    "account_urls"
                                ],
                                "example": {
                                    "account_urls": [
                                        "https://www.linkedin.com/company/github/",
                                        "https://twitter.com/github"
                                    ]
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Adding multiple social accounts",
                                    "value": {
                                        "account_urls": [
                                            "https://facebook.com/GitHub",
                                            "https://www.youtube.com/@GitHub"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete social accounts for the authenticated user",
                "description": "Deletes one or more social accounts from the authenticated user's profile.\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/delete-social-account-for-authenticated-user",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "account_urls": {
                                        "description": "Full URLs for the social media profiles to delete.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "https://twitter.com/github"
                                        },
                                        "example": []
                                    }
                                },
                                "required": [
                                    "account_urls"
                                ],
                                "example": {
                                    "account_urls": [
                                        "https://www.linkedin.com/company/github/",
                                        "https://twitter.com/github"
                                    ]
                                }
                            },
                            "examples": {
                                "default": {
                                    "summary": "Deleting multiple social accounts",
                                    "value": {
                                        "account_urls": [
                                            "https://facebook.com/GitHub",
                                            "https://www.youtube.com/@GitHub"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/ssh_signing_keys": {
            "get": {
                "summary": "List SSH signing keys for the authenticated user",
                "description": "Lists the SSH signing keys for the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-ssh-signing-keys-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            },
            "post": {
                "summary": "Create a SSH signing key for the authenticated user",
                "description": "Creates an SSH signing key for the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.",
                "operationId": "users/create-ssh-signing-key-for-authenticated-user",
                "tags": [
                    "users"
                ],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "description": "A descriptive name for the new key.",
                                        "type": "string",
                                        "example": "Personal MacBook Air"
                                    },
                                    "key": {
                                        "description": "The public SSH key to add to your GitHub account. For more information, see \"[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys).\"",
                                        "type": "string",
                                        "pattern": "^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com "
                                    }
                                },
                                "required": [
                                    "key"
                                ],
                                "type": "object"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
                                        "title": "ssh-rsa AAAAB3NzaC1yc2EAAA"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/ssh_signing_keys/{ssh_signing_key_id}": {
            "get": {
                "summary": "Get an SSH signing key for the authenticated user",
                "description": "Gets extended details for an SSH signing key.\n\nOAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/get-ssh-signing-key-for-authenticated-user",
                "parameters": [
                    {
                        "name": "ssh_signing_key_id",
                        "description": "The unique identifier of the SSH signing key.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete an SSH signing key for the authenticated user",
                "description": "Deletes an SSH signing key from the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/delete-ssh-signing-key-for-authenticated-user",
                "parameters": [
                    {
                        "name": "ssh_signing_key_id",
                        "description": "The unique identifier of the SSH signing key.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/user/starred": {
            "get": {
                "summary": "List repositories starred by the authenticated user",
                "description": "Lists repositories the authenticated user has starred.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-repos-starred-by-authenticated-user",
                "parameters": [
                    {
                        "name": "sort",
                        "description": "The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/starred/{owner}/{repo}": {
            "get": {
                "summary": "Check if a repository is starred by the authenticated user",
                "description": "Whether the authenticated user has starred the repository.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/check-repo-is-starred-by-authenticated-user",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Star a repository for the authenticated user",
                "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/star-repo-for-authenticated-user",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Unstar a repository for the authenticated user",
                "description": "Unstar a repository that the authenticated user has previously starred.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/unstar-repo-for-authenticated-user",
                "parameters": [
                    {
                        "name": "owner",
                        "description": "The account owner of the repository. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repo",
                        "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/user/subscriptions": {
            "get": {
                "summary": "List repositories watched by the authenticated user",
                "description": "Lists repositories the authenticated user is watching.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-watched-repos-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/teams": {
            "get": {
                "summary": "List teams for the authenticated user",
                "description": "List all of the teams across all of the organizations to which the authenticated\nuser belongs.\n\nOAuth app tokens and personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint.\n\nWhen using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.",
                "tags": [
                    "teams"
                ],
                "operationId": "teams/list-for-authenticated-user",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/user/{account_id}": {
            "get": {
                "summary": "Get a user using their ID",
                "description": "Provides publicly available information about someone with a GitHub account. This method takes their durable user `ID` instead of their `login`, which can change over time.\n\nIf you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).",
                "tags": [
                    "users"
                ],
                "operationId": "users/get-by-id",
                "parameters": [
                    {
                        "name": "account_id",
                        "description": "account_id parameter",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "summary": "List users",
                "description": "Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list",
                "parameters": [
                    {
                        "name": "since",
                        "description": "A user ID. Only return users with an ID greater than this ID.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/users/{username}": {
            "get": {
                "summary": "Get a user",
                "description": "Provides publicly available information about someone with a GitHub account.\n\nIf you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).",
                "tags": [
                    "users"
                ],
                "operationId": "users/get-by-username",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/attestations/{subject_digest}": {
            "get": {
                "summary": "List attestations",
                "description": "List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.\n\nThe collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-attestations",
                "parameters": [
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "before",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subject_digest",
                        "description": "Subject Digest",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "x-multi-segment": true
                    },
                    {
                        "name": "predicate_type",
                        "description": "Optional filter for fetching attestations with a given predicate type.\nThis option accepts `provenance`, `sbom`, or freeform text for custom predicate types.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/docker/conflicts": {
            "get": {
                "summary": "Get list of conflicting packages during Docker migration for user",
                "description": "Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/list-docker-migration-conflicting-packages-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/events": {
            "get": {
                "summary": "List events for the authenticated user",
                "description": "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. _Optional_: use the fine-grained token with following permission set to view private events: \"Events\" user permissions (read).\n\n> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-events-for-authenticated-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/events/orgs/{org}": {
            "get": {
                "summary": "List organization events for the authenticated user",
                "description": "This is the user's organization dashboard. You must be authenticated as the user to view this.\n\n> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-org-events-for-authenticated-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org",
                        "description": "The organization name. The name is not case sensitive.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/events/public": {
            "get": {
                "summary": "List public events for a user",
                "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-public-events-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/followers": {
            "get": {
                "summary": "List followers of a user",
                "description": "Lists the people following the specified user.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-followers-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/following": {
            "get": {
                "summary": "List the people a user follows",
                "description": "Lists the people who the specified user follows.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-following-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/following/{target_user}": {
            "get": {
                "summary": "Check if a user follows another user",
                "description": "",
                "tags": [
                    "users"
                ],
                "operationId": "users/check-following-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "target_user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/gists": {
            "get": {
                "summary": "List gists for a user",
                "description": "Lists public gists for the specified user:",
                "tags": [
                    "gists"
                ],
                "operationId": "gists/list-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "since",
                        "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/gpg_keys": {
            "get": {
                "summary": "List GPG keys for a user",
                "description": "Lists the GPG keys for a user. This information is accessible by anyone.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-gpg-keys-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/hovercard": {
            "get": {
                "summary": "Get contextual information for a user",
                "description": "Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n\n  The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
                "tags": [
                    "users"
                ],
                "operationId": "users/get-context-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subject_type",
                        "description": "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "organization",
                                "repository",
                                "issue",
                                "pull_request"
                            ]
                        }
                    },
                    {
                        "name": "subject_id",
                        "description": "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/installation": {
            "get": {
                "summary": "Get a user installation for the authenticated app",
                "description": "Enables an authenticated GitHub App to find the user\u2019s installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                "tags": [
                    "apps"
                ],
                "operationId": "apps/get-user-installation",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/keys": {
            "get": {
                "summary": "List public keys for a user",
                "description": "Lists the _verified_ public SSH keys for a user. This is accessible by anyone.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-public-keys-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/orgs": {
            "get": {
                "summary": "List organizations for a user",
                "description": "List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.",
                "tags": [
                    "orgs"
                ],
                "operationId": "orgs/list-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/packages": {
            "get": {
                "summary": "List packages for a user",
                "description": "Lists all packages in a user's namespace for which the requesting user has access.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/list-packages-for-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "visibility",
                        "description": "The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "public",
                                "private",
                                "internal"
                            ]
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    }
                ]
            }
        },
        "/users/{username}/packages/{package_type}/{package_name}": {
            "get": {
                "summary": "Get a package for a user",
                "description": "Gets a specific package metadata for a public package owned by a user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/get-package-for-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete a package for a user",
                "description": "Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/delete-package-for-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/packages/{package_type}/{package_name}/restore": {
            "post": {
                "summary": "Restore a package for a user",
                "description": "Restores an entire package for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/restore-package-for-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "token",
                        "description": "package token",
                        "schema": {
                            "type": "string"
                        },
                        "required": false,
                        "in": "query"
                    }
                ]
            }
        },
        "/users/{username}/packages/{package_type}/{package_name}/versions": {
            "get": {
                "summary": "List package versions for a package owned by a user",
                "description": "Lists package versions for a public package owned by a specified user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/get-all-package-versions-for-package-owned-by-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
            "get": {
                "summary": "Get a package version for a user",
                "description": "Gets a specific package version for a public package owned by a specified user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/get-package-version-for-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package_version_id",
                        "description": "Unique identifier of the package version.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Delete package version for a user",
                "description": "Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/delete-package-version-for-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package_version_id",
                        "description": "Unique identifier of the package version.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
            "post": {
                "summary": "Restore package version for a user",
                "description": "Restores a specific package version for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
                "tags": [
                    "packages"
                ],
                "operationId": "packages/restore-package-version-for-user",
                "parameters": [
                    {
                        "name": "package_type",
                        "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "npm",
                                "maven",
                                "rubygems",
                                "docker",
                                "nuget",
                                "container"
                            ]
                        }
                    },
                    {
                        "name": "package_name",
                        "description": "The name of the package.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package_version_id",
                        "description": "Unique identifier of the package version.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/users/{username}/projects": {
            "get": {
                "summary": "List user projects",
                "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
                "tags": [
                    "projects"
                ],
                "operationId": "projects/list-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "description": "Indicates the state of the projects to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "closed",
                                "all"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "deprecated": true
            }
        },
        "/users/{username}/received_events": {
            "get": {
                "summary": "List events received by the authenticated user",
                "description": "These are events that you've received by watching repositories and following users. If you are authenticated as the\ngiven user, you will see private events. Otherwise, you'll only see public events.\n\n> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-received-events-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/received_events/public": {
            "get": {
                "summary": "List public events received by a user",
                "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-received-public-events-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/repos": {
            "get": {
                "summary": "List repositories for a user",
                "description": "Lists public repositories for the specified user.",
                "tags": [
                    "repos"
                ],
                "operationId": "repos/list-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "description": "Limit results to repositories of the specified type.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "owner",
                                "member"
                            ],
                            "default": "owner"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated",
                                "pushed",
                                "full_name"
                            ],
                            "default": "full_name"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/settings/billing/actions": {
            "get": {
                "summary": "Get GitHub Actions billing for a user",
                "description": "Gets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
                "operationId": "billing/get-github-actions-billing-user",
                "tags": [
                    "billing"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/settings/billing/packages": {
            "get": {
                "summary": "Get GitHub Packages billing for a user",
                "description": "Gets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
                "operationId": "billing/get-github-packages-billing-user",
                "tags": [
                    "billing"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/settings/billing/shared-storage": {
            "get": {
                "summary": "Get shared storage billing for a user",
                "description": "Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
                "operationId": "billing/get-shared-storage-billing-user",
                "tags": [
                    "billing"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{username}/social_accounts": {
            "get": {
                "summary": "List social accounts for a user",
                "description": "Lists social media accounts for a user. This endpoint is accessible by anyone.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-social-accounts-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/ssh_signing_keys": {
            "get": {
                "summary": "List SSH signing keys for a user",
                "description": "Lists the SSH signing keys for a user. This operation is accessible by anyone.",
                "tags": [
                    "users"
                ],
                "operationId": "users/list-ssh-signing-keys-for-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/starred": {
            "get": {
                "summary": "List repositories starred by a user",
                "description": "Lists repositories a user has starred.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-repos-starred-by-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "description": "The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "updated"
                            ],
                            "default": "created"
                        }
                    },
                    {
                        "name": "direction",
                        "description": "The direction to sort the results by.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/users/{username}/subscriptions": {
            "get": {
                "summary": "List repositories watched by a user",
                "description": "Lists repositories a user is watching.",
                "tags": [
                    "activity"
                ],
                "operationId": "activity/list-repos-watched-by-user",
                "parameters": [
                    {
                        "name": "username",
                        "description": "The handle for the GitHub user account.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "page",
                        "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ]
            }
        },
        "/versions": {
            "get": {
                "summary": "Get all API versions",
                "description": "Get all supported GitHub API versions.",
                "tags": [
                    "meta"
                ],
                "operationId": "meta/get-all-versions"
            }
        },
        "/zen": {
            "get": {
                "summary": "Get the Zen of GitHub",
                "description": "Get a random sentence from the Zen of GitHub",
                "tags": [
                    "meta"
                ],
                "operationId": "meta/get-zen"
            }
        }
    }
}