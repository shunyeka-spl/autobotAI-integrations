import json
import traceback
from typing import Optional, Type, Union
from autobotAI_integrations import (
    BaseSchema,
    BaseService,
    ConnectionInterfaces,
)
import requests
from pydantic import Field

from autobotAI_integrations.models import (
    IntegrationCategory,
    RestAPICreds,
    RestAPIRequestBodyType,
)
from autobotAI_integrations.utils.logging_config import logger


class MalwareBazarIntegration(BaseSchema):
    base_url: str = "https://mb-api.abuse.ch/api/v1/"
    api_key: Optional[str] = Field(default=None, exclude=True)

    name: str = "MalwareBazar"
    category: Optional[str] = IntegrationCategory.SECURITY_TOOLS.value
    description: Optional[str] = (
        "MalwareBazar is a project dedicated to helping combat the spread of hackers, spammers, and abusive activity on the internet."
    )


class MalwareBazarService(BaseService):
    def __init__(self, ctx: dict, integration: Union[MalwareBazarIntegration, dict]):
        """
        Integration should have all the data regarding the integration
        """
        if not isinstance(integration, MalwareBazarIntegration):
            integration = MalwareBazarIntegration(**integration)
        super().__init__(ctx, integration)

    def _test_integration(self) -> dict:
        try:
            response = requests.post(
                self.integration.base_url,
                headers={"API-KEY": self.integration.api_key},
                data={"query": "get_recent", "selector": "time"},
                timeout=10,
            )
            response.raise_for_status()
            result = response.json()
            logger.info(f"Query Status {result.get('query_status')}")
            logger.info(f"Query Data Length {len(result.get('data'))}")
            if response.status_code == 200:
                return {"success": True}
            else:
                return {
                    "success": False,
                    "error": f"Request failed with status code: {response.status_code}",
                }
        except Exception as e:
            logger.exception("Connection Failed!")
            return {"success": False, "error": "Connection Failed!"}

    @staticmethod
    def get_forms():
        return {
            "label": "MalwareBazar",
            "type": "form",
            "children": [
                {
                    "name": "api_key",
                    "type": "text/password",
                    "label": "API Key",
                    "placeholder": "Enter the MalwareBazar API Key",
                    "required": True,
                }
            ],
        }

    @staticmethod
    def get_schema() -> Type[BaseSchema]:
        return MalwareBazarIntegration
    
    @classmethod
    def get_details(cls):
        details = super().get_details()
        details["preview"] = True
        return details

    @staticmethod
    def supported_connection_interfaces():
        return [
            ConnectionInterfaces.REST_API
        ]

    def generate_rest_api_creds(self) -> RestAPICreds:
        return RestAPICreds(
            base_url=self.integration.base_url,
            headers={
                "API-KEY": self.integration.api_key,
                "Content-Type": None,
            },
            request_body_type=RestAPIRequestBodyType.FORM_DATA.value,
        )
