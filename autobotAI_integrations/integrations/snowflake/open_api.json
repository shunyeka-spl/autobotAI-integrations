{
    "openapi": "3.0.0",
    "servers": [
        {
            "description": "Snowflake Database API",
            "url": "{base_url}"
        }
    ],
    "info": {
        "version": "0.0.1",
        "title": "Snowflake Database API",
        "description": "The Snowflake Database API is a REST API that you can use to access, update, and perform certain actions on Database resource in Snowflake.",
        "contact": {
            "name": "Snowflake, Inc.",
            "url": "https://snowflake.com",
            "email": "support@snowflake.com"
        }
    },
    "paths": {
        "/api/v2/databases": {
            "get": {
                "summary": "List databases",
                "tags": [
                    "database"
                ],
                "description": "Lists the accessible databases.",
                "operationId": "listDatabases",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/like"
                    },
                    {
                        "$ref": "#/components/parameters/startsWith"
                    },
                    {
                        "$ref": "#/components/parameters/showLimit"
                    },
                    {
                        "$ref": "#/components/parameters/fromName"
                    },
                    {
                        "name": "history",
                        "in": "query",
                        "description": "Optionally includes dropped databases that have not yet been purged.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Database"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            },
            "post": {
                "summary": "Create a database",
                "tags": [
                    "database"
                ],
                "description": "Create a database, with modifiers as query parameters. See the database definition for what is required to be provided in the request body. (Cloning not currently supported)",
                "operationId": "createDatabase",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/createMode"
                    },
                    {
                        "name": "kind",
                        "in": "query",
                        "description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Database"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        },
        "/api/v2/databases/from_share": {
            "post": {
                "summary": "Create a database from a share.",
                "tags": [
                    "database"
                ],
                "description": "Create a database from a given share",
                "operationId": "createDatabaseFromShare",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/createMode"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the database to be created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "share",
                        "in": "query",
                        "description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\".",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "kind",
                        "in": "query",
                        "description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        },
        "/api/v2/databases/{name}/clone": {
            "post": {
                "summary": "Clone a database",
                "tags": [
                    "database"
                ],
                "description": "Clone an existing database, with modifiers as query parameters. See the database definition for what is required to be provided in the request body. (Cloning not currently supported)",
                "operationId": "cloneDatabase",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/name"
                    },
                    {
                        "$ref": "#/components/parameters/createMode"
                    },
                    {
                        "name": "kind",
                        "in": "query",
                        "description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatabaseClone"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        },
        "/api/v2/databases/{name}": {
            "get": {
                "tags": [
                    "database"
                ],
                "description": "Fetch a database.",
                "operationId": "fetchDatabase",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Database"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            },
            "delete": {
                "summary": "Delete a database.",
                "tags": [
                    "database"
                ],
                "description": "Delete a database with the given name. If ifExists is used, the operation will succeed even if the object does not exist. Otherwise, there will be a failure if the drop is unsuccessful.",
                "operationId": "deleteDatabase",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/name"
                    },
                    {
                        "$ref": "#/components/parameters/ifExists"
                    },
                    {
                        "name": "restrict",
                        "in": "query",
                        "description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead.",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        },
        "/api/v2/databases/{name}/replication:enable": {
            "post": {
                "summary": "Enable database replication.",
                "tags": [
                    "database"
                ],
                "description": "Promotes a local database to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database.",
                "operationId": "enableDatabaseReplication",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/name"
                    },
                    {
                        "name": "ignore_edition_check",
                        "in": "query",
                        "description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountIdentifiers"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        },
        "/api/v2/databases/{name}/replication:disable": {
            "post": {
                "summary": "Disable database replication.",
                "tags": [
                    "database"
                ],
                "description": "Disables replication for this primary database, meaning no replica of this database (i.e. secondary database) in another account can be refreshed. Any secondary databases remain linked to the primary database, but requests to refresh a secondary database are denied.",
                "operationId": "disableDatabaseReplication",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/name"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountIdentifiers"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        },
        "/api/v2/databases/{name}/replication:refresh": {
            "post": {
                "summary": "Refresh database replications.",
                "tags": [
                    "database"
                ],
                "description": "Refreshes a secondary database from a snapshot of its primary database. A snapshot includes changes to the objects and data.",
                "operationId": "refreshDatabaseReplication",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/name"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        },
        "/api/v2/databases/{name}/failover:enable": {
            "post": {
                "summary": "Enable database failover.",
                "tags": [
                    "database"
                ],
                "description": "Specifies a comma-separated list of accounts in your organization where a replica of this primary database can be promoted to serve as the primary database.",
                "operationId": "enableDatabaseFailover",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/name"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountIdentifiers"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        },
        "/api/v2/databases/{name}/failover:disable": {
            "post": {
                "summary": "Disable database failover.",
                "tags": [
                    "database"
                ],
                "description": "Disables failover for this primary database, meaning no replica of this database (i.e. secondary database) can be promoted to serve as the primary database.",
                "operationId": "disableDatabaseFailover",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/name"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountIdentifiers"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        },
        "/api/v2/databases/{name}/failover:primary": {
            "post": {
                "summary": "Set database as primary.",
                "tags": [
                    "database"
                ],
                "description": "Promotes the specified secondary (replica) database to serve as the primary database.",
                "operationId": "primaryDatabaseFailover",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/name"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200SuccessResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFound"
                    },
                    "405": {
                        "$ref": "#/components/responses/405MethodNotAllowed"
                    },
                    "409": {
                        "$ref": "#/components/responses/409Conflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/500InternalServerError"
                    },
                    "503": {
                        "$ref": "#/components/responses/503ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/504GatewayTimeout"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AccountIdentifiers": {
                "type": "object",
                "description": "An array of unique account identifiers.",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    }
                },
                "example": {
                    "accounts": [
                        "accountName1",
                        "accountName2"
                    ]
                },
                "required": [
                    "accounts"
                ]
            },
            "Database": {
                "type": "object",
                "description": "A Snowflake database.",
                "properties": {
                    "created_on": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Database creation date and time"
                    },
                    "name": {
                        "$ref": "#/components/schemas/Identifier",
                        "description": "Name of the database"
                    },
                    "is_default": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Default database for a user"
                    },
                    "is_current": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Current database for the session"
                    },
                    "origin": {
                        "type": "string",
                        "readOnly": true
                    },
                    "owner": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Name of the role that owns the database"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database"
                    },
                    "options": {
                        "type": "string",
                        "readOnly": true
                    },
                    "retention_time": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of days that historical data is retained for Time Travel."
                    },
                    "dropped_on": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Database dropped date and time"
                    },
                    "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
                    },
                    "budget": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A budget defines a monthly spending limit on the compute costs for a Snowflake account or a custom group of Snowflake objects."
                    },
                    "owner_role_type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of role that owns the object, either ROLE or DATABASE_ROLE"
                    },
                    "data_retention_time_in_days": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database."
                    },
                    "default_ddl_collation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. The default can be overridden at the schema and individual table level."
                    },
                    "log_level": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. At the time of writing the supported values are TRACE, DEBUG, INFO, WARN, ERROR, FATAL and OFF."
                    },
                    "max_data_extension_time_in_days": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale."
                    },
                    "suspend_task_after_num_failures": {
                        "type": "integer",
                        "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically."
                    },
                    "trace_level": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. At the time of writing the supported values are ALWAYS, ON_EVENT and OFF."
                    },
                    "user_task_managed_initial_warehouse_size": {
                        "type": "string",
                        "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size."
                    },
                    "user_task_timeout_ms": {
                        "type": "integer",
                        "description": "Specifies the time limit on a single run of the task before it times out in milliseconds"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "DatabaseClone": {
                "type": "object",
                "description": "Clone database",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Database"
                    }
                ],
                "properties": {
                    "point_of_time": {
                        "$ref": "#/components/schemas/PointOfTime"
                    }
                }
            },
            "Identifier": {
                "type": "string",
                "description": "A Snowflake object identifier.",
                "pattern": "^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$"
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Error message returned by server"
                    },
                    "error_code": {
                        "type": "string",
                        "description": "Error code"
                    },
                    "request_id": {
                        "type": "string",
                        "description": "Unique request id"
                    }
                },
                "example": {
                    "message": "Compilation error!",
                    "error_code": "390189",
                    "request_id": "01afef9d-0607-0550-0001-dd270c3902d7"
                }
            },
            "SuccessResponse": {
                "type": "object",
                "description": "Schema for all the success response returned by server",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Message returned by server"
                    }
                },
                "example": {
                    "status": "Request successfully completed"
                }
            },
            "PointOfTime": {
                "type": "object",
                "description": "A point of time.",
                "required": [
                    "point_of_time_type"
                ],
                "properties": {
                    "point_of_time_type": {
                        "description": "Type of the point of time, can be `timestamp`, `offset`, or `statement`",
                        "type": "string"
                    },
                    "reference": {
                        "type": "string",
                        "description": "The relation to the point of time. At the time of writing `at` and `before` are supported."
                    }
                },
                "discriminator": {
                    "propertyName": "point_of_time_type",
                    "mapping": {
                        "timestamp": "PointOfTimeTimestamp",
                        "offset": "PointOfTimeOffset",
                        "statement": "PointOfTimeStatement"
                    }
                }
            },
            "PointOfTimeTimestamp": {
                "description": "A point of time that is identified by a timestamp.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PointOfTime"
                    }
                ],
                "properties": {
                    "timestamp": {
                        "type": "string",
                        "description": "Timestamp of the point of time."
                    }
                }
            },
            "PointOfTimeOffset": {
                "description": "A point of time that is identified by an offset in reference to right now.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PointOfTime"
                    }
                ],
                "properties": {
                    "offset": {
                        "type": "string",
                        "description": "Offset of the point of time."
                    }
                }
            },
            "PointOfTimeStatement": {
                "description": "A point of time that is identified by when a statement was executed.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PointOfTime"
                    }
                ],
                "properties": {
                    "statement": {
                        "type": "string",
                        "description": "Statement of the point of time."
                    }
                }
            }
        },
        "parameters": {
            "database": {
                "name": "database",
                "description": "String that specifies the identifier (i.e. name) for the database which the resource belongs to.",
                "required": true,
                "in": "path",
                "schema": {
                    "example": "TEST_DB",
                    "$ref": "#/components/schemas/Identifier"
                }
            },
            "schema": {
                "name": "schema",
                "description": "String that specifies the identifier (i.e. name) for the schema which the resource belongs to.",
                "required": true,
                "in": "path",
                "schema": {
                    "example": "TEST_SCHEMA",
                    "$ref": "#/components/schemas/Identifier"
                }
            },
            "name": {
                "name": "name",
                "description": "String that specifies the identifier (i.e. name) for the resource.",
                "required": true,
                "in": "path",
                "schema": {
                    "example": "TEST_NAME",
                    "$ref": "#/components/schemas/Identifier"
                }
            },
            "createMode": {
                "name": "createMode",
                "description": "A query parameter allowing support for different modes of resource creation.",
                "in": "query",
                "schema": {
                    "type": "string",
                    "enum": [
                        "errorIfExists",
                        "orReplace",
                        "ifNotExists"
                    ],
                    "example": "errorIfExists",
                    "default": "errorIfExists"
                }
            },
            "ifExists": {
                "name": "ifExists",
                "description": "A query parameter determining if the endpoint will not throw an error if the resource does not exist.",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "example": false,
                    "default": false
                }
            },
            "like": {
                "name": "like",
                "description": "A query parameter that filters the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters",
                "in": "query",
                "schema": {
                    "type": "string",
                    "example": "test_%"
                }
            },
            "startsWith": {
                "name": "startsWith",
                "description": "A query parameter that filters the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching.",
                "in": "query",
                "schema": {
                    "type": "string",
                    "example": "test"
                }
            },
            "rootOnly": {
                "name": "rootOnly",
                "description": "A query parameter that filters the command output to return only root resources (resources with no predecessors).",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "example": false,
                    "default": false
                }
            },
            "showLimit": {
                "name": "showLimit",
                "description": "A query parameter that limits the maximum number of rows returned by a command.",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "example": 10
                }
            },
            "fromName": {
                "name": "fromName",
                "description": "A query parameter enables fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name.",
                "in": "query",
                "schema": {
                    "type": "string",
                    "example": "from_test"
                }
            },
            "copyGrants": {
                "name": "copyGrants",
                "description": "A query parameter enabled copy grants during the creation of the object.",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "example": false,
                    "default": false
                }
            },
            "sessionId": {
                "name": "sessionId",
                "description": "A unique ID for the current session.",
                "required": true,
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "uuid",
                    "example": 524514326772799
                }
            },
            "content-type": {
                "name": "Content-Type",
                "description": "The type of content for the resource. Currently supports application/json.",
                "in": "header",
                "schema": {
                    "type": "string",
                    "enum": [
                        "application/json"
                    ]
                }
            },
            "accept": {
                "name": "Accept",
                "description": "The acceptance type for the resource. Currently supports application/json.",
                "in": "header",
                "schema": {
                    "type": "string",
                    "enum": [
                        "application/json"
                    ]
                }
            },
            "x-snowflake-authorization-token-type": {
                "name": "X-Snowflake-Authorization-Token-Type",
                "description": "The type for the Snowflake authorization token. Currently supports keypair-jwt tokens.",
                "in": "header",
                "schema": {
                    "type": "string",
                    "enum": [
                        "KEYPAIR_JWT"
                    ]
                }
            },
            "x-sfc-session": {
                "name": "X-Sfc-Session",
                "description": "The token for the current Snowflake session.",
                "in": "header",
                "required": false,
                "schema": {
                    "type": "string",
                    "description": "Snowflake Session Token",
                    "example": "ver:3-hint:1000-ABCD="
                }
            }
        },
        "securitySchemes": {
            "keyPair": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "Set X-Snowflake-Authorization-Token-Type to KEYPAIR_JWT if the token is a key pair authn JWT."
            },
            "ExternalOAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "Configure External Oauth with Snowflake (refer to docs). Set X-Snowflake-Authorization-Token-Type to OAUTH and set the Token to auth token received from the external Auth server."
            },
            "snowflakeOAuth": {
                "type": "oauth2",
                "flows": {
                    "implicit": {
                        "authorizationUrl": "/oauth/authorize",
                        "scopes": {}
                    }
                }
            }
        },
        "responses": {
            "200SuccessResponse": {
                "description": "Successful",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SuccessResponse"
                        }
                    }
                }
            },
            "201SuccessCreatedResponse": {
                "description": "Successfully create new resource on server.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SuccessResponse"
                        }
                    }
                }
            },
            "202SuccessAcceptedResponse": {
                "description": "Successfully accept the request, but it is not completed yet.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SuccessResponse"
                        }
                    }
                }
            },
            "400BadRequest": {
                "description": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the request body for retry.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "401Unauthorized": {
                "description": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a new access token for retry.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "403Forbidden": {
                "description": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "404NotFound": {
                "description": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "405MethodNotAllowed": {
                "description": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "409Conflict": {
                "description": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the options orReplace/ifNotExists.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "410Gone": {
                "description": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "415UnsupportedMediaType": {
                "description": "The request header Content-Type includes an unsupported media type. The API supports application/json only. If none specified, the request payload is taken as JSON, but if any other media type is specified, this error is returned.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "429LimitExceeded": {
                "description": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "500InternalServerError": {
                "description": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "503ServiceUnavailable": {
                "description": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "504GatewayTimeout": {
                "description": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "security": [
        {
            "keyPair": []
        },
        {
            "ExternalOAuth": []
        },
        {
            "snowflakeOAuth": []
        }
    ],
    "tags": [
        {
            "name": "database"
        }
    ]
}