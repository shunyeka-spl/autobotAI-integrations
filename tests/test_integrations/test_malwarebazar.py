from copy import deepcopy
from autobotAI_integrations.handlers.task_handler import handle_task
from autobotAI_integrations.integrations import integration_service_factory
import traceback


class TestClassMalwareBazar:
    def test_malwarebazar_token(
        self,
        get_keys,
        sample_integration_dict,
        test_result_format,
    ):
        tokens = {"api_key": get_keys["MALWAREBAZAR_API_KEY"]}
        integration = sample_integration_dict("malware_bazar", tokens)
        service = integration_service_factory.get_service(None, integration)
        res = service.is_active()
        print(res)
        assert res["success"]
        import time

        time.sleep(15)

        tokens = {
            "api_key": "jjfklsaddjflkas",
        }
        integration = sample_integration_dict("malware_bazar", tokens)
        service = integration_service_factory.get_service(None, integration)
        res = service.is_active()
        print(res)
        assert not res["success"]

    def test_actions_generation(self, get_keys):
        service = integration_service_factory.get_service_cls("malware_bazar")
        actions = service.get_all_rest_api_actions()
        for action in actions:
            assert action.name is not None
            assert action.name.strip() != ""
            print(action.model_dump_json(indent=2))
        assert len(actions) > 0
    
    def test_actions_run(
        self, get_keys, sample_restapi_task, test_result_format, sample_integration_dict
    ):
        import time

        time.sleep(15)
        tokens = {"api_key": get_keys["MALWAREBAZAR_API_KEY"]}
        integration = sample_integration_dict("malware_bazar", tokens)
        service = integration_service_factory.get_service(None, integration)
        actions = service.get_all_rest_api_actions()
        for action in actions:
            try:
                # In most Cases this will fail as parameters_definition does not contain actual values
                params = deepcopy(action.parameters_definition)
                for param in params:
                    if param.name == "body":
                        param.values = {"query": "get_recent", "selector": "time"}
                task = sample_restapi_task(
                    integration, action.code, params
                )
                result = handle_task(task)
                print(result.model_dump_json(indent=2))
                test_result_format(result)
            except Exception as e:
                traceback.print_exc()
                assert False